<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="mng">

    <sql id="pagingHeader">
        SELECT *
          FROM (SELECT row_number() over() rnum
                      ,z.*
                  FROM (
    </sql>

    <sql id="pagingFooter">
                      ) z
                 WHERE 1=1 
                 LIMIT (${limit} * ${page})
              ) zz
         WHERE rnum &gt;= ${limit} * (${page} - 1) + 1
    </sql>

    <select id="getLoginIdCnt" parameterType="hashmap" resultType="int">
        /* mng.getLoginIdCnt */
        SELECT COUNT(*) cnt FROM usr_user WHERE login_id = #{LOGIN_ID}
    </select>

	<select id="getUserNumCnt" parameterType="hashmap" resultType="int">
        /* mng.getUserNumCnt */
        SELECT COUNT(*) cnt
          FROM usr_user
         WHERE user_num = #{USER_NUM}
        <if test="@Ognl@isNotEmpty(LOGIN_ID)">
           AND login_id != #{LOGIN_ID}
        </if>
    </select>

	<insert id="insertUsrUser" keyProperty="USER_ID" parameterType="hashmap" statementType="CALLABLE">
        /* mng.insertUsrUser */
        <selectKey keyProperty="USER_ID" order="BEFORE" resultType="string">
            SELECT uuid_generate_v4()::text
        </selectKey>
		   INSERT INTO usr_user(user_id, password, user_nm, email, start_dt,
                end_dt, last_chg_dt, access_yn, login_id, dept_id,
                default_locale, user_num, id_end_dt)
            VALUES (#{USER_ID}, ENC_PASSWD_ENCRYPT(#{PASSWORD}), #{USER_NM}, #{EMAIL}, TO_CHAR(LOCALTIMESTAMP, 'yyyymmdd'),
                '99991231', TO_CHAR(LOCALTIMESTAMP, 'yyyymmdd'), 'Y', #{LOGIN_ID}, #{DEPT_ID},
                #{DEFAULT_LOCALE}, #{USER_NUM}, coalesce(#{ID_END_DT, jdbcType=VARCHAR},'99991231'))

            INSERT INTO usr_alloc(user_id, alloc_gbn_cd, alloc_id, dept_id)
            VALUES (#{USER_ID}, '0003', 'DEFAULT_USER', #{DEPT_ID})

            <if test="@Ognl@isNotEmpty(ABSENCE_RANGE)">
            INSERT INTO usr_user_absence(user_id, start_dt, end_dt, alt_user_id)
            VALUES (#{USER_ID}
               , SUBSTR(#{ABSENCE_RANGE}, 1, position('|' in #{ABSENCE_RANGE})-1)
               , SUBSTR(#{ABSENCE_RANGE}, position('|' in #{ABSENCE_RANGE})+1)
               , #{ALT_USER_ID, jdbcType=VARCHAR})

            </if>
    </insert>



    <insert id="insertUserLocale" parameterType="hashmap">
        INSERT INTO /* mng.insertUserLocale */ ms_usr_lang_map (user_id, lang_cd) VALUES (#{userId}, #{locale})
    </insert>

    <update id="updateUsrUser" statementType="CALLABLE" parameterType="hashmap">
        /* mng.updateUsrUser */
        <if test="@Ognl@isNotEmpty(ID_END_DT)">
		UPDATE usr_alloc
           SET end_dt = (CASE WHEN TO_DATE(#{ID_END_DT},'YYYYMMDD') > date_trunc('day', LOCALTIMESTAMP) THEN '99991231'
                              ELSE end_dt
                          END)
         WHERE user_id = #{USER_ID}
           AND end_dt = (SELECT end_dt FROM usr_user WHERE user_id = #{USER_ID})
        </if>

        UPDATE usr_user
        <set>
            <if test="@Ognl@isNotEmpty(USER_NM)">user_nm = #{USER_NM},</if>
            <if test="@Ognl@isNotEmpty(USER_NUM)">user_num = #{USER_NUM},</if>
            <if test="@Ognl@isNotEmpty(PASSWORD)">
                password = ENC_PASSWD_ENCRYPT(DECODE(#{PASSWORD}, '__RESET__', GET_CONFIG('common.defaultPassword'), #{PASSWORD})),
                last_passwd_mod_dt = CASE WHEN #{PASSWORD} = '__RESET__' THEN TO_CHAR(SYSDATE - GET_CONFIG('common.maxUserPasswordDuration'), 'YYYYMMDDHH24MISS')
                                          ELSE TO_CHAR(sysdate, 'YYYYMMDDHH24MISS')
                                      END,
            </if>
                email = #{EMAIL, jdbcType=VARCHAR},
            <if test="@Ognl@isNotEmpty(DEPT_ID)">dept_id = #{DEPT_ID},</if>
            <if test="@Ognl@isNotEmpty(ID_END_DT)">
                id_end_dt = #{ID_END_DT},
                end_dt = (CASE WHEN TO_DATE(#{ID_END_DT},'YYYYMMDD') > TRUNC(SYSDATE) THEN '99991231' ELSE end_dt END),
            </if>
            <if test="@Ognl@isEmpty(ID_END_DT)">
                id_end_dt = '99991231',
                end_dt = '99991231',
            </if>
            <if test="@Ognl@isNotEmpty(DEFAULT_LOCALE)">default_locale = #{DEFAULT_LOCALE},</if>
        </set>
         WHERE user_id = #{USER_ID};

        <if test="@Ognl@isNotEmpty(ABSENCE_YN)">
        DELETE from usr_user_absence
    		WHERE user_id = #{USER_ID};

	        <if test="@Ognl@isNotEmpty(ABSENCE_RANGE)">
		        INSERT INTO usr_user_absence
		            (user_id, start_dt, end_dt, alt_user_id)
		        VALUES
		            (#{USER_ID}
		           , SUBSTR(#{ABSENCE_RANGE}, 1, INSTR(#{ABSENCE_RANGE}, '|')-1)
		           , SUBSTR(#{ABSENCE_RANGE}, INSTR(#{ABSENCE_RANGE}, '|')+1)
		           , #{ALT_USER_ID, jdbcType=VARCHAR});
	        </if>

        </if>
    </update>

    <update id="updateMyInfo" parameterType="hashmap">
        /* mng.updateMyInfo */
        UPDATE usr_user
        <set>
            <if test="@Ognl@isNotEmpty(USER_NM)">user_nm = #{USER_NM},</if>
            <if test="@Ognl@isNotEmpty(USER_NUM)">user_num = #{USER_NUM},</if>
            email = #{EMAIL, jdbcType=VARCHAR},
            <if test="@Ognl@isNotEmpty(DEPT_ID)">dept_id = #{DEPT_ID},</if>
            <if test="@Ognl@isNotEmpty(DEFAULT_LOCALE)">default_locale = #{DEFAULT_LOCALE},</if>
        </set>
             WHERE user_id = #{requestUserId};

        <if test="@Ognl@isNotEmpty(ABSENCE_YN)">
            DELETE from usr_user_absence
             WHERE user_id = #{requestUserId};

            <if test="@Ognl@isNotEmpty(ABSENCE_RANGE)">
            INSERT INTO usr_user_absence
                (user_id, start_dt, end_dt, alt_user_id)
            VALUES
                (#{requestUserId}
               , SUBSTR(#{ABSENCE_RANGE}, 1, INSTR(#{ABSENCE_RANGE}, '|')-1)
               , SUBSTR(#{ABSENCE_RANGE}, INSTR(#{ABSENCE_RANGE}, '|')+1)
               , #{ALT_USER_ID, jdbcType=VARCHAR});
            </if>
        </if>

    </update>

    <delete id="deleteUsrUser">
        /* mng.deleteUsrUser */
		update usr_user
		set
			end_dt = to_char(localtimestamp, 'YYYYMMDD'),
			id_end_dt =
			(case
				when to_date(id_end_dt, 'yyyymmdd') > localtimestamp then to_char(localtimestamp, 'yyyymmdd')
				when id_end_dt = null then to_char(localtimestamp, 'yyyymmdd')
				else id_end_dt
			end)
		where 1 = 1
        <if test="@Ognl@isNotEmpty(USER_IDS)">
           AND user_id IN
            <foreach item="item" collection="USER_IDS" open="(" separator="," close=")">
               #{item}
            </foreach>
        </if>
           AND end_dt <![CDATA[>=]]> to_char(update
	usr_user
set
	end_dt = to_char(localtimestamp, 'YYYYMMDD'),
	id_end_dt =
	(case
		when to_date(id_end_dt, 'yyyymmdd') > localtimestamp then to_char(localtimestamp, 'yyyymmdd')
		when id_end_dt = null then to_char(localtimestamp, 'yyyymmdd')
		else id_end_dt
	end)
where
	1 = 1,'yyyymmdd')
    </delete>

    <delete id="deleteUsrUserAlloc">
        /* mng.deleteUsrUserAlloc */
        UPDATE usr_alloc
           SET end_dt = TO_CHAR(LOCALTIMESTAMP, 'YYYYMMDD')
         WHERE 1 = 1
        <if test="@Ognl@isNotEmpty(USER_IDS)">
           AND user_id IN
            <foreach item="item" collection="USER_IDS" open="(" separator="," close=")">
               #{item}
            </foreach>
        </if>
           AND end_dt = '99991231'
    </delete>

    <update id="updateUserLocale" parameterType="hashmap">
        /* mng.updateUserLocale */
        UPDATE ms_usr_lang_map SET lang_cd = #{locale} WHERE user_id = #{userId}
    </update>

    <update id="updateUserForAccess" parameterType="hashmap">
        /* mng.updateUserForAccess */
            <!-- 1. 접근제어(ACESS_YN) 해제 -->
            UPDATE usr_user
            <if test="@Ognl@isEmpty(accessYn)">
                SET ACCESS_YN = NULL
            </if>
            <if test="@Ognl@isNotEmpty(accessYn)">
                SET ACCESS_YN = 'Y'
            </if>
             WHERE user_id = #{userId};

            <!-- 2. 로그인 실패 기록 삭제 -->
            DELETE FROM mm_user_login_fail_info
             WHERE login_id = (SELECT login_id FROM usr_user WHERE user_id = #{userId});
    </update>

    <delete id="deleteUser">
        /* mng.deleteUser */
        UPDATE usr_user
           SET end_dt = TO_CHAR(LOCALTIMESTAMP, 'YYYYMMDD')
         WHERE 1 = 1
        <if test="@Ognl@isNotEmpty(loginId)">
           AND login_id = #{loginId}
        </if>
        <if test="@Ognl@isNotEmpty(USER_IDS)">
           AND user_id IN
            <foreach item="item" collection="USER_IDS" open="(" separator="," close=")">
               #{item}
            </foreach>
        </if>
           AND end_dt <![CDATA[>=]]> to_char(LOCALTIMESTAMP,'yyyymmdd')
    </delete>

	<select id="getUserList" parameterType="hashmap" resultType="encore.meta.mybatis.UpperKeyMap">
        /* mng.getUserList */
        <include refid="pagingHeader"/>
	    SELECT a.user_id
             , a.login_id
             , a.user_nm
             , a.user_num
             , a.email
             , b.up_dept_id
             , (SELECT dept_nm FROM usr_dept WHERE dept_id = b.up_dept_id) up_dept_nm
             , a.dept_id
             , b.dept_nm
             , LTRIM(RTRIM(string_agg(d.role_id, ' ' ORDER BY d.role_id))) role_id
             , LTRIM(RTRIM(string_agg(d.role_nm, ', ' ORDER BY d.role_id))) role_nm
             , coalesce(CASE WHEN LENGTH(a.id_end_dt)=8 THEN  a.id_end_dt || '000000'  ELSE a.id_end_dt END , '99991231235959') as id_end_dt
             , a.default_locale
             , max(coalesce(CASE WHEN LENGTH(a.end_dt)=8 THEN  a.end_dt || '000000'  ELSE a.end_dt END , '99991231235959')) end_dt
             , a.access_yn
             , COUNT(1) OVER () total_row_count
          FROM usr_user a
			LEFT OUTER JOIN usr_dept b ON (a.dept_id = b.dept_id)
			LEFT OUTER JOIN v_usr_alloc c ON (a.user_id = c.user_id AND '0003' = c.alloc_gbn_cd)
			LEFT OUTER JOIN usr_role d ON (c.alloc_id = d.role_id AND 'MENU' = d.role_type_cd)
         WHERE 1=1 
        <if test="@Ognl@isNotEmpty(SEARCH_LOGIN_ID)">
           AND a.login_id LIKE '%' || #{SEARCH_LOGIN_ID} || '%'
        </if>
        <if test="@Ognl@isNotEmpty(SEARCH_USER_NM)">
           AND a.user_nm LIKE '%' || #{SEARCH_USER_NM} || '%'
        </if>
        <if test="@Ognl@isNotEmpty(EXPIRED) and EXPIRED == &quot;Y&quot;">
           AND COALESCE(a.id_end_dt, '99991231') <![CDATA[<=]]> TO_CHAR(current_timestamp,'yyyymmdd')
        </if>
         GROUP BY a.login_id, a.user_id, a.user_nm, a.user_num, a.email, b.up_dept_id,
                  a.dept_id, b.dept_nm, a.id_end_dt, a.default_locale
        <if test="@Ognl@isNotEmpty(sortParams)">
            <foreach item="item" collection="sortParams" open="ORDER BY" separator=",">
                ${item.property} ${item.direction}
            </foreach>
        </if>
        <if test="@Ognl@isEmpty(sortParams)">
                 ORDER BY (CASE WHEN TO_CHAR(current_timestamp,'yyyymmdd') > substring(a.id_end_dt,0,8) THEN 1 ELSE 0 END), a.user_nm
        </if>
        <include refid="pagingFooter"/>
    </select>

	<select id="getUserInfo" parameterType="hashmap" resultType="encore.meta.mybatis.UpperKeyMap">
        /* mng.getUserInfo */
      WITH menu_role AS (SELECT a.user_id, c.role_id, c.role_nm
                             FROM usr_user a, v_usr_alloc b, usr_role c
                            WHERE a.user_id = coalesce(#{USER_ID, jdbcType=VARCHAR}, #{requestUserId})
                              AND b.user_id = a.user_id
                              AND b.alloc_gbn_cd = '0003'
                              AND c.role_id = b.alloc_id
                              AND c.role_type_cd = 'MENU'
                            GROUP BY a.user_id, c.role_id, c.role_nm)
        SELECT u.user_id
             , u.login_id
             , u.user_nm
             , u.user_num
             , u.email
             , d.up_dept_id
             , (SELECT dept_nm
                  FROM usr_dept
                 WHERE dept_id = d.up_dept_id) up_dept_nm
             , u.dept_id
             , d.dept_nm
             , TO_CHAR(TO_DATE(u.id_end_dt, 'YYYYMMDD'), 'YYYY-MM-DD') id_end_dt
             , (SELECT string_agg(role_id, ' ' ORDER BY role_id) FROM menu_role) menu_grp_id
             , coalesce(u.default_locale, (SELECT value FROM ms_config WHERE key = 'common.defaultLocale')) default_locale
             , a.start_dt absent_from
             , a.end_dt absent_to
             , a.alt_user_id
          FROM usr_user u
		LEFT OUTER JOIN usr_dept d ON (u.dept_id = d.dept_id)
		LEFT OUTER JOIN usr_user_absence a ON (u.user_id = a.user_id AND TO_CHAR(LOCALTIMESTAMP, 'YYYYMMDDHH24MISS') > a.end_dt)
		WHERE u.user_id = coalesce(#{USER_ID, jdbcType=VARCHAR}, #{requestUserId}) 
			AND u.end_dt &gt;= coalesce(#{END_DT, jdbcType=VARCHAR}, TO_CHAR(LOCALTIMESTAMP,'YYYYMMDD'))
    </select>

    <select id="getUserMenuList" parameterType="hashmap" resultType="hashmap">
        /* mng.getUserMenuList */
       	with  recursive amenu as (
			with allmenu as (
			SELECT DISTINCT menu.menu_pid
		                     , menu.menu_id
		                     , menu.menu_abbr
		                     , term.term_nm
		                     , term.term_desc
		                     , menu.order_no
		                     , menu.browse_gbn
		                     , menu.use_yn
		                     , menu.url
		                     , menu.scr_type
		                     , menu.group_yn
		                  FROM usr_user usr, v_usr_alloc allc, usr_role role, usr_menugrp grp, usr_menu menu, ms_term term
		                 WHERE 1 = 1
		                  <if test="@Ognl@isNotEmpty(userId)">
		                   AND usr.user_id = #{userId}
		                  </if>
		                  <if test="@Ognl@isEmpty(userId)">
		                   AND usr.user_id = #{requestUserId}
		                  </if>
		                   AND usr.user_id = allc.user_id
		                   AND allc.alloc_gbn_cd = '0003'
		                   AND TO_CHAR(current_timestamp, 'YYYYMMDD') BETWEEN allc.start_dt AND allc.end_dt
		                   AND allc.alloc_id = role.role_id
		                   AND role.role_id = grp.role_id
		                   AND grp.menu_id = menu.menu_id
		                   AND menu.prg_knd_cd = '0005'
		                   AND menu.use_yn = 'y'
		                   AND menu.menu_abbr = term.menu_abbr
		                   AND term.term_gbn_cd = '2001'
		                   AND term.lang_cd = #{langCd}
			)
			select menu_pid
				 , 1 AS level
				 , ARRAY[order_no] AS hierarchy
		           , menu_id
		           , menu_abbr
		           , term_nm
		           , term_desc
		           , order_no
		           , browse_gbn
		           , use_yn
		           , url
		           , scr_type
		           , group_yn 
		      from allmenu po
			 where menu_pid = 'ROOT'
			union all
			select po.menu_pid
				   , b.level + 1
				   , b.hierarchy || po.order_no 
		           , po.menu_id
		           , po.menu_abbr
		           , po.term_nm
		           , po.term_desc
		           , po.order_no
		           , po.browse_gbn
		           , po.use_yn
		           , po.url
		           , po.scr_type
		           , po.group_yn 
		     from allmenu po
			 join amenu b
			   on b.menu_id = po.menu_pid
		)
		select level "lvl"
		     , menu_pid "pid"
		     , menu_id  "id"
		     , menu_abbr "abbr"
		     , term_nm  "text"
		     , term_desc "description"
		     , order_no "orderNo"
		     , browse_gbn "browseGbn"
		     , use_yn "useYn"
		     , url "url"
		     , scr_type "scrType"
		     , group_yn "groupYn"
		     , CASE WHEN not exists (select 1 from amenu p where e.menu_id = p.menu_pid) THEN 'true' ELSE 'false' END "isLeaf" 
		from amenu e
		order by hierarchy
        <!--
        SELECT menus.menu_pid AS "pid"
              ,menus.menu_id AS "id"
              ,menus.menu_abbr AS "abbr"
              ,level as "lvl"
              ,term.term_nm AS "nm"
              ,term.term_nm AS "text"
              ,term.term_desc AS "description"
              ,menus.order_no AS "orderNo"
              ,menu.browse_gbn AS "browseGbn"
              ,menu.use_yn AS "useYn"
              ,menu.url AS "url"
              ,menu.scr_type AS "scrType"
              ,menu.group_yn AS "groupYn"
              ,CONNECT_BY_ISLEAF AS "isLeaf"
          FROM (SELECT DISTINCT menu.menu_pid
                      ,menu.menu_id
                      ,menu.menu_abbr
                      ,menu.order_no
                  FROM usr_user usr
                 INNER JOIN usr_alloc allc
                    ON allc.user_id = usr.user_id
                   AND allc.alloc_gbn_cd = '0003'
                   AND TO_CHAR(SYSDATE, 'YYYYMMDD') BETWEEN allc.start_dt AND allc.end_dt
                   AND usr.user_id = #{userId}
                 INNER JOIN usr_role role
                    ON role.role_id = allc.alloc_id
                 INNER JOIN usr_menugrp grp
                    ON grp.role_id = role.role_id
                 INNER JOIN usr_menu menu
                    ON menu.menu_id = grp.menu_id
                   AND menu.prg_knd_cd = '0005'
                   AND use_yn = 'y') menus
          LEFT OUTER JOIN usr_menu menu
            ON menu.menu_id = menus.menu_id
          LEFT OUTER JOIN ms_term term
            ON term.menu_abbr = menu.menu_abbr
           AND term.lang_cd = #{langCd}
         START WITH menus.menu_pid = 'ROOT'
       CONNECT BY PRIOR menus.menu_id = menus.menu_pid
         ORDER SIBLINGS BY menus.order_no
        -->
    </select>

	<select id="getMenuList" resultType="encore.meta.mybatis.UpperKeyMap">
     /* mng.getMenuList */
        SELECT *
          FROM (WITH RECURSIVE cte AS (
          		with alias0 as (
          		 SELECT a.menu_pid
                              ,a.menu_id
                              ,a.menu_abbr
                              ,b.term_nm AS menu_nm
                              ,b.term_desc AS menu_desc
                              ,a.order_no
                              ,a.use_yn
                          FROM usr_menu a
                              ,ms_term b
                         WHERE a.menu_abbr = b.menu_abbr
                           AND a.prg_knd_cd = '0005'
                           AND b.lang_cd = #{langCd}
          		)
				SELECT 1 AS lvl
					 , menu_pid
					 ,menu_id
					 ,menu_nm
					 ,menu_abbr
					 ,menu_desc
					 ,order_no
					 ,use_yn
					 ,'null' "checkedColumn"
					 ,ARRAY[ row_number() OVER (ORDER BY  order_no) ] as hierarchy
                  FROM  alias0 WHERE menu_pid = 'ROOT'
  				UNION ALL
				SELECT (c.lvl+1) AS lvl
					,a.menu_pid
					,a.menu_id
					,a.menu_nm
					,a.menu_abbr
					,a.menu_desc
					,a.order_no
					,a.use_yn
					,'null' "checkedColumn"
					,array_append(c.hierarchy, row_number() OVER (ORDER BY  a.order_no))  as hierarchy
                  FROM alias0 a JOIN cte c ON (c.menu_id = a.menu_pid)
		) SELECT c.*
				, not exists (select 1 from cte p where c.menu_id = p.menu_pid) leaf
			FROM cte c ORDER BY hierarchy
		) alias1
         WHERE 1 = 1
        <if test="@Ognl@isNotEmpty(node) and @Ognl@isEmpty(lvl)">
            <choose>
                <when test="node == &quot;root&quot;">
                    AND menu_pid = 'ROOT'
                </when>
                <otherwise>
                    AND menu_pid = #{node}
                </otherwise>
            </choose>
        </if>
        <if test="@Ognl@isNotEmpty(menuPid)">
            AND menu_pid = #{menuPid}
        </if>
        <if test="@Ognl@isNotEmpty(abbr)">
            AND menu_abbr LIKE #{abbr} || '%'
        </if>
        <if test="@Ognl@isNotEmpty(lvl)">
            AND lvl = #{lvl}::int
        </if>
        <if test="@Ognl@isNotEmpty(menuNm)">
            AND menu_nm LIKE '%' || #{menuNm} || '%'
        </if>
    </select>

	<select id="getMenuTree" parameterType="hashmap" resultType="map">
     /* mng.getMenuTree */
        SELECT DISTINCT *
        	 --, ARRAY[ row_number() OVER (ORDER BY  order_no) ] as hierarchy
          FROM (WITH RECURSIVE cte AS (
          		with alias1 as (SELECT a.menu_pid
                             , a.menu_id
                             , a.menu_abbr
                             , b.term_nm menu_nm
                             , b.term_desc menu_desc
                             , a.order_no
                             , a.use_yn
                          FROM usr_menu a, ms_term b
                         WHERE a.menu_abbr = b.menu_abbr
                           AND a.prg_knd_cd = '0005'
                           AND b.lang_cd = #{langCd})
				SELECT 1 AS lvl,menu_pid,menu_id,menu_nm,menu_abbr,menu_desc,order_no,use_yn,'null' "checkedColumn"
					--,CASE  WHEN CONNECT_BY_ISLEAF =  1 THEN  'true' ELSE  'false' END  leaf
					,cast(menu_nm as text) ids
					,ARRAY[ row_number() OVER (ORDER BY  order_no) ] as hierarchy
                  FROM  alias1 WHERE menu_pid = 'ROOT'
		  		UNION ALL
				SELECT (c.lvl+1) AS lvl,a.menu_pid,a.menu_id,a.menu_nm,a.menu_abbr,a.menu_desc,a.order_no,a.use_yn,'null' "checkedColumn"
					--,CASE  WHEN CONNECT_BY_ISLEAF =  1 THEN  'true' ELSE  'false' END  leaf
					,c.ids || '^^^' || a.menu_nm
					, array_append(c.hierarchy, row_number() OVER (ORDER BY  a.order_no))  as hierarchy
                  FROM alias1 a JOIN cte c ON (c.menu_id = a.menu_pid)
			) SELECT c.lvl       as "LVL"
				   , c.menu_pid  as "MENU_PID"
				   , c.menu_id   as "MENU_ID"
				   , c.menu_nm   as "MENU_NM"
				   , c.menu_abbr as "MENU_ABBR"
				   , c.menu_desc as "MENU_DESC"
				   , c.order_no  as "ORDER_NO"
				   , c.use_yn    as "USE_YN"
				   , c."checkedColumn"
				   , c.ids		 as "IDS"
				   , c.hierarchy
				   --, replace(c.ids, '^^^', '>') ids
				   , case when not exists (select 1 from cte p where c.menu_id = p.menu_pid) then 'true' else 'false' end as "LEAF"
				FROM cte c ORDER BY hierarchy
		) zz
        <if test="@Ognl@isNotEmpty(menuNm)">
         WHERE UPPER( "IDS" ) LIKE '%' || UPPER( #{menuNm} ) || '%'
        </if>
         ORDER BY hierarchy
    </select>

	<select id="getMenuMaxOrderNo" parameterType="hashmap" resultType="encore.meta.mybatis.UpperKeyMap">
      	SELECT /* mng.getMenuMaxOrderNo */
		 coalesce(MAX(order_no), 0) + 1 AS order_max_no
		FROM (
		
			WITH RECURSIVE cte AS (
			SELECT 1 AS lvl,menu_id,menu_pid,order_no,ARRAY[ row_number() OVER (ORDER BY  order_no) ] as hierarchy
			      FROM usr_menu WHERE menu_pid = 'ROOT'
			   AND prg_knd_cd = '0005'
			  UNION ALL
			SELECT (c.lvl+1) AS lvl,d.menu_id,d.menu_pid,d.order_no, array_append(c.hierarchy, row_number() OVER (ORDER BY  d.order_no))  as hierarchy
			      FROM usr_menu d 
			      JOIN cte c 
			        ON (c.menu_id = d.menu_pid AND d.prg_knd_cd = '0005')
			) SELECT * FROM cte ORDER BY hierarchy
			
		) a
		WHERE a.lvl = #{lvl}
		   AND a.menu_pid = #{menuPid}
    </select>

    <insert id="insertMenu" parameterType="hashmap">
        INSERT INTO /* mng.insertMenu */ usr_menu
            (menu_id, menu_abbr, menu_nm, prg_knd_cd, menu_pid, menu_desc, order_no, use_yn)
        VALUES (#{menuId}, #{menuAbbr}, #{menuNm}, '0005', #{menuPid}, #{menuDesc, jdbcType=VARCHAR}, #{orderNo}, #{useYn})
    </insert>

    <select id="getMenuLangDataCnt" parameterType="hashmap" resultType="int">
        /* mng.getMenuLangDataCnt */
        SELECT COUNT(*) cnt FROM ms_term WHERE LANG_CD = #{localeCd} AND menu_abbr = #{menuAbbr}
    </select>

	<select id="getMenuLangData" parameterType="hashmap" resultType="encore.meta.mybatis.UpperKeyMap">
        /* mng.getMenuLangData */
        SELECT * FROM ms_term WHERE menu_abbr = #{menuAbbr}
    </select>

	<select id="getTermIdData" parameterType="hashmap" resultType="encore.meta.mybatis.UpperKeyMap">
        /* mng.getTermIdData */
		select
			a.lang_cd ,
			b.term_nm label_nm ,
			b.term_desc label_desc
		from 
			ms_locale a
		left outer join ms_term b on
			(a.lang_cd = b.lang_cd
			and :LABEL_ID /*#{LABEL_ID}*/ = b.term_id)
		group by a.lang_cd, b.term_nm, b.term_desc
		order by case when a.lang_cd = 'ko' then 1 else null end , lang_cd
    </select>

    <select id="getAnotherMenuLangGuid" parameterType="hashmap" resultType="string">
        /* mng.getAnotherMenuLangGuid */
        SELECT DISTINCT term_id FROM ms_term WHERE menu_abbr = #{MENU_ABBR} AND term_gbn_cd = #{TERM_GBN_CD}
    </select>

    <insert id="insertMsTermForLocale" parameterType="hashmap">
        /* mng.insertMsTermForLocale */
        INSERT INTO ms_term
            (lang_cd, term_id, term_nm, term_desc, term_gbn_cd, menu_abbr)
        VALUES
            (#{LANG_CD}, #{TERM_ID}, #{TERM_NM}, #{TERM_DESC, jdbcType=VARCHAR}, ${TERM_GBN_CD}, #{MENU_ABBR})
    </insert>

    <update id="updateMenuLangData" parameterType="hashmap">
        /* mng.updateMenuLangData */
        UPDATE ms_term
           SET term_nm = #{TERM_NM}
              ,term_desc = #{TERM_DESC, jdbcType=VARCHAR}
         WHERE term_id = #{TERM_ID, jdbcType=VARCHAR}
           AND lang_cd = #{LANG_CD}
    </update>

    <delete id="deleteMenuLangData" parameterType="hashmap">
        DELETE /* mng.deleteMenuLangData */ FROM ms_term WHERE term_id = #{termId} AND lang_cd = #{localeCd}
    </delete>

	<select id="getMenuAbbrCnt" parameterType="hashmap" resultType="encore.meta.mybatis.UpperKeyMap">
        SELECT /* mng.getMenuAbbrCnt */ COUNT(*) AS cnt FROM usr_menu WHERE menu_abbr = #{menuAbbr}
    </select>

    <update id="updateMenuOrderNoBeforeInsert" parameterType="hashmap">
        UPDATE /* mng.updateMenuOrderNoBeforeInsert */ usr_menu
           SET order_no = order_no + 1
         WHERE menu_pid = #{menuPid}
           AND prg_knd_cd = '0005'
           AND order_no &gt;= #{orderNo}
    </update>

    <update id="updateMenuOrderNoAfterUpdate" parameterType="hashmap">
        UPDATE /* mng.updateMenuOrderNoAfterUpdate */ usr_menu
           SET order_no = order_no + (${number})
         WHERE menu_pid = #{MENU_PID}
           AND menu_id != #{MENU_ID}
           AND prg_knd_cd = '0005'
           AND ${condition}
    </update>

    <update id="updateMenu" parameterType="hashmap">
        UPDATE /* mng.updateMenu */ usr_menu
           SET menu_nm = #{menuNm}
              ,order_no = #{orderNo}
              ,menu_abbr = #{menuAbbr}
              ,menu_desc = #{menuDesc, jdbcType=VARCHAR}
              ,menu_pid = #{menuPid}
              ,use_yn = #{useYn}
         WHERE menu_id = #{menuId}
    </update>

    <delete id="deleteMenu" parameterType="hashmap">
       DELETE FROM /* mng.deleteMenu */ usr_menu
         WHERE menu_id IN (with recursive cte as (
							 SELECT a.* FROM usr_menu a
                              where menu_pid = #{menuPid}
                                AND menu_id = #{menuId}
                                AND prg_knd_cd = '0005'
                             union all
                             SELECT a.* FROM usr_menu a
                               join cte c 
                                 on c.menu_id = a.menu_pid
								AND a.prg_knd_cd = '0005'
							) select menu_id from cte	)
		
    </delete>

    <delete id="deleteMenuLangList" parameterType="hashmap">
        DELETE FROM /* mng.deleteMenuLangList */ ms_term
	    WHERE menu_abbr IN (with recursive cte as (
								 SELECT a.* FROM usr_menu a
	                              where menu_pid = :menuPid/*#{menuPid}*/
	                                AND menu_id = :menuId/*#{menuId}*/
	                                AND prg_knd_cd = '0005'
	                             union all
	                             SELECT a.* FROM usr_menu a
	                               join cte c 
	                                 on c.menu_id = a.menu_pid
									AND a.prg_knd_cd = '0005'
								) select menu_abbr from cte	)
    </delete>

    <update id="updateMenuOrderNoAfterDelete" parameterType="hashmap">
        UPDATE /* mng.updateMenuOrderNoAfterDelete */ usr_menu
           SET order_no = order_no - 1
         WHERE menu_pid = #{menuPid}
           AND prg_knd_cd = '0005'
           AND order_no &gt; #{orderNo}
    </update>

	<select id="getRoleList" parameterType="hashmap" resultType="encore.meta.mybatis.UpperKeyMap">
        /* mng.getRoleList */
        SELECT role_id
             , role_nm
             , role_desc
          FROM usr_role
         WHERE 1 = 1
        <if test="@Ognl@isNotEmpty(roleNm)">
           AND role_nm = #{roleNm}
        </if>
        <if test="@Ognl@isNotEmpty(roleId)">
           AND role_id = #{roleId}
        </if>
        <if test="@Ognl@isNotEmpty(ROLE_TYPE_CD)">
           AND role_type_cd = #{ROLE_TYPE_CD}
        </if>
         ORDER BY role_nm
    </select>

    <!-- 역할 등록시 중복체크 -->
    <select id="getRoleDupChk" parameterType="hashmap" resultType="hashmap">
        /* mng.getRoleDupChk */
        SELECT role_id
             , role_nm
             , role_desc
          FROM usr_role
         WHERE 1 = 1
           AND role_nm = #{roleNm}
           <if test="@Ognl@isNotEmpty(mode) and mode eq 'update'">
           AND role_id != #{roleId}
           </if>
    </select>

    <insert id="insertRole" parameterType="hashmap">
     
        <selectKey keyProperty="roleId" resultType="string" order="BEFORE">
            <choose>
                <when test="@Ognl@isEmpty(roleId)">
                    select uuid_generate_v4()::text
                </when>
                <otherwise>
                    SELECT #{roleId} 
                </otherwise>
            </choose>
        </selectKey>
        INSERT INTO /* mng.insertRole */ usr_role (role_id, role_nm, role_type_cd, role_desc)
        VALUES (#{roleId}, #{roleNm}, #{roleTypeCd}, #{roleDesc})
    </insert>

    <update id="updateRole" parameterType="hashmap">
        UPDATE /* mng.updateRole */ usr_role
           SET role_nm = #{roleNm}
              ,role_desc = #{roleDesc}
         WHERE role_id = #{roleId}
    </update>

    <delete id="deleteRole" parameterType="hashmap">
        DELETE FROM /* mng.deleteRole */ usr_role
         WHERE role_id = #{roleId}
    </delete>

	<select id="getRoleUserList" parameterType="hashmap" resultType="encore.meta.mybatis.UpperKeyMap">
        /* mng.getRoleUserList */
        <include refid="pagingHeader"/>
		SELECT x.*
             , COUNT(1) OVER () AS total_row_count
          FROM (SELECT DISTINCT a.user_id
                      ,a.user_nm
                      ,a.login_id
                      ,(SELECT dept_nm FROM usr_dept WHERE dept_id = a.dept_id) dept_nm
                      ,a.post
                      ,charge_gubun
                      ,b.src
                  FROM usr_user a, v_usr_alloc b, usr_role c
                 WHERE coalesce(a.id_end_dt, '99991231') >= to_char(LOCALTIMESTAMP,'yyyymmdd')
                   AND b.user_id = a.user_id
                   AND b.alloc_gbn_cd = '0003'
                   AND b.biz_id = 'NONE'
                   AND b.end_dt = '99991231'
                   AND c.role_id = b.alloc_id
                   AND c.role_id = :roleId/*#{roleId}*/
               ) x
         ORDER BY user_nm
        <include refid="pagingFooter"/>
    </select>

    <insert id="insertRoleUser" parameterType="hashmap">
        /* mng.insertRoleUser */
	 INSERT INTO usr_alloc(user_id, alloc_gbn_cd, alloc_id, dept_id, start_dt, end_dt, biz_id)
        SELECT #{userId}, '0003', #{allocId}, #{deptId}, TO_CHAR(LOCALTIMESTAMP,'YYYYMMDD'), '99991231', #{bizId, jdbcType=VARCHAR}
         WHERE NOT EXISTS (SELECT ''
                             FROM v_usr_alloc b
                            WHERE b.user_id = #{userId}
                              AND b.biz_id = #{bizId}
                              AND b.alloc_id = #{allocId})
    </insert>

    <update id="deleteRoleUser" parameterType="hashmap">
        /* mng.deleteRoleUser */
        DELETE FROM usr_alloc
         WHERE 1 = 1
        <if test="@Ognl@isNotEmpty(userId)">
            AND user_id = #{userId}
        </if>
           AND alloc_id = #{allocId}
           AND alloc_gbn_cd = #{allocGbnCd}
        <if test="@Ognl@isNotEmpty(bizId)">
            AND biz_id = #{bizId}
        </if>
    </update>

	<select id="getRoleMenuList" parameterType="hashmap" resultType="encore.meta.mybatis.UpperKeyMap">
		with recursive cte as (
			select
				1 as lvl,
				a.menu_pid,
				a.menu_id,
				c.term_nm menu_nm,
				a.order_no,
				c.term_desc menu_desc,
				array[ row_number() over (
				order by a.order_no) ] as hierarchy
			from
				usr_menu a
			left outer join usr_menugrp b on
				a.menu_id = b.menu_id
			join ms_term c on
				a.menu_abbr = c.menu_abbr
			where
				a.menu_pid = 'ROOT'
				and a.prg_knd_cd = '0005'
		union all
			select
				(c1.lvl + 1) as lvl,
				a.menu_pid,
				a.menu_id,
				c.term_nm menu_nm,
				a.order_no,
				c.term_desc menu_desc,
				array_append(c1.hierarchy, row_number() over (order by a.order_no)) as hierarchy
			from
				usr_menu a
			left outer join usr_menugrp b on
				a.menu_id = b.menu_id
			join ms_term c on
				a.menu_abbr = c.menu_abbr
				join cte c1 on (c1.menu_id = a.menu_pid	
								and	role_id = #{roleId}
								and lang_cd = #{langCd}
								and a.prg_knd_cd = '0005'
							)
		) select * from cte order by hierarchy

    </select>

	<select id="getRoleMenuTree" parameterType="hashmap" resultType="encore.meta.mybatis.UpperKeyMap">
      	/* mng.getRoleMenuTree */
		WITH RECURSIVE cte AS (
			with wc as (SELECT a.menu_pid
	                              ,a.menu_id
	                              ,a.menu_abbr
	                              ,b.term_nm AS menu_nm
	                              ,b.term_desc AS menu_desc
	                              ,a.order_no
	                              ,a.use_yn
	                          FROM usr_menu a
	                              ,ms_term b
	                         WHERE a.menu_abbr = b.menu_abbr
	                           AND UPPER(a.use_yn) = 'Y'
	                           AND a.prg_knd_cd = '0005'
	                           AND b.lang_cd = #{langCd})
	        	SELECT 1 AS lvl,wc.menu_pid,wc.menu_id,wc.menu_nm,wc.menu_abbr,wc.menu_desc,wc.order_no,wc.use_yn
				--,CASE  WHEN CONNECT_BY_ISLEAF =  1 THEN  'true' ELSE  'false' END  leaf
				,ARRAY[ row_number() OVER (ORDER BY  order_no) ] as hierarchy
	                  FROM  wc WHERE menu_pid = 'ROOT'
	  			UNION ALL
	        	SELECT (p.lvl+1) AS lvl,wc.menu_pid,wc.menu_id,wc.menu_nm,wc.menu_abbr,wc.menu_desc,wc.order_no,wc.use_yn
					--,CASE  WHEN CONNECT_BY_ISLEAF =  1 THEN  'true' ELSE  'false' END  leaf
					, array_append(p.hierarchy, row_number() OVER (ORDER BY  wc.order_no))  as hierarchy
	                  FROM wc JOIN cte p ON (p.menu_id = wc.menu_pid)
	
		) SELECT c.*
				, not exists (select 1 from cte p where c.menu_id = p.menu_pid) leaf
		<if test="@Ognl@isNotEmpty(roleId)">
		          ,(CASE
		             WHEN (SELECT COUNT(*)
		                     FROM usr_menugrp
		                    WHERE role_id = #{roleId}
		                      AND c.menu_id = menu_id) = 0
		             THEN 'false'
		             ELSE 'true'
		            END) "checkedColumn"
		</if>
			FROM cte c ORDER BY hierarchy
    </select>

	<select id="getUpMenuList" parameterType="hashmap" resultType="encore.meta.mybatis.UpperKeyMap">
	WITH RECURSIVE cte AS (
	        SELECT DISTINCT 1 as lvl,a.menu_pid,a.menu_id,a.menu_nm,a.order_no,a.menu_desc
	        	,ARRAY[ row_number() OVER (ORDER BY  a.order_no) ] as hierarchy
	          FROM usr_menu a
	          WHERE a.menu_id = #{menuPid}
	           AND a.prg_knd_cd = '0005'
	  		UNION ALL
	        SELECT DISTINCT (c.lvl+1) as lvl,a.menu_pid,a.menu_id,a.menu_nm,a.order_no,a.menu_desc
	        	, array_append(c.hierarchy, row_number() OVER (ORDER BY  a.order_no))  as hierarchy
	          FROM usr_menu a
	          JOIN cte c ON (c.menu_pid = a.menu_id AND a.prg_knd_cd = '0005')
		) SELECT * FROM cte WHERE 1=1 ORDER BY hierarchy
    </select>

	<select id="getSubMenuList" parameterType="hashmap" resultType="encore.meta.mybatis.UpperKeyMap">
        WITH RECURSIVE cte AS (
	        SELECT DISTINCT 1 as lvl,a.menu_pid,a.menu_id,a.menu_nm,a.order_no,a.menu_desc
	        	,ARRAY[ row_number() OVER (ORDER BY  a.order_no) ] as hierarchy
	          FROM usr_menu a
	          WHERE a.menu_id = #{menuPid}
	           AND a.prg_knd_cd = '0005'
	  		UNION ALL
	        SELECT DISTINCT (c.lvl+1) as lvl,a.menu_pid,a.menu_id,a.menu_nm,a.order_no,a.menu_desc
	        	, array_append(c.hierarchy, row_number() OVER (ORDER BY  a.order_no))  as hierarchy
	          FROM usr_menu a
	          JOIN cte c ON (c.menu_pid = a.menu_id AND a.prg_knd_cd = '0005')
		) SELECT * FROM cte WHERE 1=1 ORDER BY hierarchy
    </select>

    <insert id="insertRoleMenu" parameterType="hashmap">
      /* mng.insertRoleMenu */
 	  INSERT INTO usr_menugrp(role_id, menu_id, mapp_gbn_cd, start_dt, end_dt, rw_priv)
        SELECT #{roleId}, #{menuId}, #{mappGbnCd}, LOCALTIMESTAMP , TO_DATE('99991231235959','YYYYMMDDHH24MISS'), #{rwPriv}
         WHERE NOT EXISTS (SELECT ''
                             FROM usr_menugrp b
                            WHERE b.role_id = #{roleId}
                              AND b.menu_id = #{menuId}
                              AND b.mapp_gbn_cd = #{mappGbnCd}
                              AND b.rw_priv = #{rwPriv})
    </insert>

    <delete id="deleteRoleMenu" parameterType="hashmap">
        /* mng.deleteRoleMenu */
        DELETE FROM usr_menugrp
         WHERE role_id = #{roleId}
        <if test="@Ognl@isNotEmpty(menuId)">
            AND menu_id = #{menuId}
        </if>
           AND mapp_gbn_cd = #{mappGbnCd}
    </delete>

    <!--deprecated
    <select id="getBoardListCount" parameterType="hashmap" resultType="integer">
		select /* mng.getBoardListCount */
			count(*)
		from
			mm_notice a
		left outer join usr_user b on
			(a.createuserid = b.user_id)
		left outer join mm_notice_file c on
			(a.noticeid = c.noticeid)
		where
			a.noticetype = :noticeType /*#{noticeType}*/

        <if test="@Ognl@isNotEmpty(searchKey) and @Ognl@isNotEmpty(searchValue)">
            AND a.${searchKey} LIKE '%' || #{searchValue} || '%'
        </if>
           AND a.deleteyn = 'N'
    </select>
    -->

    <!--deprecated
    <select id="getBoardList" parameterType="hashmap" resultType="encore.meta.mybatis.UpperKeyMap">
        SELECT /* mng.getBoardList */ *
          FROM (SELECT row_number() over() rnum
                      ,z.*
                  FROM (SELECT noticepid,
                               noticeid,
                               substring(IDS, 2, 10) notice_grp,
                               Title,
                               lvl,
                               noticetxt,
                               createdate,
                               createtime,
                               user_id,
                               user_nm,
                               file_yn,
                               file_id,
                               file_name,
                               file_size
                          FROM (SELECT /*+ ordered index_asc(a mm_notice_pk) */
                                       a.noticepid
                                      ,a.noticeid
                                      ,SYS_CONNECT_BY_PATH(A.noticeid, '/') ids
                                      ,(LEVEL - 1) * 20 lvl
                                      ,a.title
                                      ,a.noticetxt
                                      ,TO_CHAR(a.createdate, 'yyyy-mm-dd') AS createdate
                                      ,TO_CHAR(a.createdate, 'yyyy-mm-dd hh24:mi:ss') AS createtime
                                      ,b.user_id
                                      ,b.user_nm
                                      ,DECODE(c.file_id, NULL, 'n', 'y') AS file_yn
                                      ,c.file_id
                                      ,c.file_name
                                      ,c.file_size
                                  FROM mm_notice a, usr_user b, mm_notice_file c
                                 WHERE a.noticetype = #{noticeType}
                                   AND a.createuserid = b.user_id(+)
                                   AND a.noticeid = c.noticeid(+)
                <if test="@Ognl@isNotEmpty(searchKey) and @Ognl@isNotEmpty(searchValue)">
                                   AND a.${searchKey} LIKE '%' || #{searchValue} || '%'
                </if>
                <if test="@Ognl@isEmpty(searchKey) and @Ognl@isNotEmpty(searchValue)">
                                   AND (a.noticetxt LIKE '%'||#{searchValue}||'%' OR a.title LIKE '%'||#{searchValue}||'%')
                </if>
                                   AND a.deleteyn = 'N'
                                 START WITH a.noticepid IS NULL
                               CONNECT BY PRIOR a.noticeid = a.noticepid) B
                         START WITH B.noticepid IS NULL
                       CONNECT BY PRIOR B.noticeid = B.noticepid
                         ORDER SIBLINGS BY NOTICE_GRP DESC, B.NOTICEID) z
                 WHERE 1=1 LIMIT  (${limit} * ${page})
              )
         WHERE rnum &gt;= ${limit} * (${page} - 1) + 1
    </select>
    -->

    <!--deprecated
    <update id="deleteBoard" parameterType="hashmap">
        UPDATE /* mng.deleteBoard */ mm_notice
           SET deleteyn = 'Y'
         WHERE noticeid = #{noticeId}
    </update>
    -->

    <!--deprecated
    <delete id="deleteBoardFile" parameterType="hashmap">
        /* mng.deleteBoardFile */
        {CALL
            DECLARE
            BEGIN
                DELETE mm_notice_file WHERE noticeid = #{noticeId};
                DELETE msg_attach WHERE attach_id = #{noticeId};
            END
        }
    </delete>
    -->

    <!--deprecated
    <insert id="insertBoard" parameterType="hashmap">
        <selectKey keyProperty="NEW_BOARD_ID" resultType="string" order="BEFORE">
            SELECT /* mng.insertBoard */ LPAD(NOTICE_ID_SEQ.nextval, 10, '0') FROM dual
        </selectKey>
        INSERT INTO mm_notice (noticetype, title, noticetxt, createdate, querycnt, deleteyn, createuserid, noticeid, noticepid)
        VALUES (#{noticeType}, #{title}, #{noticeTxt}, SYSDATE, 0, 'N', #{requestUserId}, #{NEW_BOARD_ID}, #{noticePid,jdbcType=VARCHAR})
    </insert>
    -->

    <!--deprecated
    <update id="updateBoard" parameterType="hashmap">
        UPDATE /* mng.updateBoard */ mm_notice
           SET title = #{title}
              ,noticetxt = #{noticeTxt}
         WHERE noticeid = #{noticeId}
    </update>
    -->

    <!--deprecated
    <insert id="insertBoardFile" parameterType="hashmap">
        INSERT INTO /* mng.insertBoardFile */ mm_notice_file (file_id, file_name, file_size, noticetype, noticeid, file_content)
        VALUES (#{fileId}, #{fileName}, #{fileSize}, #{noticeType}, #{noticeId}, #{fileContent,jdbcType=BLOB})
    </insert>
    -->

    <!--deprecated
    <select id="getBoardAttachFile" parameterType="hashmap" resultType="encore.meta.mybatis.UpperKeyMap">
        SELECT /* mng.getBoardAttachFile */ file_name
              ,file_size
              ,file_content
          FROM mm_notice_file
         WHERE noticeid = #{noticeId}
    </select>
    -->

	<select id="getServerList" resultType="encore.meta.mybatis.UpperKeyMap">
	   select /* mng.getServerList */	a.svr_id ,	a.svr_nm , b.ip ,b.ip_desc ,
			a.cpu_cnt ,	a.cpu_spec , a.mem_size ,a.svr_desc
		from  md_svr a
		left outer join md_svr_ip b on (a.svr_id = b.svr_id and 'Y' = b.main_yn)
		order by a.svr_nm
    </select>

	<select id="getServerIpList" parameterType="hashmap" resultType="encore.meta.mybatis.UpperKeyMap">
        SELECT /* mng.getServerIpList */ svr_id
              ,seq
              ,ip
              ,ip_desc
              ,main_yn
              ,TO_CHAR(creat_dt, 'YYYY-MM-DD HH24:MI:SS') creat_dt
              ,TO_CHAR(last_alter_dt, 'YYYY-MM-DD HH24:MI:SS') last_alter_dt
          FROM md_svr_ip
         WHERE svr_id = #{svrId}
         ORDER BY main_yn desc, ip
    </select>

    <insert id="insertServer" parameterType="hashmap">
        <selectKey keyProperty="svrId" resultType="string" order="BEFORE">
            SELECT /*+ index_desc(a md_svr_pk) */ LPAD(COALESCE(TO_NUMBER(MAX(svr_id)), 0) + 1, 4, '0') max_svr_id FROM md_svr
        </selectKey>
        INSERT ALL /* mng.insertServer */
          INTO md_svr ( svr_id, svr_nm, cpu_cnt, cpu_spec, mem_size, svr_desc,
                        creat_dt, creat_user_id, last_alter_dt, last_alter_user_id )
        VALUES ( svr_id, svr_nm, cpu_cnt, cpu_spec, mem_size, svr_desc,
                 creat_dt, creat_user_id, last_alter_dt, last_alter_user_id )
          INTO md_svr_ip ( svr_id, seq, ip, ip_desc, main_yn, creat_dt, creat_user_id, last_alter_dt, last_alter_user_id )
        VALUES ( svr_id, seq, ip, ip_desc, 'Y', creat_dt, creat_user_id, last_alter_dt, last_alter_user_id )
        SELECT #{svrId} svr_id
              ,#{svrNm} svr_nm
        <if test="@Ognl@isNotEmpty(cpuCnt)">
              ,#{cpuCnt} cpu_cnt
        </if>
        <if test="@Ognl@isNotEmpty(cpuSpec)">
              ,#{cpuSpec} cpu_spec
        </if>
        <if test="@Ognl@isNotEmpty(memSize)">
              ,#{memSize} mem_size
        </if>
              ,#{svrDesc} svr_desc
              ,current_timestamp creat_dt
              ,#{requestUserId} creat_user_id
              ,current_timestamp last_alter_dt
              ,#{requestUserId} last_alter_user_id
              ,1 seq
              ,#{ip} ip
              ,#{ipDesc} ip_desc
          LIMIT 1
    </insert>

    <update id="updateServer" parameterType="hashmap">
        UPDATE /* mng.updateServer */ md_svr
           SET svr_nm = #{svrNm}
              ,cpu_cnt = #{cpuCnt}
              ,cpu_spec = #{cpuSpec}
              ,mem_size = #{memSize}
              ,svr_desc = #{svrDesc}
              ,last_alter_dt = localtimestamp
              ,last_alter_user_id = #{requestUserId}
         WHERE svr_id = #{svrId}
    </update>

    <delete id="deleteServer" parameterType="hashmap">
        DELETE FROM /* mng.deleteServer */ md_svr WHERE svr_id = #{svrId}
    </delete>

    <update id="updateServerMainIp" parameterType="hashmap">
        UPDATE /* mng.updateServerMainIp */ md_svr_ip SET main_yn = 'N' WHERE svr_id = #{svrId}
    </update>

    <insert id="insertServerIp" parameterType="hashmap">
         <selectKey keyProperty="NEW_IP_SEQ" resultType="string">
            SELECT /*+ index_desc(a md_svr_ip_pk) */ COALESCE(MAX(seq), 0) + 1 FROM md_svr_ip WHERE svr_id = #{svrId}
        </selectKey>
        INSERT INTO /* mng.insertServerIp */ md_svr_ip ( svr_id, seq, ip, ip_desc, main_yn, creat_dt, creat_user_id, last_alter_dt, last_alter_user_id )
             VALUES ( #{svrId}, #{NEW_IP_SEQ}, #{ip}, #{ipDesc}, #{mainYn}, current_timestamp, #{requestUserId}, current_timestamp, #{requestUserId} )
    </insert>

    <update id="updateServerIp" parameterType="hashmap">
        UPDATE /* mng.updateServerIp */ md_svr_ip
           SET ip = #{ip}
              ,ip_desc = #{ipDesc}
              ,main_yn = #{mainYn}
              ,last_alter_dt = LOCALTIMESTAMP
              ,last_alter_user_id = #{requestUserId}
         WHERE svr_id = #{svrId}
           AND seq = #{seq}
    </update>

    <delete id="deleteServerIp" parameterType="hashmap">
        DELETE FROM /* mng.deleteServerIp */ md_svr_ip
         WHERE svr_id = #{svrId}
             <if test="seq != null and seq != ''">
               AND seq = #{seq}
             </if>
    </delete>

	<select id="getInstanceList" resultType="encore.meta.mybatis.UpperKeyMap">
        /* mng.getInstanceList */
        SELECT a.svr_id
              ,b.inst_id, c.db_id, a.svr_nm, b.inst_nm, b.sys_id, b.inst_os_acct_nm
              ,b.dflt_home_path, b.lsnc_desc, a.mjr_use_cd ,b.db_type, b.comp_type, b.biz_area, b.biz_area_sub
              ,b.sub_mngr_id, b.mjr_mngr_id, b.meta_conn_acct_id
              ,REPLACE(REPLACE(meta_crypt.decrypt(b.meta_conn_acct_pwd, 'encore5868' ), CHR(0)), CHR(1)) meta_conn_acct_pwd
              ,(SELECT user_nm FROM usr_user WHERE user_id = sub_mngr_id) sub_mngr_nm
              ,(SELECT user_nm FROM usr_user WHERE user_id = mjr_mngr_id) mjr_mngr_nm
              ,(SELECT SUM(tot_alloc_amt)
                  FROM md_ts_stg_dtl
                 WHERE svr_id = c.svr_id
                   AND inst_id = c.inst_id
                   AND db_id = c.db_id AND aval_end_dt = '99999999999999') tot_alloc_amt
              ,(SELECT SUM(tot_use_amt)
                  FROM md_ts_stg_dtl
                 WHERE svr_id = c.svr_id
                   AND inst_id = c.inst_id
                   AND db_id = c.db_id
                   AND aval_end_dt = '99999999999999') tot_use_amt
         FROM md_svr a
             ,md_inst b
             ,md_db c
        WHERE a.svr_id = b.svr_id
          AND B.DB_TYPE = '0001'
          AND b.svr_id = c.svr_id(+)
          AND b.inst_id = c.inst_id(+)
          AND c.del_yn(+) = 'N'

       UNION ALL

       SELECT a.svr_id, b.inst_id, null, a.svr_nm, b.inst_nm, b.sys_id, b.inst_os_acct_nm
             ,b.dflt_home_path, b.lsnc_desc, a.mjr_use_cd, b.db_type, b.comp_type, b.biz_area, b.biz_area_sub
             ,b.sub_mngr_id, b.mjr_mngr_id, b.meta_conn_acct_id
             ,REPLACE(REPLACE(meta_crypt.decrypt(b.meta_conn_acct_pwd, 'encore5868' ), CHR(0)), CHR(1)) meta_conn_acct_pwd
             ,(SELECT user_nm FROM usr_user WHERE user_id = sub_mngr_id) sub_mngr_nm
             ,(SELECT user_nm FROM usr_user WHERE user_id = mjr_mngr_id) mjr_mngr_nm
             ,null, null
         FROM md_svr a
             ,md_inst b
        WHERE a.svr_id = b.svr_id
          AND b.db_type &gt; '0001'
        ORDER BY mjr_use_cd, db_type
    </select>

	<select id="getListener" parameterType="hashmap" resultType="encore.meta.mybatis.UpperKeyMap">
        SELECT /* mng.getListener */ lsnr_nm, lsnr_ip, lsnr_prt, svc_nm, mngr_id
          FROM md_lsnr
         WHERE svr_id = #{svrId}
           AND inst_id = #{instId}
    </select>

	<select id="getBizArea" resultType="encore.meta.mybatis.UpperKeyMap">
         SELECT /* mng.getBizArea */ biz_id, biz_name, biz_desc
           FROM mm_biz_area
          WHERE biz_pid = 'ROOT'
            AND expireddate = '99999999999999'
          ORDER BY biz_id
    </select>

    <insert id="insertInstance" parameterType="hashmap">
        <selectKey keyProperty="instId" resultType="string" order="BEFORE">
		select /* mng.insertInstance */ lpad((coalesce(max(inst_id)::numeric , 0) + 1)::text, 4, '0') inst_id from md_inst
			where SVR_ID = #{svrId}
        </selectKey>
        INSERT ALL /* mng.insertInstance */
          INTO md_inst ( svr_id, inst_id, inst_nm, sys_id, db_type, comp_type, inst_os_acct_nm, dflt_home_path, biz_area,
                           biz_area_sub, meta_conn_acct_id, meta_conn_acct_pwd, mjr_mngr_id, sub_mngr_id, creat_dt,
                           creat_user_id, last_alter_dt, last_alter_user_id, lsnc_desc)
        VALUES ( svr_id, inst_id, inst_nm, sys_id, db_type, comp_type, inst_os_acct_nm, dflt_home_path, biz_area,
                  biz_area_sub, meta_conn_acct_id,  meta_conn_acct_pwd, mjr_mngr_id, sub_mngr_id, creat_dt,
                  creat_user_id, last_alter_dt, last_alter_user_id, lsnc_desc)
          INTO md_lsnr (svr_id, inst_id, lsnr_id, lsnr_nm, lsnr_ip, lsnr_prt, svc_nm, pwd_mng_yn, meta_conn_yn, mngr_id , creat_dt,
                          creat_user_id, last_alter_dt, last_alter_user_id)
        VALUES (svr_id, inst_id, lsnr_id, lsnr_nm, lsnr_ip, lsnr_prt, svc_nm, pwd_mng_yn, meta_conn_yn, mngr_id , creat_dt,
                creat_user_id, last_alter_dt, last_alter_user_id)
        SELECT #{svrId} svr_id, #{instId} inst_id, #{instNm} inst_nm, #{sysId} sys_id, #{dbType} db_type
              ,#{compType} comp_type, #{instOsAcctNm} inst_os_acct_nm, #{dfltHomePath} dflt_home_path
              ,#{bizArea} biz_area, #{bizAreaSub} biz_area_sub
              ,#{metaConnAcctId} meta_conn_acct_id, meta_crypt.crypt(#{metaConnAcctPwd}, 'encore5868') meta_conn_acct_pwd
              ,#{mjrMngrId} mjr_mngr_id, #{subMngrId} sub_mngr_id
              ,current_timestamp creat_dt, #{requestUserId} creat_user_id, current_timestamp last_alter_dt, #{requestUserId} last_alter_user_id, #{lsncDesc} lsnc_desc
              ,'0001' lsnr_id
              ,#{lsnrNm} lsnr_nm, #{lsnrIp} lsnr_ip, #{lsnrPrt} lsnr_prt, #{svcNm} svc_nm, 'Y' pwd_mng_yn, 'Y' meta_conn_yn, #{mngrId} mngr_id
          LIMIT 1
    </insert>

    <update id="updateInstance" parameterType="hashmap">
       UPDATE md_inst
           SET inst_nm = #{instNm}
              ,sys_id = #{sysId}
              ,db_type = #{dbType}
              ,comp_type = #{compType}
              ,inst_os_acct_nm = #{instOsAcctNm}
              ,dflt_home_path = #{dfltHomePath}
              ,biz_area = #{bizArea}
              ,biz_area_sub = #{bizAreaSub}
              ,meta_conn_acct_id = #{metaConnAcctId}
              ,meta_conn_acct_pwd = meta_crypt.crypt(#{metaConnAcctPwd}, 'encore5868')
              ,mjr_mngr_id = #{mjrMngrId}
              ,sub_mngr_id = #{subMngrId}
              ,last_alter_dt = LOCALTIMESTAMP
              ,last_alter_user_id = #{requestUserId}
              ,lsnc_desc = #{lsncDesc}
         WHERE svr_id = #{svrId}
           AND inst_id = #{instId}
    </update>

    <delete id="deleteInstance" parameterType="hashmap">
        DELETE FROM /* mng.deleteInstance */ md_inst
         WHERE svr_id = #{svrId}
           AND inst_id = #{instId}
    </delete>

    <!--deprecated
    <insert id="insertMdDb" parameterType="hashmap">
        INSERT INTO MD_DB(
              SVR_ID
            , INST_ID
            , DB_ID
            , DB_NM
            , META_MNG_YN
            , DEL_YN
            , CREAT_DT
            , CREAT_USER_ID
            , LAST_ALTER_DT
            , LAST_ALTER_USER_ID)
        SELECT SVR_ID
            , INST_ID
            , (SELECT CASE WHEN MAX(B.DB_ID) IS NULL THEN '0001'
                            ELSE LPAD(TO_CHAR(TO_NUMBER(MAX(B.DB_ID))+1),4,0)
                       END FROM MD_DB B WHERE B.SVR_ID = A.SVR_ID AND B.INST_ID = A.INST_ID) DB_ID
            , INST_NM
            , 'Y'
            , 'N'
            , CREAT_DT
            , CREAT_USER_ID
            , LAST_ALTER_DT
            , LAST_ALTER_USER_ID
        FROM MD_INST A
        WHERE A.SVR_ID = #{svrId}
           AND A.INST_ID = #{instId}
    </insert>
    -->

	<select id="getListenerList" parameterType="hashmap" resultType="encore.meta.mybatis.UpperKeyMap">
        SELECT /* mng.getListenerList */ svr_id
              ,inst_id
              ,lsnr_id
              ,lsnr_nm
              ,svc_nm
              ,lsnr_ip
              ,lsnr_prt
              ,pwd_mng_yn
              ,meta_conn_yn
              ,(SELECT user_nm FROM usr_user WHERE user_id = mngr_id ) user_nm
              ,mngr_id
          FROM md_lsnr
         WHERE svr_id = #{svrId, jdbcType=VARCHAR}
           AND inst_id = #{instId, jdbcType=VARCHAR}
         ORDER BY lsnr_nm
    </select>

    <insert id="insertListener" parameterType="hashmap">
   		INSERT INTO /* mng.insertListener */ md_lsnr(
			svr_id, inst_id, lsnr_id, lsnr_nm, lsnr_ip, lsnr_prt, svc_nm, pwd_mng_yn, meta_conn_yn
            ,mngr_id, creat_dt, creat_user_id, last_alter_dt, last_alter_user_id)
        VALUES (#{svrId}, #{instId}
            ,(SELECT LPAD((coalesce(MAX(lsnr_id)::numeric, 0) + 1)::text, 4,'0')
	                FROM md_lsnr
	               WHERE svr_id = #{svrId}
	                 AND inst_id = #{instId}
			)
            ,#{lsnrNm}, #{lsnrIp}, #{lsnrPrt}, #{svcNm}, 'N', 'N', #{mngrId}, LOCALTIMESTAMP
            ,#{requestUserId}, LOCALTIMESTAMP, #{requestUserId})
    </insert>

    <update id="updateListener" parameterType="hashmap">
        UPDATE /* mng.updateListener */ md_lsnr
           SET lsnr_nm = #{lsnrNm}
              ,lsnr_ip = #{lsnrIp}
              ,lsnr_prt = #{lsnrPrt}
              ,svc_nm = #{svcNm}
              ,pwd_mng_yn = 'N'
              ,meta_conn_yn = 'N'
              ,mngr_id = #{mngrId}
              ,last_alter_dt = LOCALTIMESTAMP
              ,last_alter_user_id = #{requestUserId}
         WHERE svr_id = #{svrId}
           AND inst_id = #{instId}
           AND lsnr_id = #{lsnrId}
    </update>

    <delete id="deleteListener" parameterType="hashmap">
        DELETE FROM /* mng.deleteListener */ md_lsnr
         WHERE svr_id = #{svrId}
           AND inst_id = #{instId}
        <if test="@Ognl@isNotEmpty(lsnrId)">
            AND lsnr_id = #{lsnrId}
        </if>
    </delete>

    <insert id="insertCode" parameterType="hashmap">
        /* mng.insertCode */
  	 INSERT INTO ms_code(lang_cd, up_cd_id, cd_id, cd_nm, show_ord, cd_desc, cd_cre_dt)
        VALUES (#{LANG_CD}, #{UP_CD_ID}, #{CD_ID}, #{CD_NM},  #{SHOW_ORD, jdbcType=VARCHAR}, #{CD_DESC, jdbcType=VARCHAR}, TO_CHAR(LOCALTIMESTAMP, 'YYYYMMDD'))
    </insert>

    <update id="updateCode" parameterType="hashmap">
        /* mng.updateCode */
        UPDATE ms_code
           SET cd_nm = #{CD_NM}
              ,show_ord = #{SHOW_ORD, jdbcType=VARCHAR}
              ,cd_desc = #{CD_DESC, jdbcType=VARCHAR}
         WHERE lang_cd = #{LANG_CD}
           AND up_cd_id = #{UP_CD_ID}
           AND cd_id = #{CD_ID}
    </update>

    <delete id="deleteCode" parameterType="hashmap">
        /* mng.deleteCode */
        DELETE FROM ms_code
         WHERE lang_cd = #{LANG_CD}
           AND up_cd_id = #{UP_CD_ID}
           AND cd_id = #{CD_ID}
    </delete>

	<select id="getCodeTree" parameterType="hashmap" resultType="encore.meta.mybatis.UpperKeyMap">
        /* mng.getCodeTree */
     SELECT a.lang_cd || '_' || a.up_cd_id || '_' || a.cd_id "id"
             , a.lang_cd
             , a.cd_id
             , a.cd_nm
             , a.up_cd_id
             , a.show_ord
             , a.cd_desc
             , a.cd_cre_dt
             , a.cd_type_cd
             , CASE WHEN a.up_cd_id='ROOT' THEN  'false'  ELSE 'true' END  "leaf"
             , 'null' "checkedColumn"
          FROM ms_code a
           <if test="@Ognl@isNotEmpty(node)">
         WHERE 1 = 1
           AND a.lang_cd = #{langCd}
            <choose>
                <when test="node == &quot;root&quot;">
           AND a.up_cd_id = 'ROOT'
                    <if test="@Ognl@isNotEmpty(SEARCH_WORD)">
                        <if test="@Ognl@isNotEmpty(SEARCH_TYPE) and SEARCH_TYPE == &quot;0001&quot;">
           AND UPPER(a.cd_id) LIKE UPPER(#{SEARCH_WORD}) || '%'
                        </if>
                        <if test="@Ognl@isNotEmpty(SEARCH_TYPE) and SEARCH_TYPE == &quot;0002&quot;">
           AND UPPER(a.cd_nm) LIKE UPPER(#{SEARCH_WORD}) || '%'
                        </if>
                        <if test="@Ognl@isNotEmpty(SEARCH_TYPE) and SEARCH_TYPE == &quot;0003&quot;">
           AND UPPER(a.cd_desc) LIKE UPPER(#{SEARCH_WORD}) || '%'
                        </if>
                    </if>
                </when>
            <otherwise>
                <choose>
                    <!-- 멤버코드에서 쿼리가 날려졌을때(그룹코드가 ROOT이 아닐때) 예외처리-->
                    <when test="&quot;ROOT&quot; != @Ognl@substring(node, @Ognl@length(langCd) + 1, @Ognl@length(langCd) + 5)">
           AND a.up_cd_id = 'xxxxx'
                    </when>
                    <otherwise>
           AND a.up_cd_id = substring(#{node}, length(#{langCd}) + 7, length(#{langCd}) + 10)
                    </otherwise>
                </choose>
            </otherwise>
            </choose>
        </if>

        ORDER BY a.cd_id, NVL(a.show_ord, '0000')
    </select>

	<select id="getLabelList" parameterType="hashmap" resultType="encore.meta.mybatis.UpperKeyMap">
        /* mng.getLabelList */
        <include refid="pagingHeader"/>
        SELECT a.lang_cd || '_' || DECODE(a.term_id, null, b.term_id, a.term_id) "id"
              ,a.lang_cd lang_cd
              ,DECODE(a.term_id, null, b.term_id, a.term_id) label_id
              ,a.term_nm label_nm
              ,a.term_desc label_desc
              ,b.term_nm ko_label_nm
              ,b.term_desc ko_label_desc
          FROM ms_term a, ms_term b
         WHERE a.term_id(+) = b.term_id
         <if test="@Ognl@isNotEmpty(LANG_CD)">
           AND a.lang_cd(+) = #{LANG_CD}
         </if>
           AND b.lang_cd = #{langCd}
        <if test="@Ognl@isNotEmpty(SEARCH_WORD)">
            <if test="@Ognl@isNotEmpty(SEARCH_TYPE) and SEARCH_TYPE == &quot;0001&quot;">
           AND (a.term_id LIKE #{SEARCH_WORD} OR b.term_id LIKE #{SEARCH_WORD})
            </if>
            <if test="@Ognl@isNotEmpty(SEARCH_TYPE) and SEARCH_TYPE == &quot;0002&quot;">
           AND (UPPER(TRIM(a.term_nm)) LIKE UPPER(#{SEARCH_WORD}) OR UPPER(TRIM(b.term_nm)) LIKE UPPER(#{SEARCH_WORD}))
            </if>
            <if test="@Ognl@isNotEmpty(SEARCH_TYPE) and SEARCH_TYPE == &quot;0003&quot;">
           AND (UPPER(a.term_desc) LIKE UPPER(#{SEARCH_WORD}) OR UPPER(b.term_desc) LIKE UPPER(#{SEARCH_WORD}))
            </if>
        </if>
        <if test="@Ognl@isNotEmpty(EXCEPT_PREFIX_META_COMMON)">
           AND a.term_id NOT LIKE 'meta.common.%'
        </if>
        <if test="@Ognl@isNotEmpty(EXCEPT_PREFIX_META_PKG)">
           AND a.term_id NOT LIKE 'meta.pkg.%'
        </if>
         ORDER BY a.term_nm
        <include refid="pagingFooter"/>
    </select>

    <select id="getLabelListCnt" parameterType="hashmap" resultType="int">
        /* mng.getLabelListCnt */
	   select
			count(*)
		from
			ms_term b
		left outer join ms_term a on
			(b.term_id = a.term_id
			and :LANG_CD/*#{LANG_CD}*/ = a.lang_cd)
		where
			b.lang_cd = :langCd/*#{langCd}*/
        <if test="@Ognl@isNotEmpty(SEARCH_WORD)">
            <if test="@Ognl@isNotEmpty(SEARCH_TYPE) and SEARCH_TYPE == &quot;0001&quot;">
           AND (a.term_id LIKE #{SEARCH_WORD} OR b.term_id LIKE #{SEARCH_WORD})
            </if>
            <if test="@Ognl@isNotEmpty(SEARCH_TYPE) and SEARCH_TYPE == &quot;0002&quot;">
           AND (UPPER(TRIM(a.term_nm)) LIKE UPPER(#{SEARCH_WORD}) OR UPPER(TRIM(b.term_nm)) LIKE UPPER(#{SEARCH_WORD}))
            </if>
            <if test="@Ognl@isNotEmpty(SEARCH_TYPE) and SEARCH_TYPE == &quot;0003&quot;">
           AND (UPPER(a.term_desc) LIKE UPPER(#{SEARCH_WORD}) OR UPPER(b.term_desc) LIKE UPPER(#{SEARCH_WORD}))
            </if>
        </if>
        <if test="@Ognl@isNotEmpty(EXCEPT_PREFIX_META_COMMON)">
           AND a.term_id NOT LIKE 'meta.common.%'
        </if>
        <if test="@Ognl@isNotEmpty(EXCEPT_PREFIX_META_PKG)">
           AND a.term_id NOT LIKE 'meta.pkg.%'
        </if>
    </select>

	<select id="getLabelExist" parameterType="hashmap" resultType="encore.meta.mybatis.UpperKeyMap">
        /* mng.getLabelExist */
	   SELECT 'true' exist
         WHERE EXISTS (SELECT 1
                         FROM ms_term a
                        WHERE a.lang_cd = :LANG_CD/*#{LANG_CD}*/
                          AND a.term_id = :LABEL_ID/*#{LABEL_ID}*/)

    </select>

    <insert id="insertLabel" parameterType="hashmap" >
        /* mng.insertLabel */
        INSERT INTO ms_term (lang_cd, term_id, term_nm, term_desc, term_gbn_cd)
        VALUES (#{LANG_CD}, trim(#{LABEL_ID}), trim(#{LABEL_NM}), trim(#{LABEL_DESC, jdbcType=VARCHAR}), '2002')
    </insert>

    <update id="updateLabel" parameterType="hashmap">
       /* mng.updateLabel */
        with upsert as (
        	select #{LABEL_ID} term_id 
        		 , #{LANG_CD} lang_cd 
        ), update_option as (
        	UPDATE ms_term a
        	   SET term_nm = trim(#{LABEL_NM})
                 , term_desc = trim(#{LABEL_DESC})
             from upsert v   
            WHERE a.term_id = v.term_id
             AND a.lang_cd = v.lang_cd  
        )
          insert into ms_term (lang_cd, term_id, term_nm, term_desc, term_gbn_cd)
          select v.lang_cd, trim(v.term_id), trim(#{LABEL_NM}), trim(#{LABEL_DESC, jdbcType=VARCHAR}), '2002'
            from upsert v
           where not exists (select 1 from ms_term a WHERE a.term_id = v.term_id AND a.lang_cd = v.lang_cd )
     </update>

    <delete id="deleteLabel" parameterType="hashmap" >
        /* mng.deleteLabel */
        DELETE FROM ms_term
         WHERE term_id = #{LABEL_ID}
    </delete>

    <select id="callOutparam" statementType="CALLABLE" parameterType="hashmap">
        {call CWC_OUTPARAM1(${inval}, #{outval, mode=OUT, jdbcType=NUMERIC})}
    </select>

    <!-- 2012.05.17 수정 시작 : 권한관리 -->
	<select id="getApprovalLine" parameterType="hashmap" resultType="encore.meta.mybatis.UpperKeyMap">
        SELECT /* mng.getApprovalLine */ sign_line_id
              ,aval_end_dt
              ,aval_st_dt
              ,sign_line_nm
              ,sign_line_desc
         FROM msg_line
        WHERE 1 = 1
        <if test="@Ognl@isNotEmpty(SIGN_LINE_ID)">
          AND sign_line_id = #{SIGN_LINE_ID}
        </if>
        <if test="@Ognl@isNotEmpty(COMMON_LINE) and COMMON_LINE == &quot;Y&quot;">
          AND USER_ID IS NULL
        </if>
          AND aval_end_dt = '${@encore.meta.common.MetaConstants@MAX_DATE_VALUE}'
        ORDER BY sign_line_nm
    </select>

	<select id="getApprovalStep" parameterType="hashmap" resultType="encore.meta.mybatis.UpperKeyMap">
        /*mng.getApprovalStep*/
		select
			m.*,
			u.user_nm signer_nm,
			d.dept_nm,
			m.SIGN_MTHD_GBN SIGNER_GBN
		from
			msg_step m
		left outer join usr_user u on
			(m.SIGNER_ID = u.LOGIN_ID)
		left outer join usr_dept d on
			(m.SIGNER_DEPT_ID = d.dept_id)
		/*AND u.ACCESS_YN(+) = 'Y'*/
		AND aval_end_dt = '${@encore.meta.common.MetaConstants@MAX_DATE_VALUE}'
		<if test="@Ognl@isNotEmpty(SIGN_LINE_ID)">
			AND sign_line_id = #{SIGN_LINE_ID}
		</if>
		ORDER BY m.SIGN_SEQ
    </select>

    <insert id="insertApprovalLine" parameterType="hashmap">
        INSERT INTO /* mng.insertApprovalLine */ msg_line (sign_line_id, aval_st_dt, aval_end_dt, sign_line_nm, sign_line_desc)
        VALUES (#{SIGN_LINE_ID}, #{AVAL_ST_DT}, #{AVAL_END_DT}, #{SIGN_LINE_NM}, #{SIGN_LINE_DESC, jdbcType=VARCHAR})
    </insert>

    <update id="updateApprovalLine" parameterType="hashmap">
        UPDATE /* mng.updateApprovalLine */ msg_line
           SET sign_line_nm = #{SIGN_LINE_NM}
              ,sign_line_desc = #{SIGN_LINE_DESC, jdbcType=VARCHAR}
         WHERE sign_line_id = #{SIGN_LINE_ID}
    </update>

    <delete id="deleteApprovalLine" parameterType="hashmap">
        UPDATE /* mng.deleteApprovalLine */ msg_line
           SET aval_end_dt = #{AVAL_END_DT}
         WHERE sign_line_id = #{SIGN_LINE_ID}
    </delete>

	<select id="getApprovalTargetByLine" parameterType="hashmap" resultType="encore.meta.mybatis.UpperKeyMap">
        SELECT /* mng.getApprovalTargetByLine */ sign_line_id
              ,sign_tgt_gbn_cd
              ,tgt_area_id
              ,aval_end_dt
              ,aval_st_dt
         FROM msg_target
        WHERE sign_line_id = #{SIGN_LINE_ID}
          AND aval_end_dt = '${@encore.meta.common.MetaConstants@MAX_DATE_VALUE}'
    </select>

    <delete id="deleteApprovalTargetByLine" parameterType="hashmap">
        UPDATE /* mng.deleteApprovalTargetByLine */ msg_target
           SET aval_end_dt = #{AVAL_END_DT}
         WHERE sign_line_id = #{SIGN_LINE_ID}
           AND aval_end_dt = '${@encore.meta.common.MetaConstants@MAX_DATE_VALUE}'
    </delete>

    <delete id="deleteApprovalTarget" parameterType="hashmap">
        UPDATE /* mng.deleteApprovalTarget */ msg_target
           SET aval_end_dt = #{raw.AVAL_END_DT}
         WHERE sign_line_id = #{raw.SIGN_LINE_ID}
           AND sign_tgt_gbn_cd = #{raw.SIGN_TGT_GBN_CD}
           AND tgt_area_id = #{raw.TGT_AREA_ID}
           AND aval_st_dt = #{raw.AVAL_ST_DT}
    </delete>

    <update id="updateApprovalTarget" parameterType="hashmap">
        UPDATE /* mng.updateApprovalTarget */ msg_target
           SET sign_tgt_gbn_cd = #{data.SIGN_TGT_GBN_CD}
              ,tgt_area_id = #{data.TGT_AREA_ID}
              ,aval_st_dt = #{data.AVAL_ST_DT}
              ,aval_end_dt = #{data.AVAL_END_DT}
         WHERE sign_line_id = #{raw.SIGN_LINE_ID}
           AND sign_tgt_gbn_cd = #{raw.SIGN_TGT_GBN_CD}
           AND tgt_area_id = #{raw.TGT_AREA_ID}
           AND aval_end_dt = #{raw.AVAL_END_DT}
           AND aval_st_dt = #{raw.AVAL_ST_DT}
    </update>

    <insert id="insertApprovalTarget" parameterType="hashmap">
        INSERT INTO /* mng.insertApprovalTarget */ msg_target (sign_line_id, sign_tgt_gbn_cd, tgt_area_id, aval_st_dt, aval_end_dt)
        VALUES (#{data.SIGN_LINE_ID}, #{data.SIGN_TGT_GBN_CD}, #{data.TGT_AREA_ID}, #{data.AVAL_ST_DT}, #{data.AVAL_END_DT} )
    </insert>

	<select id="getApprovalStepByLine" parameterType="hashmap" resultType="encore.meta.mybatis.UpperKeyMap">
        /* mng.getApprovalStepByLine */
        SELECT t1.sign_line_id
              ,t1.sign_seq
              ,t1.aval_end_dt
              ,t1.aval_st_dt
              ,t1.sign_step_gbn_cd
              ,t1.sign_mthd_gbn
              ,t1.bypass_yn
              ,t1.signee_gbn_cd
              ,t1.signer_id
              ,t1.last_appr_yn
              ,(CASE
                   WHEN t1.signee_gbn_cd = '0002' THEN (SELECT user_nm FROM usr_user WHERE user_id = t1.signer_id)
                   WHEN t1.signee_gbn_cd = '0003' THEN (SELECT role_nm FROM usr_role WHERE role_id = t1.signer_id)
                   ELSE NULL
                END) signer_nm
              ,t1.sign_is_complete
          FROM msg_step t1
          LEFT OUTER JOIN usr_user t2
            ON t1.signer_id = t2.user_id
         WHERE t1.sign_line_id = #{SIGN_LINE_ID}
           AND t1.aval_end_dt = '${@encore.meta.common.MetaConstants@MAX_DATE_VALUE}'
    </select>

    <delete id="deleteApprovalStepByLine" parameterType="hashmap">
        UPDATE /* mng.deleteApprovalStepByLine */ msg_step
           SET aval_end_dt = #{AVAL_END_DT}
         WHERE sign_line_id = #{SIGN_LINE_ID}
           AND aval_end_dt = '${@encore.meta.common.MetaConstants@MAX_DATE_VALUE}'
    </delete>

    <delete id="deleteApprovalStep" parameterType="hashmap">
        UPDATE /* mng.deleteApprovalStep */ msg_step
           SET aval_end_dt = #{raw.AVAL_END_DT}
         WHERE sign_line_id = #{raw.SIGN_LINE_ID}
           AND sign_seq = #{raw.SIGN_SEQ}
           AND aval_st_dt = #{raw.AVAL_ST_DT}
    </delete>

    <update id="updateApprovalStep" parameterType="hashmap">
        UPDATE /* mng.updateApprovalStep */ msg_step
           SET sign_seq = #{data.SIGN_SEQ}
              ,aval_st_dt = #{data.AVAL_ST_DT}
              ,aval_end_dt = #{data.AVAL_END_DT}
              ,sign_step_gbn_cd = #{data.SIGN_STEP_GBN_CD}
              ,bypass_yn = #{data.BYPASS_YN}
              ,signee_gbn_cd = #{data.SIGNEE_GBN_CD}
              ,signer_id = #{data.SIGNER_ID}
              ,last_appr_yn = #{data.LAST_APPR_YN}
         WHERE sign_line_id = #{raw.SIGN_LINE_ID}
           AND sign_seq = #{raw.SIGN_SEQ}
           AND aval_st_dt = #{raw.AVAL_ST_DT}
    </update>

    <insert id="insertApprovalStep" parameterType="hashmap">
        INSERT INTO /* mng.insertApprovalStep */ msg_step (sign_line_id, sign_seq, aval_st_dt, aval_end_dt,
                                                             sign_step_gbn_cd, signee_gbn_cd, signer_id, last_appr_yn)
        VALUES (#{data.SIGN_LINE_ID}, #{data.SIGN_SEQ}, #{data.AVAL_ST_DT}, #{data.AVAL_END_DT},
                #{data.SIGN_STEP_GBN_CD}, #{data.SIGNEE_GBN_CD}, #{data.SIGNER_ID}, #{data.LAST_APPR_YN})
    </insert>

	<select id="getOrganizationEmployeeHierachy" parameterType="hashmap" resultType="encore.meta.mybatis.UpperKeyMap">
        SELECT /* mng.getOrganizationEmployeeHierachy */ role_id, role_nm, role_desc, role_gbn_cd, up_role_id, login_id, login_pswd, cell_phone,
               phone, offi_phone, email, atch_corp_id, corp_phone, corp_boss_nm, level
          FROM mau_role_info
         WHERE role_gbn_cd IN ('0001', '0002', '0004')
         START WITH up_role_id IS NULL
       CONNECT BY PRIOR role_id = up_role_id
         ORDER SIBLINGS BY role_id
    </select>

	<select id="getOrganizationHierachy" parameterType="hashmap" resultType="encore.meta.mybatis.UpperKeyMap">
        SELECT /* mng.getOrganizationHierachy */ role_id, role_nm, role_desc, role_gbn_cd, up_role_id, login_id, login_pswd, cell_phone,
               phone, offi_phone, email, atch_corp_id, corp_phone, corp_boss_nm, level
          FROM MAU_ROLE_INFO
         WHERE role_gbn_cd IN ('0002', '0004')
         START WITH up_role_id IS NULL
       CONNECT BY PRIOR role_id = up_role_id
         ORDER SIBLINGS BY role_id
    </select>

	<select id="getEmployeeInDepartment" parameterType="hashmap" resultType="encore.meta.mybatis.UpperKeyMap">
        SELECT /* mng.getEmployeeInDepartment */ role_id, role_nm, role_desc, role_gbn_cd, up_role_id, login_id,
               login_pswd, cell_phone, email, atch_corp_id
          FROM mau_role_info
         WHERE role_gbn_cd = '0001'
        <if test="UP_ROLE_ID != null">
           AND up_role_id = #{UP_ROLE_ID}
        </if>
        <if test="ATCH_CORP_ID != null">
           AND atch_corp_id = #{ATCH_CORP_ID}
        </if>
    </select>

	<select id="getCoporation" parameterType="hashmap" resultType="encore.meta.mybatis.UpperKeyMap">
        SELECT /* mng.getCoporation */ role_id, role_nm, role_desc, role_gbn_cd, corp_phone, corp_boss_nm
          FROM mau_role_info
         WHERE role_gbn_cd = '0004'
        <if test="ROLE_ID != null">
           AND role_id = #{ROLE_ID}
        </if>
    </select>

	<select id="getTargetAreaTheme" parameterType="hashmap" resultType="encore.meta.mybatis.UpperKeyMap">
        WITH MTREE /*C get_appr_model_tree */ AS
            /* 전체모델리스트 (개괄,개념,논리) */
            (SELECT LEVEL lvl, a.a_uid, a.p_uid, a.foldername, a.registerdate, SYS_CONNECT_BY_PATH(a.a_uid,'/') ids,
                   modeltype, ROWNUM rnum
               FROM da_modelstru a
              START WITH a.p_uid = 'ROOT' AND a.expireddate = '99999999999999' and a.modeltype IN (1,2,9)
            CONNECT BY PRIOR a.a_uid = a.p_uid AND a.expireddate = '99999999999999'
              ORDER SIBLINGS BY a.foldername)
        ,APPR AS
            /* 접근권한이 허용된 해당 주제영역과 그 하위 주제영역의 승인모델 리스트 */
            /* 접근권한을 중복되게 허용하면 리스트 정보가 중복될 수 있음 */
            (SELECT DISTINCT m.ids, m.a_uid
               FROM mtree m
              WHERE modeltype IN (1,2))
        SELECT /* mng.getTargetAreaTheme */ '2' gbn, m.lvl "LEVEL"
                , m.p_uid, m.a_uid, m.modeltype
                , m.foldername, NULL isfile, rownum rnum
          FROM mtree m, appr ap
         WHERE EXISTS (SELECT 1
                         FROM appr ap2
                        WHERE INSTR(ap2.ids, m.ids) = 1
                           OR m.ids = 'ROOT')
           AND m.a_uid = ap.a_uid(+)
         UNION ALL
        SELECT '2'
              ,0 lvl
              , 'P_ROOT' P_UID
              , 'ROOT' A_UID
              , 9 MODELTYPE
              , 'ALL' FOLDERNAME
              , null
              , -1 rnum
          FROM DUAL
         ORDER BY rnum
    </select>

	<select id="getTargetAreaRules" parameterType="hashmap" resultType="encore.meta.mybatis.UpperKeyMap">
         /* mng.getTargetAreaRules */
		WITH RECURSIVE cte AS (
			WITH a as (
	                SELECT 'P_ROOT' biz_pid , 'ROOT' biz_id, 'ALL' biz_name
					UNION ALL
	                SELECT biz_pid, biz_id, biz_name
	                  FROM mdq_bizarea
	                 WHERE expireddate = '99991231235959'
	        )
	        SELECT '4' gbn,1 as level,biz_pid p_uid,biz_id a_uid,biz_name foldername,null isfile
	        	,ARRAY[ row_number() OVER (ORDER BY  biz_name) ] as hierarchy
	          FROM  a WHERE a.biz_pid = 'P_ROOT'
	  		UNION ALL
	        SELECT  '4' gbn,(c.level+1),biz_pid p_uid,biz_id a_uid,biz_name foldername,null isfile
	        	, array_append(c.hierarchy, row_number() OVER (ORDER BY  biz_name))  as hierarchy
	          FROM a JOIN cte c ON (a.biz_id = a.biz_pid)
		) SELECT * FROM cte ORDER BY hierarchy
    </select>

	<select id="getTargetAreaInstanceVeto" parameterType="hashmap" resultType="encore.meta.mybatis.UpperKeyMap">
        /* mng.getTargetAreaInstanceVeto */
        SELECT (CASE WHEN svr_level = 1 THEN 'ROOT' WHEN svr_level = 2 THEN '0001' || '.' || a_uid ELSE NULL END) p_uid
              ,(CASE WHEN svr_level = 1 THEN '0001' || '.' || a_uid WHEN svr_level = 2 THEN acct_id || '.' || '0001' || '.' || a_uid ELSE NULL END) a_uid
              ,(CASE WHEN svr_level = 1 THEN a_uid_nm WHEN svr_level = 2 THEN acct_nm ELSE NULL END) folder_nm
              ,(CASE WHEN svr_level = 1 THEN 'N' WHEN svr_level = 2 THEN 'Y' ELSE NULL END) is_file
              ,svr_level
              ,select_yn
          FROM (SELECT (inst.inst_id || '.' || svr.svr_id) a_uid
                      ,MAX('[' || svr.svr_nm || '] ' || inst.inst_nm) a_uid_nm
                      ,act.acct_id
                      ,MAX(act.acct_nm) acct_nm
                      ,MIN(mng_yn) select_yn
                      ,2 - ( GROUPING(act.acct_id) + GROUPING(inst.inst_id || '.' || svr.svr_id) ) svr_level
                  FROM md_svr svr
                 INNER JOIN md_inst inst
                    ON inst.svr_id = svr.svr_id
                 INNER JOIN md_acct act
                    ON act.svr_id = inst.svr_id
                   AND act.inst_id = inst.inst_id
                   AND act.aval_end_dt = '99991231235959'
                  LEFT OUTER JOIN (SELECT acct_id
                                         ,MAX(CASE WHEN mng_yn = 'Y' THEN 'Y' ELSE NULL END) mng_yn
                                     FROM md_mng_obj
                                    GROUP BY acct_id) mng
                    ON mng.acct_id = act.acct_id
                 WHERE act.aval_end_dt = '99991231235959'
                 GROUP BY inst.inst_id || '.' || svr.svr_id, ROLLUP(act.acct_id)
        <if test="@Ognl@isNotEmpty(selectYn)">
                HAVING MIN(mng_yn) = 'Y'
        </if>
                 ORDER BY inst.inst_id || '.' || svr.svr_id NULLS FIRST, act.acct_id NULLS FIRST)
    </select>

	<select id="getTargetAreaInstance" parameterType="hashmap" resultType="encore.meta.mybatis.UpperKeyMap">
   		WITH RECURSIVE cte AS (

			WITH wa as (SELECT 'P_ROOT' "P_UID"
	                      , 'ROOT' "A_UID"
	                      , 'ALL' "FOLDERNAME"
	                      , 'N' "ISFILE"
					UNION ALL
	                SELECT 'ROOT' "P_UID"
	                      , c.db_id||'.' || b.inst_id || '.' || a.svr_id "A_UID"
	                      ,'[' || a.svr_nm || '] ' || c.db_nm "FOLDERNAME"
	                      ,'N' "ISFILE"
	                  FROM md_svr a, md_inst b, md_db c
	                 WHERE b.svr_id = a.svr_id
	                   and c.svr_id = b.svr_id
	                   and c.inst_id = b.inst_id
					UNION ALL
	                SELECT b.db_id || '.' || b.inst_id || '.' || b.svr_id "P_UID"
	                     , b.acct_id || '.' || b.db_id || '.' || b.inst_id || '.' || b.svr_id "A_UID"
	                     , '[' || a.inst_nm || '] ' || b.acct_nm "FOLDERNAME"
	                     , 'Y' isfile
	                  FROM md_inst a, md_acct b
	                 WHERE b.aval_end_dt = '99991231235959'
	                   AND b.svr_id = a.svr_id
	                   AND b.inst_id = a.inst_id
	                 )
	        SELECT  '5' gbn,1 as level,"P_UID","A_UID","FOLDERNAME","ISFILE"
	        	,ARRAY[ row_number() OVER (ORDER BY  "FOLDERNAME") ] as hierarchy
	          FROM wa WHERE "P_UID" = 'P_ROOT'
	  		UNION ALL
	        SELECT  '5' gbn,(c.level+1),wa."P_UID",wa."A_UID",wa."FOLDERNAME",wa."ISFILE"
	        	, array_append(c.hierarchy, row_number() OVER (ORDER BY  wa."FOLDERNAME"))  as hierarchy
	          FROM wa JOIN cte c ON (c."A_UID" = wa."P_UID")
		) SELECT * FROM cte ORDER BY hierarchy
     </select>


	<select id="getSignTgtAreaDbmsJobs" parameterType="hashmap" resultType="encore.meta.mybatis.UpperKeyMap" >
        /* mng.getSignTgtAreaDbmsJobs */
        SELECT 'ROOT' as up_cd_id, cd_id, cd_nm as foldername, show_ord, 'false' as "leaf"
         FROM ms_code
        WHERE lang_cd = #{langCd}
          AND up_cd_id = '7003'
        ORDER BY (show_ord)::numeric
    </select>

	<select id="getSignTgtAreaDbmsJobInstances" parameterType="hashmap" resultType="encore.meta.mybatis.UpperKeyMap" >
        /* mng.getSignTgtAreaDbmsJobInstances */
		 SELECT #{jobCd} || '@' || c.svr_id || '.' || c.inst_id || '.' || c.db_id as cd_id
             , 'ROOT' as up_cd_id
             , '[' || #{jobNm} || '] ' || b.inst_nm as foldername
             , row_number() over() as show_ord
             , 'true' as "leaf"
          FROM md_svr a
             , md_inst b
             , md_db c
         WHERE 1 = 1
           AND a.svr_id = b.svr_id
           AND b.svr_id = c.svr_id
           AND b.inst_id = c.inst_id
         ORDER BY b.inst_nm
    </select>

	<select id="getUsrUsers" parameterType="hashmap" resultType="encore.meta.mybatis.UpperKeyMap">
		SELECT /* mng.getUsrUsers */
			user_id, user_nm, cel_phone, home_phone, office_phone, email,
		    start_dt, end_dt, access_yn, login_id, post, charge_gubun, dept_id, default_locale
		FROM usr_user
		WHERE end_dt >=to_char(LOCALTIMESTAMP,'yyyymmdd')
         <if test="@Ognl@isNotEmpty(usrNmFilter)">
           AND user_nm LIKE '%' || #{usrNmFilter} || '%'
         </if>
    </select>

	<select id="getUsrRoles" parameterType="hashmap" resultType="encore.meta.mybatis.UpperKeyMap">
        SELECT role_id, role_nm, role_desc, role_pid
          FROM usr_role
         WHERE role_type_cd = 'SIGN'
    </select>
    <!-- 2012.05.17 수정 종료 : 권한관리 -->

	<select id="getJobLog" parameterType="hashmap" resultType="encore.meta.mybatis.UpperKeyMap">
        /* mng.getJobLog */
        SELECT log_seq
              ,log_desc
              ,TO_CHAR(creat_dt,'YYYYMMDDHH24MISS') create_dt
          FROM md_job_hist_log
         WHERE job_id = #{JOB_ID}
           AND schl_id = #{SCHL_ID}
           AND job_st_dt = TO_DATE(#{JOB_ST_DT}, 'YYYYMMDDHH24MISS')
         ORDER BY job_st_dt desc, log_seq
    </select>

    <select id="getJobLogCnt" parameterType="hashmap" resultType="int">
        /* mng.getJobLogCnt */
        SELECT COUNT(*)
          FROM md_job_hist_log
         WHERE job_id = #{JOB_ID}::int8
           AND schl_id = #{SCHL_ID}::int8
           AND job_st_dt = TO_DATE(#{JOB_ST_DT}, 'YYYYMMDDHH24MISS')
    </select>

	<select id="getJobDivision" parameterType="hashmap" resultType="encore.meta.mybatis.UpperKeyMap">
 		SELECT /* mng.getJobDivision */ '' cd_id, GET_TERM(#{langCd}, 'label.all') cd_nm, '' cd_desc 
         UNION ALL
        SELECT cd_id, cd_nm, cd_desc
          FROM (SELECT CD_ID, CD_NM, CD_DESC , LPAD(SHOW_ORD,2,'0') aa
                  FROM ms_code
                 WHERE up_cd_id = #{upCode} /* 0119 */
                   AND cd_id IN ('0000','0001','0002','0003','0004','0011','0010')
                   AND lang_cd = #{langCd} /*ko*/
                 ORDER BY aa) t1
    </select>

	<select id="getJobDivisionNotAll" parameterType="hashmap" resultType="encore.meta.mybatis.UpperKeyMap">
        SELECT /* mng.getJobDivisionNotAll */ cd_id, cd_nm, cd_desc
          FROM (SELECT cd_id, cd_nm, cd_desc, LPAD(show_ord, 2, '0') aa
                  FROM ms_code
                 WHERE up_cd_id = #{upCode} /* 0119 */
                   AND cd_id  IN ('0000','0001','0002','0003','0004','0011','0010')
                   AND lang_cd = #{langCd} /*ko*/
                 ORDER BY aa)
         ORDER BY cd_id
    </select>

	<select id="getDatabaseInstance" parameterType="hashmap" resultType="encore.meta.mybatis.UpperKeyMap">
	  SELECT /* mng.getDatabaseInstance */
	 svr_nm "NAME", 'S' "TYPE", svr_id "ID", 'ROOT' "PARENTID"
	      ,svr_id "UID", NULL "DB_TYPE", 'N' "SELECT_YN"
	  FROM md_svr
	UNION ALL
	SELECT inst_nm "NAME", 'I' "TYPE" , svr_id || '.' || inst_id "ID", svr_id "PARENTID"
	      ,inst_id "UID", db_type "DB_TYPE", CASE WHEN db_type='0006' THEN  'Y'  ELSE 'N' END
	  FROM md_inst
	UNION ALL
	SELECT a.db_nm || '_DB' "NAME", 'D' "TYPE"
	      ,a.svr_id || '.' || a.inst_id ||'.' || a.db_id "ID"
	      ,a.svr_id || '.' || a.inst_id "PARENTID"
	      ,db_id "UID", NULL "DB_TYPE", 'Y'
	  FROM md_db a, md_inst b
	 WHERE b.inst_id = a.inst_id
	   AND b.svr_id = a.svr_id

    </select>

	<select id="getJobPicOrAdmin" parameterType="hashmap" resultType="encore.meta.mybatis.UpperKeyMap">
		select /* mng.getJobPicOrAdmin */ user_id, user_nm, charge_gubun
		from usr_user
		where coalesce(charge_gubun, 'G') = #{gbnCd}
    </select>

	<select id="getManagedSchemaList" parameterType="hashmap" resultType="encore.meta.mybatis.UpperKeyMap">
             /* mng.getManagedSchemaList */
       SELECT acct_id schema_name
             , CASE WHEN mng_yn='Y' THEN  'Y'  ELSE NULL END  select_yn
          FROM md_mng_obj
         WHERE job_id = #{JOB_ID, jdbcType=VARCHAR}
           AND mng_yn = 'Y'
         GROUP BY acct_id, mng_yn
         ORDER BY acct_id
    </select>
            
	<select id="getJdbcString" parameterType="hashmap" resultType="encore.meta.mybatis.UpperKeyMap">
        /* mng.getJdbcString */
        SELECT m.jdbc_driver
             , TRIM(REPLACE(REPLACE(REPLACE(m.jdbc_url_tmpl, '{HOST_NM}', l.lsnr_ip), '{PORT}', l.lsnr_prt), '{SID}', i.sys_id)) url
             , i.meta_conn_acct_id username
             , REPLACE(REPLACE(META_CRYPT.DECRYPT(i.meta_conn_acct_pwd, 'encore5868'), CHR(0)), CHR(1)) password
             , i.db_type
             , NVL(i.jdbc_url_tp, '0') jdbc_url_tp
             , NVL(i.external_yn, 'N') external_yn
             , i.agent_id
          FROM md_inst i
             , md_lsnr l
             , mcs_jdbc_map m
        WHERE i.svr_id = #{SVR_ID}
          AND i.inst_id = #{INST_ID}
          AND l.svr_id = i.svr_id
          AND l.inst_id = i.inst_id
          AND l.meta_conn_yn = 'Y'
          AND m.dbms_type_cd = i.db_type
          AND m.jdbc_url_tp = NVL(i.jdbc_url_tp, '0')
        <!--
        SELECT /*+ USE_NL(a b)*/
           NVL(a.conn_alias_nm,
               CASE WHEN a.db_type = '0001' THEN 'jdbc:oracle:thin:@' || b.lsnr_ip || ':' || b.lsnr_prt || '/' || a.sys_id
                    WHEN a.db_type = '0002' THEN 'jdbc:db2://' || b.lsnr_ip || ':' || b.lsnr_prt || '/' || a.sys_id
                    WHEN a.db_type = '0003' THEN 'jdbc:db2://' || b.lsnr_ip || ':' || b.lsnr_prt || '/' || a.sys_id
                    WHEN a.db_type = '0004' THEN 'jdbc:sybase:Tds:' || b.lsnr_ip || ':' || b.lsnr_prt || '/' || a.sys_id
                    WHEN a.db_type = '0005' THEN 'jdbc:sybase:Tds:' || b.lsnr_ip || ':' || b.lsnr_prt || '/' || a.sys_id
                    WHEN a.db_type = '0006' THEN 'jdbc:sqlserver://' || b.lsnr_ip || ':' || b.lsnr_prt || ';DatabaseName=' || a.sys_id
                    WHEN a.db_type = '0010' THEN 'jdbc:Altibase://' || b.lsnr_ip || ':' || b.lsnr_prt || '/' || a.sys_id
                    WHEN a.db_type = '0011' THEN 'jdbc:mysql://' || b.lsnr_ip || ':' || b.lsnr_prt || '/' || a.sys_id
                    WHEN a.db_type = '0013' THEN 'jdbc:tibero:thin:@' || b.lsnr_ip || ':' || b.lsnr_prt || ':' || a.sys_id
                    WHEN a.db_type = '0014' THEN 'jdbc:postgresql://' || b.lsnr_ip || ':' || b.lsnr_prt || '/' || a.sys_id
                    WHEN a.db_type = '0015' THEN 'jdbc:mysql://' || b.lsnr_ip || ':' || b.lsnr_prt || '/' || a.sys_id
                    WHEN a.db_type = '0016' THEN 'jdbc:edb://' || b.lsnr_ip || ':' || b.lsnr_prt || '/' || a.sys_id
               END) url
             , a.meta_conn_acct_id username
             , REPLACE(REPLACE(META_CRYPT.DECRYPT(a.meta_conn_acct_pwd, 'encore5868'), CHR(0)), CHR(1)) password
             , a.db_type
             , NVL(a.jdbc_url_tp,'0') jdbc_url_tp
             , a.external_yn
          FROM  md_inst a
             , md_lsnr b
         WHERE a.inst_id = #{INST_ID}
           AND a.svr_id = #{SVR_ID}
           AND b.svr_id = a.svr_id
           AND b.inst_id = a.inst_id
           AND b.meta_conn_yn = 'Y'
        -->
  </select>

	<select id="getSchemaList" parameterType="hashmap" resultType="encore.meta.mybatis.UpperKeyMap">
        /* mng.getSchemaList */
        SELECT *
          FROM (SELECT username schema_name
                      ,NULL select_yn
                      ,TO_CHAR(SYSDATE, 'YYYYMMDDHH24MISS') create_dt
                      ,NULL create_user_id
                  FROM dba_users

                 UNION ALL

                SELECT 'PUBLIC' schema_name
                      ,NULL select_yn
                      ,TO_CHAR(SYSDATE,'YYYYMMDDHH24MISS') create_dt
                      ,NULL create_user_id
                  FROM DUAL)
         ORDER BY 1
    </select>

    <!--deprecated
	<select id="getSchemaListMySQL" parameterType="hashmap" resultType="encore.meta.mybatis.UpperKeyMap">
        /* mng.getSchemaListMySQL */
        SELECT schema_name "SCHEMA_NAME"
              ,null SELECT_YN
              ,date_format(now(),'%Y%m%d%H%i%s') CREATE_DT
              ,null CREATE_USER_ID
        FROM information_schema.schemata
    </select>
    -->

    <!--deprecated
	<select id="getSchemaListZOS_DB2" parameterType="hashmap" resultType="encore.meta.mybatis.UpperKeyMap">
        /* mng.getSchemaListZOS_DB2 */
        SELECT DISTINCT CREATOR "SCHEMA_NAME"
              ,'' SELECT_YN
              ,TO_CHAR(CURRENT TIMESTAMP,'yyyymmddhh24miss') CREATE_DT
              ,'' CREATE_USER_ID
        FROM SYSIBM.SYSTABLES
    </select>
    -->

	<select id="getInstInfo" parameterType="hashmap" resultType="encore.meta.mybatis.UpperKeyMap">
        /* mng.getInstInfo */
        SELECT * FROM md_inst WHERE svr_id = #{SVR_ID} AND inst_id = #{INST_ID}
    </select>

	<select id="getManagedObjectList" parameterType="hashmap" resultType="encore.meta.mybatis.UpperKeyMap">
        SELECT /* mng.getManagedObjectList */ acct_id
              ,MIN(mng_yn) "MNG_YN"
          FROM md_mng_obj
         WHERE job_id = #{jobId}
         GROUP BY acct_id
         ORDER BY acct_id
    </select>

	<select id="getMdMngBr" parameterType="hashmap" resultType="encore.meta.mybatis.UpperKeyMap">
        SELECT /* mng.getMdMngBr */ br_id, br_nm, 'Y' "MNG_YN"
          FROM md_mng_br
         WHERE job_id = #{jobId}
    </select>

	<select id="getMngModelTree" parameterType="hashmap" resultType="encore.meta.mybatis.UpperKeyMap">
		WITH RECURSIVE cte AS ( /* mng.getMngModelTree */ 
	        SELECT  area_nm,mng_yn,area_id,up_area_id
	        	,ARRAY[ row_number() OVER (ORDER BY  area_nm) ] as hierarchy
	          FROM md_mng_model WHERE job_id = :jobId/*#{jobId}*/::int8
	           AND up_area_id = 'ROOT'
	  		UNION ALL
	        SELECT a.area_nm, a.mng_yn, a.area_id, a.up_area_id
	        	, array_append(c.hierarchy, row_number() OVER (ORDER BY  a.area_nm))  as hierarchy
	          FROM md_mng_model a
	          JOIN cte c ON (c.area_id = a.up_area_id)
		) SELECT * FROM cte ORDER BY hierarchy
    </select>

	<select id="getDatabaseBrList" parameterType="hashmap" resultType="encore.meta.mybatis.UpperKeyMap">
		select
			/* mng.getDatabaseBrList */
			br_id,
			br_nm,
			'N' "MNG_YN"
		from
			mdq_tables /*@KAMCO*/
			a ,
			mdq_biz_rule /*@KAMCO*/
			b
		where
			a.biz_id = :bizId /*#{bizId}*/
			and a.svr_id = :svrId /*#{svrId}*/
			and a.inst_id = :instId /*#{instId}*/
			and a.db_id = :dbId /*#{dbId}*/
			and a.acct_id = :acctId /*#{acctId}*/
			and b.obj_id = a.obj_id
			and b.expireddate = '99991231235959' /*'99991231235959'*/
			and b.br_status = '0001' /* BR 사용하는 것들만 가져오기 jun 추가 */
		order by
			br_id

    </select>

	<select id="getAppBizTree" parameterType="hashmap" resultType="encore.meta.mybatis.UpperKeyMap">
      WITH RECURSIVE cte AS (
	    SELECT  app_biz_name,'N' "SELECT_YN",app_biz_id,app_biz_pid,self_cms_flag CMS
	    	,ARRAY[ row_number() OVER (ORDER BY  app_biz_name) ] as hierarchy
	      FROM ma_app_area ar WHERE app_biz_pid = 'ROOT'
	       AND aval_end_dt = '99991231235959'
		UNION ALL
	    SELECT  ar.app_biz_name,'N' "SELECT_YN",ar.app_biz_id,ar.app_biz_pid,ar.self_cms_flag CMS
	    	, array_append(c.hierarchy, row_number() OVER (ORDER BY  ar.app_biz_name))  as hierarchy
	      FROM ma_app_area ar 
	      JOIN cte c ON (c.app_biz_id = ar.app_biz_pid AND aval_end_dt = '99991231235959')
	) SELECT * FROM cte 
	   WHERE EXISTS (SELECT 1
	                   FROM ma_dir d
	                  WHERE d.app_biz_id = cte.app_biz_id
	                    AND d.aval_end_dt = '99991231235959'  LIMIT 1) 
	   ORDER BY hierarchy
    </select>

	<select id="getBizTree" parameterType="hashmap" resultType="encore.meta.mybatis.UpperKeyMap">
        SELECT /* mng.getBizTree */ DISTINCT biz_name, 'N' "SELECT_YN", biz_id, biz_pid
          FROM mm_biz_area
         START WITH biz_pid = 'ROOT'
           AND expireddate = '99999999999999'
       CONNECT BY prior biz_id = biz_pid
           AND expireddate = '99999999999999'
    </select>

	<select id="getNewJobId" parameterType="hashmap" resultType="encore.meta.mybatis.UpperKeyMap">
        /* mng.getNewJobId */
        SELECT nextval('job_id_seq')
    </select>

	<select id="getUserNameAndPasswordFromInstance" parameterType="hashmap" resultType="encore.meta.mybatis.UpperKeyMap">
        /* mng.getUserNameAndPasswordFromInstance */
        SELECT meta_conn_acct_id username
             , REPLACE(REPLACE(META_CRYPT.DECRYPT(a.meta_conn_acct_pwd, 'encore5868'),CHR(0)),CHR(1)) password
         FROM md_inst a
        WHERE a.svr_id = #{SVR_ID}
          AND a.inst_id  = #{INST_ID}
    </select>

    <select id="getPendingInstantJob" parameterType="hashmap" resultType="string">
        /* mng.getPendingInstantJob */
		select
			coalesce(max(case when h.job_id isnull then 'R' else 'P' end ), 'N')
		from
			md_job_schd s
		left outer join md_job_hist h on
			(s.job_id = h.job_id
			and s.schl_id = h.schl_id)
		where
			s.job_id = #{JOB_ID}
			and s.schl_nm like '%Instant Job'
			and coalesce(h.run_rslt::text, '') = ''
    </select>

    <delete id="deleteInstantJob" parameterType="hashmap">
        /* mng.deleteInstantJob */
        DELETE FROM md_job_schd
         WHERE job_id = #{JOB_ID}
           AND schl_id = #{SCHL_ID}
    </delete>

    <insert id="insertJob" parameterType="hashmap">
        /* mng.insertJob */
        INSERT INTO md_job
            (job_id, job_nm, use_yn, job_cat_cd, conn_acct_id
            ,conn_acct_pwd, svr_id, inst_id, job_run_dt, elps_tm
            ,job_desc, job_char_desc, job_effct, job_obj_desc, job_goal
            ,job_mngr_id, job_scpt_dir, sub_mngr_id, mjr_mngr_id, creat_dt
            ,creat_user_id, last_alter_dt, last_alter_user_id, conn_alias_nm, acct_nm
            ,db_id)
        VALUES
            (#{JOB_ID}, #{JOB_NM}, 'Y', LPAD(#{JOB_CAT_CD}, 4, '0'), #{CONN_USER_NM}
            ,META_CRYPT.CRYPT(#{CONN_USER_PWD}, 'encore5868'), #{SVR_ID}, #{INST_ID}, NULL, NULL
            ,#{JOB_DESC, jdbcType=VARCHAR}, NULL, NULL, NULL, NULL
            ,NULL, NULL, #{requestUserId}, #{requestUserId}, SYSDATE
            ,#{requestUserId}, NULL, NULL, #{CONN_ALIAS, jdbcType=VARCHAR}, #{ACCT_NM, jdbcType=VARCHAR},
        <choose>
            <when test="JOB_CAT_CD == &quot;0011&quot;">#{DB_ID}||'.'||#{ACCT_ID}</when>
            <otherwise>#{DB_ID, jdbcType=VARCHAR}</otherwise>
        </choose>
            )
    </insert>

    <insert id="insertSchedule" parameterType="hashmap">
        /* mng.insertSchedule */
        <selectKey keyProperty="SCHL_ID" resultType="string" order="BEFORE">
     	SELECT nextval('schd_id_seq') as SCHL_ID
		</selectKey>
        INSERT INTO md_job_schd(schl_id, job_id, schl_nm, use_yn, freq_type
            ,freq_rcrr_intrv, freq_intrv, freq_rltv_intrv, next_run_dt, aval_st_dt
            ,aval_end_dt
            ,freq_day_type, freq_day_intrv, actv_st_tm, actv_end_tm, creat_dt
            ,creat_user_id, last_alter_dt, last_alter_user_id)
        VALUES (#{SCHL_ID}, #{JOB_ID}, #{SCHL_NM}, 'Y', LPAD(#{FREQ_TYPE}, 4, '0'),
             #{FREQ_RCRR_INTRV}, #{FREQ_INTRV}, #{FREQ_RLTV_INTRV}, #{NEXT_RUN_DT}, #{AVAL_ST_DT},
             CASE WHEN #{FREQ_TYPE}=0 THEN  TO_CHAR(TO_DATE(#{AVAL_ST_DT}, 'YYYYMMDDHH24MISS') + 2, 'YYYYMMDDHH24MISS')  ELSE #{AVAL_END_DT} END ,
             NULL, NULL, #{ACTV_ST_TM}, NULL, LOCALTIMESTAMP,
             #{requestUserId}, NULL ,NULL)
    </insert>

    <update id="updateJob" parameterType="hashmap">
        /* mng.updateJob */
        UPDATE md_job
           SET job_nm = #{JOB_NM}
             , use_yn = 'Y'
             , job_cat_cd = LPAD(#{JOB_CAT_CD}, 4, '0')
             , conn_acct_id = #{CONN_USER_NM}
             , conn_acct_pwd = META_CRYPT.CRYPT(#{CONN_USER_PWD}, 'encore5868')
             , svr_id= #{SVR_ID}
             , inst_id= #{INST_ID}
             , db_id = <choose><when test="JOB_CAT_CD == &quot;0011&quot;">#{DB_ID}||'.'||#{ACCT_ID}</when><otherwise>#{DB_ID}</otherwise></choose>
             , job_run_dt = NULL
             , elps_tm = NULL
             , job_desc= #{JOB_DESC, jdbcType=VARCHAR}
             , job_char_desc = NULL
             , job_effct = NULL
             , job_obj_desc = NULL
             , job_goal = NULL
             , job_mngr_id = NULL
             , job_scpt_dir = NULL
             , sub_mngr_id = #{requestUserId}
             , mjr_mngr_id = #{requestUserId}
             , creat_dt = SYSDATE
             , creat_user_id = #{requestUserId}
             , last_alter_dt = NULL
             , last_alter_user_id = null
             , conn_alias_nm = #{CONN_ALIAS, jdbcType=VARCHAR}
             , acct_nm = #{ACCT_NM, jdbcType=VARCHAR}
         WHERE JOB_ID = #{JOB_ID}
    </update>

    <update id="updateSchedule" parameterType="hashmap">
        /* mng.updateSchedule */
  		  UPDATE md_job_schd
           SET schl_nm = #{SCHL_NM}
             , use_yn = 'Y'
             , freq_type = LPAD(#{FREQ_TYPE}, 4, '0')
             , freq_rcrr_intrv = #{FREQ_RCRR_INTRV}
             , freq_intrv = #{FREQ_INTRV}
             , freq_rltv_intrv = #{FREQ_RLTV_INTRV}
             , next_run_dt = #{NEXT_RUN_DT}
             , aval_st_dt = TO_CHAR(TO_DATE(#{AVAL_ST_DT}, 'YYYY-MM-DD HH24:MI:SS'), 'YYYYMMDDHH24MISS')
             , aval_end_dt =  CASE  WHEN #{FREQ_TYPE} =  0 THEN  TO_CHAR(TO_DATE(#{AVAL_ST_DT}, 'YYYY-MM-DD HH24:MI:SS') + 2, 'YYYYMMDDHH24MISS') ELSE  TO_CHAR(TO_DATE(#{AVAL_END_DT}, 'YYYY-MM-DD HH24:MI:SS'), 'YYYYMMDDHH24MISS') END
             , freq_day_type = NULL
             , freq_day_intrv = NULL
             , actv_st_tm = #{ACTV_ST_TM}
             , actv_end_tm = NULL
             , last_alter_dt = current_timestamp
             , last_alter_user_id = #{requestUserId}
         WHERE JOB_ID = #{JOB_ID}::int8
           AND SCHL_ID = #{SCHL_ID}::int8
    </update>

    <delete id="deleteJob" parameterType="hashmap">
        /* mng.deleteJob */
        DELETE FROM md_job WHERE job_id = #{JOB_ID}
    </delete>

    <delete id="deleteJobSchd" parameterType="hashmap">
        /* mng.deleteJobSchd */
        DELETE FROM md_job_schd WHERE job_id = #{JOB_ID}
    </delete>

    <delete id="deleteJobMngObj" parameterType="hashmap">
        /* mng.deleteJobMngObj */
        DELETE FROM md_mng_obj WHERE job_id = #{JOB_ID}
    </delete>

    <update id="updateSuspendJob" parameterType="hashmap">
        /* mng.updateSuspendJob */
        UPDATE md_job
           SET use_yn = #{USE_YN}
         WHERE job_id = #{JOB_ID}
    </update>

    <!-- 서버 삭제시 job 삭제 (이력 꺾음)-->
    <update id="deleteJobFromDeleteServer" parameterType="hashmap">
        /* mng.deleteJobFromDeleteServer */
        UPDATE md_job
           SET use_yn ='N'
         WHERE svr_id = #{SVR_ID}
           AND inst_id = #{INST_ID}
           <if test="@Ognl@isNotEmpty(DB_ID)">
           AND DB_ID = #{DB_ID}
           </if>;

        UPDATE md_job_schd
           SET use_yn ='N'
         WHERE job_id IN ( SELECT job_id
                             FROM md_job
                            WHERE svr_id = #{SVR_ID}
                              AND inst_id = #{INST_ID}
                              <if test="@Ognl@isNotEmpty(DB_ID)">
                              AND DB_ID = #{DB_ID}
                              </if> );

        UPDATE md_mng_obj
           SET mng_yn ='N'
         WHERE svr_id = #{SVR_ID}
           AND inst_id = #{INST_ID}
           <if test="@Ognl@isNotEmpty(DB_ID)">
           AND DB_ID = #{DB_ID}
           </if>;
    </update>
<!-- deprecated
    <insert id="insertManageObject" parameterType="hashmap">
        /* mng.insertManageObject */
        INSERT INTO md_mng_obj
            (job_id, obj_type, svr_id, inst_id, db_id
            ,acct_id, lock_id, mng_yn, creat_dt, creat_user_id
            ,last_alter_dt, last_alter_user_id)
        SELECT #{JOB_ID} job_id, obj_type, svr_id, inst_id, db_id
             , acct_id, lock_id, mng_yn, creat_dt, creat_user_id
             , last_alter_dt, last_alter_user_id
          FROM (SELECT LPAD(no, 4, '0') obj_type, #{SVR_ID} svr_id, #{INST_ID} inst_id, #{DB_ID} db_id
                     , #{SCHEMA_NAME} acct_id, NULL lock_id, #{SELECT_YN, jdbcType=VARCHAR} mng_yn, SYSDATE creat_dt, #{CREATE_USER_ID} creat_user_id
                     , SYSDATE last_alter_dt, #{CREATE_USER_ID} last_alter_user_id
                  FROM copy_t
                 WHERE no IN (1, 2, 4, 5, 6, 7, 9, 10, 11, 12, 13, 14, 20, 21, 23, 24, 99)
                   AND LPAD(#{JOB_CAT_CD}, 4, '0') = '0001'

                 UNION ALL

                SELECT LPAD(no, 4,'0') obj_type, #{SVR_ID} svr_id, #{INST_ID} inst_id, #{DB_ID} db_id
                     , #{SCHEMA_NAME} acct_id, NULL lock_id, #{SELECT_YN, jdbcType=VARCHAR} mng_yn, SYSDATE creat_dt, #{CREATE_USER_ID} creat_user_id
                     , SYSDATE last_alter_dt, #{CREATE_USER_ID} last_alter_user_id
                  FROM copy_t
                 WHERE no IN (1, 2, 10, 11, 12, 13, 99)
                   AND LPAD(#{JOB_CAT_CD}, 4, '0') = '0002'

                 UNION ALL

                SELECT '0098' obj_type, #{SVR_ID} svr_id, #{INST_ID} inst_id, #{DB_ID} db_id
                     , #{SCHEMA_NAME} acct_id, NULL lock_id, #{SELECT_YN, jdbcType=VARCHAR} mng_yn, SYSDATE creat_dt, #{CREATE_USER_ID} creat_user_id
                     , SYSDATE last_alter_dt, #{CREATE_USER_ID} last_alter_user_id
                  FROM dual
                 WHERE LPAD(#{JOB_CAT_CD}, 4, '0') = '0003')
    </insert>

    <insert id="insertManageObject" parameterType="hashmap">
        /* mng.insertManageObject */
        INSERT INTO md_mng_obj
            (job_id, obj_type, svr_id, inst_id, db_id
            ,acct_id, lock_id, mng_yn, creat_dt, creat_user_id
            ,last_alter_dt, last_alter_user_id)
        SELECT #{JOB_ID} job_id, obj_type, svr_id, inst_id, db_id
             , acct_id, lock_id, mng_yn, creat_dt, creat_user_id
             , last_alter_dt, last_alter_user_id
          FROM (
                SELECT 'ALL' obj_type, #{SVR_ID} svr_id, #{INST_ID} inst_id, #{DB_ID} db_id
                     , #{SCHEMA_NAME} acct_id, NULL lock_id, #{SELECT_YN, jdbcType=VARCHAR} mng_yn, SYSDATE creat_dt, #{requestUserId} creat_user_id
                     , SYSDATE last_alter_dt, #{requestUserId} last_alter_user_id
                  FROM dual
                 WHERE #{DB_TYPE} = '0010'
                union all
                SELECT cd_id as obj_type, #{SVR_ID} svr_id, #{INST_ID} inst_id, #{DB_ID} db_id
                     , #{SCHEMA_NAME} acct_id, NULL lock_id, #{SELECT_YN, jdbcType=VARCHAR} mng_yn, SYSDATE creat_dt, #{requestUserId} creat_user_id
                     , SYSDATE last_alter_dt, #{requestUserId} last_alter_user_id
                  FROM ms_code
                 WHERE #{DB_TYPE} != '0010'
                   AND up_cd_id = '0014'
                   AND lang_cd = #{langCd}
                   AND cd_id IN ('0001', '0002', '0004', '0005', '0006', '0007', '0009', '0010', '0011', '0012', '0013', '0014', '0020', '0021', '0023', '0024', '0099')
                   AND LPAD(#{JOB_CAT_CD}, 4, '0') = '0001'
                 UNION ALL
                SELECT cd_id as obj_type, #{SVR_ID} svr_id, #{INST_ID} inst_id, #{DB_ID} db_id
                     , #{SCHEMA_NAME} acct_id, NULL lock_id, #{SELECT_YN, jdbcType=VARCHAR } mng_yn, SYSDATE creat_dt, #{requestUserId} creat_user_id
                     , SYSDATE last_alter_dt, #{requestUserId} last_alter_user_id
                  FROM ms_code
                 WHERE #{DB_TYPE} != '0010'
                   AND up_cd_id = '0014'
                   AND lang_cd = #{langCd}
                   AND cd_id IN ('0001', '0002', '0010', '0011', '0012', '0013', '0099')
                   AND LPAD(#{JOB_CAT_CD}, 4, '0') = '0002'
                 UNION ALL
                SELECT '0098' obj_type, #{SVR_ID} svr_id, #{INST_ID} inst_id, #{DB_ID} db_id
                     , #{SCHEMA_NAME} acct_id, NULL lock_id, #{SELECT_YN, jdbcType=VARCHAR } mng_yn, SYSDATE creat_dt, #{requestUserId} creat_user_id
                     , SYSDATE last_alter_dt, #{requestUserId} last_alter_user_id
                  FROM dual
                 WHERE LPAD(#{JOB_CAT_CD}, 4, '0') = '0003'
                  UNION ALL
                 SELECT 'ALL' obj_type, #{SVR_ID} svr_id, #{INST_ID} inst_id, #{DB_ID} db_id
                     , #{SCHEMA_NAME} acct_id, NULL lock_id, #{SELECT_YN, jdbcType=VARCHAR} mng_yn, SYSDATE creat_dt, #{requestUserId} creat_user_id
                     , SYSDATE last_alter_dt, #{requestUserId} last_alter_user_id
                  FROM dual
                 WHERE #{DB_TYPE} != '0010'
                   AND LPAD(#{JOB_CAT_CD}, 4, '0') = '0100')
    </insert>
-->
    <insert id="insertManageObject" parameterType="hashmap">
         /* mng.insertManageObject */
        INSERT INTO md_mng_obj
            (job_id, obj_type, svr_id, inst_id, db_id
            ,acct_id, lock_id, mng_yn, creat_dt, creat_user_id
            ,last_alter_dt, last_alter_user_id)
        SELECT #{JOB_ID}::int8 job_id, obj_type, svr_id, inst_id, db_id
             , acct_id, lock_id, mng_yn, creat_dt, creat_user_id
             , last_alter_dt, last_alter_user_id
          FROM (
                select t1.*  FROM (
                SELECT 'ALL' obj_type, #{SVR_ID} svr_id, #{INST_ID} inst_id, #{DB_ID} db_id
                     , #{SCHEMA_NAME} acct_id, NULL lock_id, #{SELECT_YN, jdbcType=VARCHAR} mng_yn, current_timestamp creat_dt, #{requestUserId} creat_user_id
                     , current_timestamp last_alter_dt, #{requestUserId} last_alter_user_id ) t1
                 WHERE #{DB_TYPE} = '0010'
                union all
                SELECT cd_id as obj_type, #{SVR_ID} svr_id, #{INST_ID} inst_id, #{DB_ID} db_id
                     , #{SCHEMA_NAME} acct_id, NULL lock_id, #{SELECT_YN, jdbcType=VARCHAR} mng_yn, current_timestamp creat_dt, #{requestUserId} creat_user_id
                     , current_timestamp last_alter_dt, #{requestUserId} last_alter_user_id
                  FROM ms_code
                 WHERE #{DB_TYPE} != '0010'
                   AND up_cd_id = '0014'
                   AND lang_cd = #{langCd}
                   AND cd_id IN ('0001', '0002', '0004', '0005', '0006', '0007', '0009', '0010', '0011', '0012', '0013', '0014', '0020', '0021', '0023', '0024', '0099')
                   AND LPAD(#{JOB_CAT_CD}, 4, '0') = '0001'
                 UNION ALL
                SELECT cd_id as obj_type, #{SVR_ID} svr_id, #{INST_ID} inst_id, #{DB_ID} db_id
                     , #{SCHEMA_NAME} acct_id, NULL lock_id, #{SELECT_YN, jdbcType=VARCHAR } mng_yn, current_timestamp creat_dt, #{requestUserId} creat_user_id
                     , current_timestamp last_alter_dt, #{requestUserId} last_alter_user_id
                  FROM ms_code
                 WHERE #{DB_TYPE} != '0010'
                   AND up_cd_id = '0014'
                   AND lang_cd = #{langCd}
                   AND cd_id IN ('0001', '0002', '0010', '0011', '0012', '0013', '0099')
                   AND LPAD(#{JOB_CAT_CD}, 4, '0') = '0002'
                 UNION ALL
                select t2.*  FROM (
                SELECT '0098' obj_type, #{SVR_ID} svr_id, #{INST_ID} inst_id, #{DB_ID} db_id
                     , #{SCHEMA_NAME} acct_id, NULL lock_id, #{SELECT_YN, jdbcType=VARCHAR } mng_yn, current_timestamp creat_dt, #{requestUserId} creat_user_id
                     , current_timestamp last_alter_dt, #{requestUserId} last_alter_user_id ) t2
                 WHERE LPAD(#{JOB_CAT_CD}, 4, '0') = '0003'
                  UNION ALL
                 select t3.* FROM (
                 SELECT 'ALL' obj_type, #{SVR_ID} svr_id, #{INST_ID} inst_id, #{DB_ID} db_id
                     , #{SCHEMA_NAME} acct_id, NULL lock_id, #{SELECT_YN, jdbcType=VARCHAR} mng_yn, current_timestamp creat_dt, #{requestUserId} creat_user_id
                     , current_timestamp last_alter_dt, #{requestUserId} last_alter_user_id ) t3
                 WHERE #{DB_TYPE} != '0010'
                   AND LPAD(#{JOB_CAT_CD}, 4, '0') = '0100')
	</insert>

    <update id="updateManageObject" parameterType="hashmap">
        /* mng.updateManageObject */
        UPDATE md_mng_obj
           SET mng_yn = #{SELECT_YN, jdbcType=VARCHAR}
             , last_alter_dt = localtimestamp	
             , last_alter_user_id = #{requestUserId}
         WHERE job_id = #{JOB_ID}
        <if test="@Ognl@isNotEmpty(SVR_ID)">
           AND svr_id = #{SVR_ID}
        </if>
        <if test="@Ognl@isNotEmpty(INST_ID)">
           AND inst_id = #{INST_ID}
        </if>
        <if test="@Ognl@isNotEmpty(DB_ID)">
           AND db_id = #{DB_ID}
        </if>
        <if test="@Ognl@isNotEmpty(SCHEMA_NAME)">
           AND acct_id = #{SCHEMA_NAME}
        </if>
    </update>

    <update id="updateMdMngObj" parameterType="hashmap">
        /* mng.updateMdMngObj */
        UPDATE md_mng_obj
           SET mng_yn = 'N'
             , last_alter_dt = LOCALTIMESTAMP
             , last_alter_user_id = #{requestUserId}
         WHERE job_id = #{JOB_ID}
           AND svr_id = #{SVR_ID}
           AND inst_id = #{INST_ID}
           AND db_id = #{DB_ID}
           AND acct_id NOT IN
        <foreach collection="SCHEMA_LIST" item="SCHEMA" open="(" separator="," close=")">
            #{SCHEMA.SCHEMA_NAME}
        </foreach>
    </update>

    <delete id="deleteManageObject" parameterType="hashmap">
        /* mng.deleteManageObject */
        DELETE FROM md_mng_obj
         WHERE job_id = #{JOB_ID}
        <if test="@Ognl@isNotEmpty(SVR_ID)">
           AND svr_id = #{SVR_ID}
        </if>
        <if test="@Ognl@isNotEmpty(INST_ID)">
           AND inst_id = #{INST_ID}
        </if>
        <if test="@Ognl@isNotEmpty(DB_ID)">
           AND db_id = #{DB_ID}
        </if>
        <if test="@Ognl@isNotEmpty(SCHEMA_NAME)">
           AND acct_id = #{SCHEMA_NAME}
        </if>
    </delete>

    <insert id="insertManageBr" parameterType="hashmap">
      INSERT /* mng.insertManageBr */ INTO MD_MNG_BR( JOB_ID, BR_ID, BR_NM, LOCK_ID, CREAT_DT
                        , LAST_ALTER_DT, CREAT_USER_ID, LAST_ALTER_USER_ID )
        VALUES ( #{JOB_ID}, #{BR_ID}, #{BR_NM}, null, LOCALTIMESTAMP, null, #{CREATE_USER_ID}, null )
    </insert>

	<select id="getJobInfo" parameterType="hashmap" resultType="encore.meta.mybatis.UpperKeyMap">
        SELECT /* mng.getJobInfo */ j.job_id
              ,job_nm
              ,v.svr_id || '.' || i.inst_id ||'.' || j.db_id "TARGET_ID"
              ,cd1.cd_id "JOB_CAT_CD"
              ,s2.freq_type
              ,s2.actv_st_tm
              ,TO_DATE(s2.next_run_dt, 'YYYYMMDDHH24MISS') "NEXT_RUN_DT"
              ,TO_DATE(s2.aval_st_dt, 'YYYYMMDDHH24MISS') "AVAL_ST_DT"
              ,TO_DATE(s2.aval_end_dt, 'YYYYMMDDHH24MISS') "AVAL_END_DT"
              ,u1.user_id "PIC_ID"
              ,u2.user_nm "ADMIN_ID"
              ,s2.schl_nm
              ,j.job_cat_cd
              ,j.dq_biz_name
              ,j.dq_biz_id
          FROM md_job j
              ,(SELECT job_id, MIN(next_run_dt || schl_id) strcat FROM md_job_schd s GROUP BY job_id) s1
              ,md_job_schd s2
              ,md_inst i
              ,md_svr v
              ,ms_code cd1
              ,ms_code cd2
              ,usr_user u1
              ,usr_user u2
              ,md_db d
         WHERE j.job_id = #{jobId}
           AND j.inst_id = i.inst_id
           AND j.svr_id = i.svr_id
           AND d.svr_id = i.svr_id
           AND d.inst_id = i.inst_id
           AND j.svr_id = v.svr_id
           AND j.job_cat_cd = cd1.cd_id
           AND cd1.up_cd_id = '0119'
           AND cd1.lang_cd = #{langCd}
           AND cd2.up_cd_id = '0120'
           AND cd2.lang_cd = #{langCd}
           AND j.sub_mngr_id = u1.user_id
           AND j.mjr_mngr_id = u2.user_id
           AND s1.job_id = j.job_id
           AND s1.job_id = s2.job_id
           AND SUBSTR(s1.strcat, 15) = s2.schl_id
           AND s2.freq_type = cd2.cd_id

         UNION ALL

        SELECT j.job_id
              ,job_nm
              ,' ' "TARGET_ID"
              ,cd1.cd_id "JOB_CAT_CD"
              ,s2.freq_type
              ,s2.actv_st_tm
              ,TO_DATE(s2.next_run_dt, 'YYYYMMDDHH24MISS') "NEXT_RUN_DT"
              ,TO_DATE(s2.aval_st_dt, 'YYYYMMDDHH24MISS') "AVAL_ST_DT"
              ,TO_DATE(s2.aval_end_dt, 'YYYYMMDDHH24MISS') "AVAL_END_DT"
              ,u1.user_id "PIC_ID"
              ,u2.user_nm "ADMIN_ID"
              ,s2.schl_nm
              ,j.job_cat_cd
          FROM md_job j
              ,(SELECT job_id, MIN(next_run_dt || schl_id) strcat FROM md_job_schd s GROUP BY job_id) S1
              ,md_job_schd s2
              ,ms_code cd1
              ,ms_code cd2
              ,usr_user u1
              ,usr_user u2
         WHERE j.job_id = #{jobId}
           AND j.job_cat_cd = cd1.cd_id
           AND cd1.up_cd_id = '0119'
           AND cd1.lang_cd = #{langCd}
           AND cd2.up_cd_id = '0120'
           AND cd2.lang_cd = #{langCd}
           AND j.sub_mngr_id = u1.user_id
           AND j.mjr_mngr_id = u2.user_id
           AND s1.job_id = j.job_id
           AND s1.job_id = s2.job_id
           AND SUBSTR(s1.strcat, 15) = s2.schl_id
           AND s2.freq_type = cd2.cd_id
           AND j.job_cat_cd = '0010'
           AND j.conn_acct_id = 'NULL'
    </select>

	<select id="getUserAppAreaList" parameterType="hashmap" resultType="encore.meta.mybatis.UpperKeyMap">
        SELECT /* mng.getUserAppAreaList */
               a.user_id
              ,a.biz_id
              ,a.alloc_id
              ,a.alloc_gbn_cd
              ,a.prv_gbn
              ,NVL(c.biz_name, d.app_biz_name) app_biz_name
              ,b.role_nm
              ,b.role_desc
          FROM usr_alloc a
              ,usr_role b
              ,mm_biz_area c
              ,ma_app_area d
         WHERE a.user_id = #{userId}
           AND a.alloc_gbn_cd = '0005'
           AND a.alloc_id = b.role_id
           AND a.biz_id = c.biz_id(+)
           AND c.expireddate(+) = '99999999999999'
           AND a.biz_id = d.app_biz_id(+)
           AND d.aval_end_dt(+) = '99991231235959'
           AND (c.biz_id IS NOT NULL OR d.app_biz_id IS NOT NULL)
         ORDER BY c.biz_name, b.role_nm
    </select>

	<select id="getUserDqBizAreaList" parameterType="hashmap" resultType="encore.meta.mybatis.UpperKeyMap">
        SELECT /* mng.getUserDqBizAreaList */
               a.user_id
              ,a.biz_id
              ,a.alloc_id
              ,a.alloc_gbn_cd
              ,a.prv_gbn
              ,c.biz_name
              ,b.role_nm
              ,b.role_desc
          FROM usr_alloc a
              ,usr_role b
              ,mdq_bizarea/*@KAMCO*/ c
         WHERE a.user_id = #{userId}
           AND a.alloc_gbn_cd = '0006'
           AND a.alloc_id = b.role_id
           AND a.biz_id = c.biz_id
           AND c.expireddate = '99991231235959'/*'99991231235959'*/
         ORDER BY c.biz_name, b.role_nm
    </select>

    <insert id="insertUsrAlloc" parameterType="hashmap">
        /* mng.insertUsrAlloc */
	   INSERT INTO usr_alloc(user_id, biz_id, alloc_id, alloc_gbn_cd, prv_gbn, start_dt, end_dt)
        SELECT #{userId}, #{bizId}, #{allocId}, #{allocGbnCd}, #{prvGbn, jdbcType=VARCHAR}, TO_CHAR(LOCALTIMESTAMP,'YYYYMMDD'), '99991231'
         WHERE NOT EXISTS (SELECT ''
                             FROM v_usr_alloc b
                            WHERE b.user_id = #{userId}
                              AND b.biz_id = #{bizId}
                              AND b.alloc_id = #{allocId})
    </insert>

    <delete id="updateUsrAlloc" parameterType="hashmap">
        /* mng.updateUsrAlloc */
        UPDATE usr_alloc
           SET prv_gbn = #{prvGbn}
         WHERE user_id = #{userId}
           AND biz_id = #{bizId}
           AND alloc_id = #{allocId}
           AND alloc_gbn_cd = #{allocGbnCd}
    </delete>

    <delete id="deleteUsrAlloc" parameterType="hashmap">
        /* mng.deleteUsrAlloc */
        DELETE FROM usr_alloc
         WHERE user_id = #{userId}
           AND biz_id = #{bizId}
        <if test="@Ognl@isNotEmpty(allocId)">
           AND alloc_id = #{allocId}
        </if>
           AND alloc_gbn_cd = #{allocGbnCd}
    </delete>

    <delete id="deleteUsrAllocByUserId" parameterType="hashmap">
        /* mng.deleteUsrAllocByUserId */
        DELETE FROM usr_alloc
         WHERE user_id = #{userId}
           AND ALLOC_GBN_CD = '0005'
    </delete>

    <delete id="deleteUsrAllocByBizId" parameterType="hashmap">
        /* mng.deleteUsrAllocByBizId */
        DELETE FROM usr_alloc
         WHERE biz_id = #{bizId}
    </delete>

	<select id="getAllocatedUser" parameterType="hashmap" resultType="encore.meta.mybatis.UpperKeyMap">
        /* mng.getAllocatedUser */
        <include refid="pagingHeader"/>
        SELECT a.user_id
             , u.user_nm
             , u.login_id
             , (SELECT dept_nm FROM usr_dept WHERE dept_id = u.dept_id AND del_yn = 'N') post
             , a.prv_gbn
             , a.alloc_id
             , COUNT(1) OVER() total_row_count
          FROM v_usr_alloc a, usr_user u
         WHERE 1 = 1
        <if test="@Ognl@isNotEmpty(bizId)">
           AND biz_id = #{bizId}
        </if>
        <if test="@Ognl@isNotEmpty(allocId)">
           AND alloc_id = #{allocId}
        </if>
           AND alloc_gbn_cd = #{allocGbnCd}
           AND a.user_id = u.user_id
        <if test="@Ognl@isNotEmpty(LOGIN_ID_TXT)">
           AND u.login_id LIKE #{LOGIN_ID_TXT}
        </if>
        <if test="@Ognl@isNotEmpty(USER_NM_TXT)">
           AND u.user_nm LIKE #{USER_NM_TXT}
        </if>
           AND a.end_dt = '99991231'
         ORDER BY u.user_nm
        <include refid="pagingFooter"/>
    </select>

    <delete id="deleteAllocatedUser" parameterType="hashmap">
        /* mng.deleteAllocatedUser */
        DELETE FROM usr_alloc
         WHERE alloc_id = #{allocId}
           AND alloc_gbn_cd = #{allocGbnCd}
        <if test="@Ognl@isNotEmpty(bizId)">
           AND biz_id = #{bizId}
        </if>
           AND user_id IN
        <foreach item="item" collection="userIds" open="(" separator="," close=")">
        #{item}
        </foreach>
    </delete>

    <insert id="insertAllocatedUser" parameterType="hashmap">
        /* mng.insertAllocatedUser */
        MERGE INTO
             usr_alloc
        USING DUAL
           ON ( USER_ID = #{userId}
            AND ALLOC_GBN_CD = #{allocGbnCd}
        <if test="@Ognl@isNotEmpty(bizId)">
            AND BIZ_ID = #{bizId}
        </if>
            AND ALLOC_ID = #{allocId})
        WHEN NOT MATCHED THEN
            INSERT
                (user_id, alloc_gbn_cd, alloc_id, biz_id, start_dt, end_dt, prv_gbn, dept_id, priv_biz_gbn_cd)
            VALUES
            (#{userId}, #{allocGbnCd}, #{allocId}
        <if test="@Ognl@isNotEmpty(bizId)">
            ,#{bizId}
        </if>
        <if test="@Ognl@isEmpty(bizId)">
            ,'NONE'
        </if>
            ,TO_CHAR(SYSDATE,'YYYYMMDD'), 99991231, #{privilege}, null, null)
    </insert>

    <update id="updateAllocatedUser" parameterType="hashmap">
        UPDATE /* mng.updateAllocatedUser */ usr_alloc
           SET prv_gbn = #{privilege}
         WHERE alloc_id = #{areaId}
           AND user_id = #{userId}
           AND alloc_gbn_cd = #{allocGbnCd}
    </update>

	<select id="getAllocatedUserByDqBizArea" parameterType="hashmap" resultType="encore.meta.mybatis.UpperKeyMap">
        SELECT /* mng.getAllocatedUserByDqBizArea */ a.user_id, u.user_nm, u.login_id, u.post, a.prv_gbn, a.alloc_id
          FROM usr_alloc a, usr_user u
         WHERE alloc_id = #{areaId}
           AND alloc_gbn_cd = '0006'
           AND a.user_id = u.user_id
           AND a.end_dt = '99991231'
         ORDER BY u.user_nm
    </select>

    <delete id="deleteAllocatedUserByDqBizArea" parameterType="hashmap">
        DELETE /* mng.deleteAllocatedUserByDqBizArea */ FROM usr_alloc
         WHERE alloc_id = #{dqBizAreaId}
           AND alloc_gbn_cd = '0006'
           AND user_id IN
        <foreach item="item" collection="userIds" open="(" separator="," close=")">
        #{item}
        </foreach>
    </delete>

    <insert id="insertAllocatedUserByDqBizArea" parameterType="hashmap">
 	   INSERT INTO /* mng.insertAllocatedUserByDqBizArea */ USR_ALLOC
        VALUES (#{userId}, '0006', #{dqBizAreaId}, 'NONE', TO_CHAR(LOCALTIMESTAMP,'YYYYMMDD'), 99991231, #{privilege}, null, null)
    </insert>

    <update id="updateAllocatedUserByDqBizArea" parameterType="hashmap">
        UPDATE /* mng.updateAllocatedUserByDqBizArea */ usr_alloc
           SET prv_gbn = #{privilege}
         WHERE alloc_id = #{dqBizAreaId}
           AND user_id = #{userId}
           AND alloc_gbn_cd = '0006'
    </update>

    <!--deprecated
    <delete id="deleteSchedule" parameterType="hashmap">
        /* mng.deleteSchedule */
        DELETE FROM md_job_schd WHERE job_id = #{JOB_ID}
    </delete>
    -->

    <!--deprecated
    <delete id="deleteManageModel" parameterType="hashmap">
        /* mng.deleteManageModel */
        DELETE FROM md_mng_model WHERE job_id = #{JOB_ID}
    </delete>
    -->

    <!--deprecated
    <delete id="deleteManageObject" parameterType="hashmap">
        DELETE FROM /* mng.deleteManageObject */ md_mng_obj WHERE job_id = #{JOB_ID}
    </delete>
    -->

	<select id="getLoginInfo" parameterType="java.util.Map" resultType="encore.meta.mybatis.UpperKeyMap">
		SELECT /* mng.getLoginInfo */
               DISTINCT user_id
              ,login_id
              ,password
              ,user_nm
              ,access_yn
              ,last_chg_dt
          FROM usr_user
         WHERE login_id = #{loginId}
           AND end_dt <![CDATA[>=]]> to_char(LOCALTIMESTAMP,'yyyymmdd')  LIMIT 1
    </select>

    <update id="updateUserPassword" parameterType="hashmap">
        UPDATE /* mng.updateUserPassword */ usr_user
           SET password = #{encNewPassword}
              ,last_chg_dt = #{lastChgDt}
         WHERE user_id = #{userId}
           AND end_dt <![CDATA[>=]]> to_char(LOCALTIMESTAMP,'yyyymmdd')
    </update>

    <update id="updateAllocatedUserByArea" parameterType="hashmap">
        UPDATE /* mng.updateAllocatedUserByArea */ usr_alloc
           SET prv_gbn = #{privilege}
         WHERE alloc_id = #{areaId}
           AND user_id = #{userId}
           AND alloc_gbn_cd = '0004'
    </update>

	<select id="getSignerList" parameterType="hashmap" resultType="encore.meta.mybatis.UpperKeyMap">
        /* mng.getSignerList */
        SELECT a.user_id, a.user_nm, b.alloc_id, c.role_nm, d.dept_nm
          FROM usr_user a, usr_alloc b, usr_role c, usr_dept d
         WHERE a.user_id = b.user_id
           AND b.alloc_id = c.role_id
           AND b.alloc_gbn_cd = '0003'
           AND a.end_dt <![CDATA[>=]]> to_char(localtime,'yyyymmdd')
           AND b.alloc_id = #{SIGNER_ID}
           AND a.dept_id = d.dept_id
           AND a.dept_id IN (SELECT ud.dept_id
                               FROM usr_user u, usr_dept d, usr_dept ud
                              WHERE u.user_id = #{requestUserId}
                                and u.dept_id = d.dept_id
                                and d.up_dept_id = ud.up_dept_id)
    </select>

	<select id="getInstNmCnt" parameterType="hashmap" resultType="encore.meta.mybatis.UpperKeyMap">
        /* mng.getInstNmCnt */
        SELECT COUNT(*) cnt FROM md_inst WHERE inst_nm = #{INST_NM}
    </select>

	<select id="getUsrMenuForLocale" parameterType="hashmap" resultType="encore.meta.mybatis.UpperKeyMap">
        /* mng.getUsrMenuForLocale */
        SELECT *
          FROM ms_term
         WHERE menu_abbr = #{MENU_ABBR}
        <if test="useMultiLanguage == &quot;N&quot; or useMultiLanguage == &quot;false&quot;">
           AND lang_cd = #{defaultLocale}
        </if>
         ORDER BY lang_cd ASC
    </select>

    <select id="getUsrMenuCntForLocale" parameterType="hashmap" resultType="int">
        /* mng.getUsrMenuCntForLocale */
        SELECT COUNT(*) cnt FROM ms_term WHERE menu_abbr = #{MENU_ABBR} AND lang_cd = #{LANG_CD}
    </select>

    <insert id="insertUsrMenu" parameterType="hashmap">
        /* mng.insertUsrMenu */
        INSERT INTO usr_menu
            (menu_id, menu_abbr, menu_nm, prg_knd_cd, menu_pid, menu_desc, order_no, use_yn)
        VALUES
            (#{MENU_ID}, #{MENU_ABBR}, #{MENU_NM}, '0005', #{MENU_PID}, #{MENU_DESC, jdbcType=VARCHAR}, #{ORDER_NO}, #{USE_YN})
    </insert>

    <update id="updateUsrMenu" parameterType="hashmap">
        /* mng.updateUsrMenu */
        UPDATE usr_menu
        <set>
            <choose>
                <when test="@Ognl@isNotEmpty(UPDATE_ON_LIST)">
                    <if test="UPDATE_ON_LIST == 'true'">
                        order_no = ${ORDER_NO},
                        use_yn = #{USE_YN},
                    </if>
                </when>
                <otherwise>
                    <if test="@Ognl@isNotEmpty(MENU_NM)">menu_nm = #{MENU_NM},</if>
                    <if test="@Ognl@isNotEmpty(ORDER_NO)">order_no = ${ORDER_NO},</if>
                    <if test="@Ognl@isNotEmpty(MENU_ABBR)">menu_abbr = #{MENU_ABBR},</if>
                    <if test="@Ognl@isNotEmpty(MENU_PID)">menu_pid = #{MENU_PID},</if>
                    <if test="@Ognl@isNotEmpty(USE_YN)">use_yn = #{USE_YN},</if>
                    menu_desc = #{MENU_DESC, jdbcType=VARCHAR},
                </otherwise>
            </choose>
        </set>
         WHERE menu_id = #{MENU_ID}
    </update>

    <update id="updateUsrMenuOrderNoAfterUpdate" parameterType="hashmap">
        /* mng.updateUsrMenuOrderNoAfterUpdate */
        UPDATE usr_menu
           SET order_no = order_no + (${number})
         WHERE menu_pid = #{MENU_PID}
           AND menu_id != #{MENU_ID}
           AND prg_knd_cd = '0005'
           AND ${condition}
    </update>

    <update id="updateUsrMenuOrderNoBeforeInsert" parameterType="hashmap">
        /* mng.updateUsrMenuOrderNoBeforeInsert */
        UPDATE usr_menu
           SET order_no = order_no + 1
         WHERE menu_pid = #{MENU_PID}
           AND prg_knd_cd = '0005'
           AND order_no &gt;= #{ORDER_NO}
    </update>

    <update id="updateMsTermForLocale" parameterType="hashmap">
        /* mng.updateMsTermForLocale */
        UPDATE ms_term
           SET term_nm = #{TERM_NM}
              ,term_desc = #{TERM_DESC, jdbcType=VARCHAR}
         WHERE term_id = #{TERM_ID, jdbcType=VARCHAR}
           AND lang_cd = #{LANG_CD}

    </update>

    <delete id="deleteMsTermForLocale" parameterType="hashmap">
        /* mng.deleteMsTermForLocale */
        DELETE FROM ms_term WHERE term_id = #{TERM_ID} AND lang_cd = #{LANG_CD}
    </delete>

	<select id="getLoginHistory" parameterType="hashmap" resultType="encore.meta.mybatis.UpperKeyMap">
        /* mng.getLoginHistory */
        <include refid="pagingHeader"/>
		SELECT CASE WHEN coalesce(b.user_id::text, '') = '' THEN  a.user_id  ELSE b.login_id END  login_id
             , CASE WHEN coalesce(b.user_id::text, '') = '' THEN  'NO_SUCH_USER'  ELSE b.user_nm END  user_nm
             , c.dept_nm
             , b.charge_gubun
             , a.remote_ip
             , a.remote_host
             , a.login_dt
             , a.login_rslt
              ,COUNT(1) OVER () total_row_count
          FROM mm_login_hist a, usr_user b, usr_dept c
         WHERE 1 = 1
        <if test="@Ognl@isNotEmpty(startDt)">
           AND a.login_dt &gt;= #{startDt}
        </if>
        <if test="@Ognl@isNotEmpty(endDt)">
           AND a.login_dt &lt;= #{endDt}
        </if>
           AND b.user_id(+) = a.user_id
           --AND b.login_id(+) != 'admin'
           AND c.dept_id(+) = b.dept_id
        <if test="@Ognl@isNotEmpty(searchKey) and @Ognl@isNotEmpty(searchValue)">
            <if test="searchKey != 'DEPT_NM'">
           AND b.${searchKey} LIKE '%' || #{searchValue} || '%'
            </if>
            <if test="searchKey == 'DEPT_NM'">
           AND c.${searchKey} LIKE '%' || #{searchValue} || '%'
            </if>
        </if>
        <if test="@Ognl@isNotEmpty(sortParams)">
            <foreach item="item" collection="sortParams" open="ORDER BY" separator=",">
                ${item.property} ${item.direction}
            </foreach>
        </if>
        <if test="@Ognl@isEmpty(sortParams)">
         ORDER BY login_dt DESC
        </if>
        <include refid="pagingFooter"/>
    </select>

	<select id="getMenuConnHistoryList" parameterType="hashmap" resultType="encore.meta.mybatis.UpperKeyMap">
        /* mng.getMenuConnHistoryList */
        <include refid="pagingHeader"/>
		 SELECT TO_CHAR(TO_DATE(a.use_dt, 'YYYYMMDDHH24MISS'), 'YYYY-MM-DD HH24:MI:SS') use_dt
              ,b.user_nm
              ,c.term_nm menu_nm
              ,(WITH RECURSIVE cte AS (
				SELECT a.*
					 , b.term_nm::text mpath
					 , 1 lvl
                  FROM usr_menu a join ms_term b
                    on a.menu_abbr = b.menu_abbr
                   and a.use_yn = 'y'
                   and b.lang_cd = #{langCd}
                  WHERE a.menu_id = d.menu_id
  				UNION ALL
				SELECT a.*
					 , b.term_nm||' > '||c.mpath
					 , c.lvl+1
                  FROM usr_menu a join ms_term b
                    on a.menu_abbr = b.menu_abbr
                   and a.use_yn = 'y'
                   and b.lang_cd = #{langCd}
                   JOIN cte c ON (c.menu_pid = a.menu_id)
				) SELECT mpath FROM cte order by lvl desc limit 1
			  ) menu_path
             , COUNT(1) OVER() AS total_row_count
          FROM mm_menu_hist a, usr_user b, ms_term c, usr_menu d
         WHERE a.user_id = b.user_id
           AND b.login_id != 'admin'
           AND a.menu_id = c.menu_abbr
           AND a.menu_id = d.menu_abbr
           AND c.lang_cd = #{langCd}
        <if test="@Ognl@isNotEmpty(startDt)">
           AND a.use_dt &gt;= #{startDt}
        </if>
        <if test="@Ognl@isNotEmpty(endDt)">
           AND a.use_dt &lt;= #{endDt}
        </if>
        <if test="@Ognl@isNotEmpty(userNm)">
           AND b.user_nm LIKE '%' || #{userNm} || '%'
        </if>
        <if test="@Ognl@isNotEmpty(menuNm)">
           AND c.term_nm LIKE '%' || #{menuNm} || '%'
        </if>
           AND d.use_yn = 'y'
        <if test="@Ognl@isNotEmpty(sortParams)">
            <foreach item="item" collection="sortParams" open="ORDER BY" separator=",">
                ${item.property} ${item.direction}
            </foreach>
        </if>
        <if test="@Ognl@isEmpty(sortParams)">
         ORDER BY use_dt DESC
        </if>
        <include refid="pagingFooter"/>
    </select>

	<select id="getUserConnHistoryListByDate" parameterType="hashmap" resultType="encore.meta.mybatis.UpperKeyMap">
        /* mng.getUserConnHistoryListByDate */
        <include refid="pagingHeader"/>
		select	b.login_id ,
			b.user_nm ,
			c.dept_nm ,
			count(*) login_cnt ,
			count(1) over () as total_row_count
		from usr_dept c,
			mm_login_hist a
		left outer join usr_user b on
			(a.user_id = b.user_id)
		where b.login_id != 'admin'
			and b.dept_id = c.dept_id
			and a.login_rslt = '0001'
        <if test="@Ognl@isNotEmpty(startDt)">
           AND a.login_dt &gt;= #{startDt}
        </if>
        <if test="@Ognl@isNotEmpty(endDt)">
           AND a.login_dt &lt;= #{endDt}
        </if>
        <if test="@Ognl@isNotEmpty(loginId)">
           AND b.login_id LIKE '%' || #{loginId} || '%'
        </if>
        <if test="@Ognl@isNotEmpty(userNm)">
           AND b.user_nm LIKE '%' || #{userNm} || '%'
        </if>
         GROUP BY b.login_id, c.dept_nm, b.user_nm, a.login_rslt
        <if test="@Ognl@isNotEmpty(sortParams)">
            <foreach item="item" collection="sortParams" open="ORDER BY" separator=",">
                ${item.property} ${item.direction}
            </foreach>
        </if>
        <if test="@Ognl@isEmpty(sortParams)">
         ORDER BY login_cnt DESC
        </if>
        <include refid="pagingFooter"/>
    </select>
    <!-- //2014.02.11 jhkang -->

    <update id="callSyncUser" statementType="CALLABLE" parameterType="hashmap">
        { #{RET, mode=OUT, javaType=String, jdbcType=VARCHAR} = call PKG_COMMON.FN_MATCHED_DEPT_USERS }
    </update>

    <!-- //2015.06.15 skpark 부서/사용자 목록에 부서목록에서 부서가 선택된 하위 목록만 출력 -->
	<select id="getDeptList" parameterType="hashmap" resultType="encore.meta.mybatis.UpperKeyMap">
  	    WITH RECURSIVE cte AS (
	        SELECT a.*
	        	,1 lvl
	        	,ARRAY[ row_number() OVER (ORDER BY  org_order) ] as hierarchy
	          FROM usr_dept a
	          <if test="@Ognl@isEmpty(deptId)">
	          WHERE up_dept_id = 'ROOT'
	          </if>
	          <if test="@Ognl@isNotEmpty(deptId)">
	          WHERE dept_id = #{deptId}
	          </if>
	 		 UNION ALL
	        SELECT a.*
	        	,(c.lvl+1) lvl
	        	, array_append(c.hierarchy, row_number() OVER (ORDER BY  a.org_order))  as hierarchy
	          FROM usr_dept a JOIN cte c ON (c.dept_id = a.up_dept_id)
		) SELECT dept_id,dept_nm,dept_desc
	        	,CASE WHEN dept_id = (SELECT dept_id FROM usr_dept WHERE dept_id = #{deptId, jdbcType=VARCHAR}) THEN 'ROOT' ELSE up_dept_id END up_dept_id
	        	,org_order,dept_tel_no,dept_fax_no
	        	, lvl
			   , (not exists (select 1 from cte p where c.dept_id = p.up_dept_id))::varchar leaf
			FROM cte c 
			WHERE del_yn = 'N'
		   ORDER BY hierarchy
    </select>

	<select id="getDeptUserList" parameterType="hashmap" resultType="encore.meta.mybatis.UpperKeyMap">
        /* mng.getDeptUserList */
        SELECT a.user_id
             , a.login_id
             , a.user_nm
             , a.user_num
             , a.cel_phone
             , a.home_phone
             , a.office_phone
             , a.email
             , a.access_yn
             , a.post
             , b.dept_id
             , b.dept_nm
          FROM usr_user a
			LEFT OUTER JOIN usr_dept b ON (a.dept_id = b.dept_id)
         WHERE 1 = 1
        <if test="@Ognl@isNotEmpty(LOGIN_ID)">
           AND a.login_id LIKE '%' || #{LOGIN_ID} || '%'
        </if>
        <if test="@Ognl@isNotEmpty(USER_NM)">
           AND (a.user_nm LIKE '%' || #{USER_NM} || '%' OR a.user_num = #{USER_NM})
        </if>
            <if test="@Ognl@isNotEmpty(DEPT_ID)">
               AND a.dept_id IN (SELECT dept_id
                                   FROM usr_dept
                                  WHERE del_yn = 'N'
                                    AND dept_id = #{DEPT_ID}
                <if test="@Ognl@isNotEmpty(INCLUDE_CHILD_DEPT)">
                                  UNION ALL
                                 SELECT dept_id
                                   FROM usr_dept
                                  WHERE del_yn = 'N'
                                  START WITH up_dept_id = #{DEPT_ID}
                                CONNECT BY PRIOR dept_id = up_dept_id
                </if>
                                )
            </if>
            <if test="@Ognl@isNotEmpty(DEPT_NM)">
               AND a.dept_id IN (SELECT dept_id
                                   FROM usr_dept
                                  WHERE del_yn = 'N'
                                    AND dept_nm = #{DEPT_NM})
            </if>
     	   AND TO_CHAR(LOCALTIMESTAMP, 'YYYYMMDD') BETWEEN a.start_dt AND a.end_dt
           AND TO_CHAR(LOCALTIMESTAMP, 'YYYYMMDD') <![CDATA[<=]]> a.id_end_dt
         ORDER BY a.user_nm
    </select>

    <select id="getDeptIdByUserId" parameterType="hashmap" resultType="string">
        /* mng.getDeptIdByUserId */
        SELECT dept_id
          FROM usr_user
         WHERE 1 = 1
        <if test="@Ognl@isNotEmpty(USER_ID)">
           AND user_id = #{USER_ID}
        </if>
        <if test="@Ognl@isNotEmpty(USER_NUM)">
           AND user_num = #{USER_NUM}
        </if>
    </select>

    <!-- 고도화결재 by hdhong -->
    <select id="getDeptHasUser" parameterType="hashmap" resultType="string">
        /* mng.getDeptHasUser */
		SELECT CASE WHEN #{DEPT_ID}=dept_id THEN  'Y'  ELSE 'N' END
          FROM usr_user
        WHERE user_id = #{USER_ID}
    </select>

    <select id="getRoleHasUser" parameterType="hashmap" resultType="string">
        /* mng.getDeptHasUser */
	     SELECT CASE WHEN #{ROLE_ID}=alloc_id THEN  'Y'  ELSE 'N' END
          FROM v_usr_alloc
         WHERE alloc_gbn_cd = '0003'
           AND user_id = #{USER_ID}
           AND alloc_id = #{ROLE_ID}
    </select>

    <update id="updateMsgSignRsltByAutoApproval" parameterType="hashmap">
        /* mng.updateMsgSignRsltByAutoApproval */
 		 UPDATE msg_sign_rslt
           SET sign_stat_cd = '0004'
             , last_hist_dt = TO_CHAR(LOCALTIMESTAMP, 'YYYYMMDDHH24MISS')
             , read_yn = 'N'
         WHERE req_doc_id = #{REQ_DOC_ID}
           AND aval_end_dt = '99991231235959'
           AND sign_seq = #{SIGN_SEQ}
    </update>

    <update id="updateMsgSignRsltSetDrafterStepAsPending" parameterType="hashmap">
        /* mng.updateMsgSignRsltSetDrafterStepAsPending */
 		UPDATE msg_sign_rslt
           SET sign_stat_cd = '0001'
             , signer_gbn = 'U'
             , signer_id = #{requestUserId}
             , last_hist_dt = TO_CHAR(LOCALTIMESTAMP, 'YYYYMMDDHH24MISS')
         WHERE req_doc_id = #{REQ_DOC_ID}
           AND sign_seq = #{SIGN_SEQ}
           AND aval_end_dt = '99991231235959'
		   and signer_id =
				case
					when signer_gbn = 'U' then #{requestUserId}
					when signer_gbn = 'G' then (
						select dept_id from usr_user 
							where user_id = #{requestUserId}
						)
					when signer_gbn = 'R' then (
						select distinct alloc_id from v_usr_alloc 
							where alloc_gbn_cd = '0003'
							and user_id = #{requestUserId}
							and alloc_id = signer_id
						)
				end
    </update>

	<select id="getStdAreaListBySignTgt" parameterType="hashmap" resultType="encore.meta.mybatis.UpperKeyMap">
		/* mng.getStdAreaListBySignTgt */
		select
			a.std_area_id ,
			a.aval_end_dt ,
			a.aval_st_dt ,
			a.std_area_nm ,
			a.std_area_desc ,
			a.term_use_yn ,
			a.dom_use_yn ,
			a.combi_use_yn ,
			a.word_use_yn ,
			a.code_use_yn ,
			a.cd_dom_map_yn ,
			case
				when b.sign_line_id = '' then 'false'
				else 'true'
			end "checkedColumn"
		from
			std_area a
		left outer join msg_target b on
			(a.std_area_id = b.tgt_area_id
			and '1001' = b.sign_tgt_gbn_cd
			and '99991231235959' = b.aval_end_dt
			and #{SIGN_LINE_ID,jdbcType = VARCHAR} = b.sign_line_id
			)
		where
			a.aval_end_dt = '99991231235959'
		order by
		std_area_nm;
    </select>

	<select id="getModelTreeBySignTgt" parameterType="hashmap" resultType="encore.meta.mybatis.UpperKeyMap">
        /* mng.getModelTreeBySignTgt */
        WITH mtree AS (SELECT LEVEL lvl
                             ,a.a_uid
                             ,a.p_uid
                             ,a.foldername
                             ,a.registerdate
                             ,SYS_CONNECT_BY_PATH(a.a_uid, '/') ids
                             ,a.ismodel
                             ,b.m_uid phy_id
                             ,a.modeltype
                         FROM da_modelstru a
                         LEFT OUTER JOIN da_model b
                           ON b.a_uid = a.a_uid
                          AND b.expireddate = '99999999999999'
                          AND b.modeltype = 3
                        START WITH a.p_uid = 'ROOT'
                          AND a.expireddate = '99999999999999'
                          AND (a.modeltype = #{MODEL_TYPE} OR a.ismodel = 'F')
                      CONNECT BY PRIOR a.a_uid = a.p_uid
                          AND a.expireddate = '99999999999999'
                        ORDER SIBLINGS BY a.foldername)
            ,alloc AS (SELECT m.ids FROM mtree m WHERE m.modeltype = #{MODEL_TYPE})
        SELECT m.lvl
              ,m.a_uid id
              ,m.p_uid pid
              ,m.ids
              ,DECODE((SELECT tgt_area_id
                         FROM msg_target
                        WHERE sign_line_id = #{SIGN_LINE_ID, jdbcType=VARCHAR}
                          AND aval_end_dt = '99991231235959'
                          AND INSTR(m.ids, tgt_area_id) > 0), '', 'false', 'true') "checkedColumn"
              ,DECODE(m.phy_id, NULL, m.a_uid, m.phy_id) phy_id
              ,m.foldername model_name
              ,DECODE(m.ismodel, 'M', 'Y') model_yn
              ,m.registerdate
          FROM mtree m
         WHERE EXISTS (SELECT 1 FROM alloc al WHERE INSTR(al.ids, m.ids) = 1)
    </select>

	<select id="getCurrentSignStep" parameterType="hashmap" resultType="encore.meta.mybatis.UpperKeyMap">
  /* mng.getCurrentSignStep */
        <!-- APR_USER 또는 APR_USER의 부서가 결재자로 지정된, 진행중(0001) 또는 내부결재중(0006)인 결재단계의 정보 -->
        SELECT r.sign_seq
             ,  CASE  WHEN nullif(#{DN_REQ_DOC_ID ,jdbcType=VARCHAR}, '') is null THEN 'U' ELSE  r.signer_gbn END  signer_gbn <!-- 자식신청ID가 없으면 결재자 구분은 무조건 사용자 -->
             ,  CASE  WHEN nullif(#{DN_REQ_DOC_ID ,jdbcType=VARCHAR}, '') is null THEN #{APR_USER_ID} ELSE  signer_id END  signer_id
             <!-- 현재 결재단계가 병렬인지 여부 -->
             ,  CASE  WHEN (SELECT COUNT(1)
                         FROM msg_sign_rslt s
                        WHERE s.req_doc_id = #{REQ_DOC_ID}
                          AND s.aval_end_dt = '99991231235959'
                          AND s.sign_seq = r.sign_seq
                        GROUP BY s.sign_seq) =  1 THEN  'N' ELSE  'Y' END  is_parallel
             <!-- 현재 결재단계가 완료됐는지 여부(아직 나 자신의 결재결과는 반영되지 않았으므로 진행중(0001)/내부결재중(0006)인 건수가 1이면 나머지는 모두 완료된 것임) -->
             ,  CASE  WHEN (SELECT COUNT(1)
                         FROM msg_sign_rslt s
                        WHERE s.req_doc_id = #{REQ_DOC_ID}
                          AND s.aval_end_dt = '99991231235959'
                          AND s.sign_seq = r.sign_seq
                          AND s.sign_stat_cd IN ('0001', '0006')
                        GROUP BY s.sign_seq) =  0 THEN  'Y' WHEN (SELECT COUNT(1)
                         FROM msg_sign_rslt s
                        WHERE s.req_doc_id = #{REQ_DOC_ID}
                          AND s.aval_end_dt = '99991231235959'
                          AND s.sign_seq = r.sign_seq
                          AND s.sign_stat_cd IN ('0001', '0006')
                        GROUP BY s.sign_seq) =  1 THEN  'Y' ELSE  'N' END  is_completed
          FROM msg_sign_rslt r
         WHERE r.req_doc_id = #{REQ_DOC_ID}
           AND r.aval_end_dt = '99991231235959'
           AND r.sign_stat_cd =  CASE  WHEN nullif(#{DN_REQ_DOC_ID ,jdbcType=VARCHAR}, '') is null THEN '0001' ELSE  '0006' END 
           AND r.signer_id =  CASE  WHEN r.signer_gbn =  'U' THEN  #{APR_USER_ID}
                                                 WHEN r.signer_gbn =  'G' THEN  (SELECT dept_id FROM usr_user WHERE user_id = #{APR_USER_ID})
                                                 WHEN r.signer_gbn =  'R' THEN  (SELECT distinct alloc_id
                                                          FROM v_usr_alloc
                                                         WHERE alloc_gbn_cd = '0003'
                                                           AND user_id = #{APR_USER_ID}
                                                           AND alloc_id = r.signer_id) END 

    </select>

    <select id="getSignStatCdFromParallelSteps" parameterType="hashmap" resultType="string">
        /* mng.getSignStatCdFromParallelSteps */
   <choose>
            <when test="SIGN_TGT_GBN_CD == &quot;1001&quot; ||SIGN_TGT_GBN_CD == &quot;2101&quot; || SIGN_TGT_GBN_CD == &quot;3000&quot; || SIGN_TGT_GBN_CD == &quot;3001&quot; || SIGN_TGT_GBN_CD == &quot;4001&quot;">
                <!-- 각 컨텐츠에 대해 설정값을 반영한 승인결과에서 승인건수가 하나 이상이면 승인(다음 단계로 진행), 하나도 없으면 반려(결재는 반려로 종료) -->
                <choose>
                    <when test="_databaseId eq 'oracle10'">
                SELECT  CASE  WHEN INSTR(LTRIM(RTRIM(XMLAGG(XMLELEMENT(e, r.sign_prc_gbn_cd, ',')).EXTRACT('//text()'), ','), ','), '0004') =  0 THEN  '0003' ELSE  '0004' END  sign_stat_cd
                    </when>
                    <otherwise>
                SELECT  CASE  WHEN position('0004' in string_agg(r.sign_prc_gbn_cd, ',' ORDER BY r.sign_prc_gbn_cd)) =  0 THEN  '0003' ELSE  '0004' END  sign_stat_cd
                    </otherwise>
                </choose>
                  FROM (<!-- 각 컨텐츠별로 병렬결재자들의 승인비율이 설정값 이상이면 승인, 아니면 반려로 처리 -->
                        SELECT MAX(req_doc_id) req_doc_id
                             , d.tgt_item_id
                             , CASE WHEN 100 * (SUM( CASE  WHEN sign_prc_gbn_cd =  '0004' THEN  1 ELSE  0 END ) / COUNT(1)) &gt; GET_CONFIG('sign.process.passParallelCollaboratePercent')::int THEN '0004'
                                    ELSE '0003'
                                END sign_prc_gbn_cd
                          FROM msg_sign_rslt_dtl d
                         WHERE d.req_doc_id = #{REQ_DOC_ID}
                           AND d.sign_seq = #{SIGN_SEQ}
                         GROUP BY d.tgt_item_id) r
            </when>
            <otherwise>
                <!-- 신청이 단건만 있는 모델(2001)/DBA DDL(5001)은 병렬결재자들의 승인비율이 설정값 이상이면 승인, 아니면 반려로 처리 -->
				 SELECT CASE WHEN 100 * (SUM(CASE WHEN sign_stat_cd='0004' THEN  1  ELSE 0 END )  /*<!-- FIXME 설정값은 시스템 설정에서 결재선정보로 변경될 수 있음 --> */
						/ COUNT(1)) >  (GET_CONFIG('sign.process.passParallelCollaboratePercent'))::numeric  THEN '0004'
				            ELSE '0003'
				        END sign_stat_cd
				  FROM msg_sign_rslt
				 WHERE req_doc_id = :REQ_DOC_ID/*#{REQ_DOC_ID}*/
				   AND aval_end_dt = '99991231235959'
				   AND sign_seq = :SIGN_SEQ/*#{SIGN_SEQ}*/
            </otherwise>
        </choose>
    </select>

    <update id="updateMsgSignRsltNextStep" parameterType="hashmap">
        /* mng.updateMsgSignRsltNextStep */
		with v as (SELECT MIN(i.req_doc_id) req_doc_id, COALESCE(MIN(i.sign_seq), -1) next_sign_seq, MAX(aval_end_dt) aval_end_dt
                 FROM msg_sign_rslt i
                WHERE i.req_doc_id = #{REQ_DOC_ID}
                  AND i.aval_end_dt = '99991231235959'
                  AND i.sign_seq &lt; 100
                  AND i.sign_stat_cd IS NULL
               ) 
            UPDATE msg_sign_rslt r 
            	   SET sign_stat_cd = '0001'
                     , last_hist_dt = #{CUR_DATE}
              from v
             where (r.req_doc_id = v.req_doc_id
                AND r.sign_seq = v.next_sign_seq
                AND r.aval_end_dt = v.aval_end_dt)      
    </update>

    <update id="updateMsgSignRsltSetInternalSanction" parameterType="hashmap">
        /* mng.updateMsgSignRsltSetInternalSanction */
	   UPDATE msg_sign_rslt r
	           SET sign_stat_cd = '0006'
	             , last_hist_dt = #{CUR_DATE}
	         WHERE r.req_doc_id = #{UP_REQ_DOC_ID}
	           AND r.aval_end_dt = '99991231235959'
	           AND r.sign_stat_cd = '0001'
	           AND r.sign_seq = #{SIGN_SEQ}
	           AND r.signer_id = 
					case
						when r.signer_gbn = 'U' then #{requestUserId}
						when r.signer_gbn = 'G' then (
							select dept_id from usr_user
								where user_id = #{requestUserId})
						when r.signer_gbn = 'R' then (
							select distinct alloc_id from v_usr_alloc
								where alloc_gbn_cd = '0003'
								and user_id = #{requestUserId}
								and alloc_id = r.signer_id
							)
					end
    </update>

    <select id="getUpReqDocId" parameterType="hashmap" resultType="string">
        /* mng.getUpReqDocId */
        SELECT up_req_doc_id
          FROM req_doc_info
         WHERE req_doc_id = #{REQ_DOC_ID}
    </select>

    <select id="getDrafter" parameterType="hashmap" resultType="string">
        /* mng.getDrafter */
        SELECT signer_id
          FROM msg_sign_rslt
         WHERE req_doc_id = #{REQ_DOC_ID}
           AND aval_end_dt = '99991231235959'
           AND sign_seq = 0
    </select>

    <select id="getIsPossibleToCancel" parameterType="hashmap" resultType="string">
 	  SELECT CASE WHEN MAX(d.req_doc_id)='' THEN  'N'  ELSE 'Y' END  possibleToCancel
          FROM req_doc_info r
             , msg_sign_rslt d
             , msg_sign_rslt a
         WHERE r.req_doc_id = #{REQ_DOC_ID}
           AND r.req_status = 'ING'
           AND r.up_req_doc_id = 'ROOT' /*<!-- 내부결재 신청건 취소 불가 -->*/
           AND d.req_doc_id = r.req_doc_id
           AND d.aval_end_dt = '99991231235959'
           AND d.sign_seq = 0
           AND d.signer_id = #{requestUserId}
           AND a.req_doc_id = d.req_doc_id
           AND a.aval_end_dt = '99991231235959'
           AND a.sign_seq = 1
           AND a.sign_stat_cd = '0001'
    </select>

    <update id="updateCancelRequest" parameterType="hashmap">
        /* mng.updateCancelRequest */
     DECLARE
        BEGIN
        UPDATE req_doc_info
           SET req_status = 'CANCEL'
         WHERE req_doc_id = #{REQ_DOC_ID}
           AND req_user_id = #{requestUserId};

        UPDATE msg_sign_rslt
           SET sign_stat_cd = ''
         WHERE req_doc_id = #{REQ_DOC_ID}
           AND sign_stat_cd = '0001';

        <if test="@Ognl@isNotEmpty(SIGN_TGT_GBN_CD) and SIGN_TGT_GBN_CD == '2001'">
            UPDATE md_mdl_aprv_req
               SET mdl_aprv_stat_cd = '0002'
                 , chg_dt = TO_CHAR(LOCALTIMESTAMP, 'YYYYMMDDHH24MISS')
             WHERE mdl_aprv_req_id = #{REQ_DOC_ID}
        </if>
        END;
	</update>

    <update id="updateMsgSignRsltUnsetInternalSanction" parameterType="hashmap">
        /* mng.updateMsgSignRsltUnsetInternalSanction */
 		UPDATE msg_sign_rslt r
           SET sign_stat_cd = #{SIGN_STAT_CD}
             , last_hist_dt = #{CUR_DATE}
         WHERE r.req_doc_id = #{UP_REQ_DOC_ID}
           AND r.aval_end_dt = '99991231235959'
           AND r.sign_stat_cd = '0001'
           AND r.sign_seq = #{SIGN_SEQ}
           AND r.signer_gbn = #{SIGNER_GBN}
           AND r.signer_id = #{SIGNER_ID}
    </update>

    <update id="updateMsgSignRslt" parameterType="hashmap">
  	  UPDATE msg_sign_rslt r
           SET sign_stat_cd = :SIGN_STAT_CD/*#{SIGN_STAT_CD}*/
             , signer_id = :SIGNER_ID/*#{SIGNER_ID}*/
             , signer_gbn = :SIGNER_GBN/*#{SIGNER_GBN}*/
             , read_yn = 'Y'
             , sign_cmmt = :COMMENT/*#{COMMENT}*/
             , last_hist_dt = :CUR_DATE/*#{CUR_DATE}*/
         WHERE r.req_doc_id = :REQ_DOC_ID/*#{REQ_DOC_ID}*/
           AND r.aval_end_dt = '99991231235959'
           AND r.sign_seq = :SIGN_SEQ/*#{SIGN_SEQ}*/
           AND r.signer_id =
				case
				when signer_gbn = 'U' then 
					coalesce(
						(select user_id from usr_user_absence 
							where user_id = r.signer_id 
							and start_dt <![CDATA[<=]]> to_char(localtimestamp, 'YYYYMMDDHH24MISS') 
							and end_dt > to_char(localtimestamp, 'YYYYMMDDHH24MISS') 
							and alt_user_id = :APR_USER_ID/*#{APR_USER_ID}*/)
						,:APR_USER_ID/*#{APR_USER_ID}*/)
				when signer_gbn = 'G' then (
					select dept_id from usr_user
						where user_id = :APR_USER_ID/*#{APR_USER_ID}*/)
				when signer_gbn = 'R' then (
					select distinct alloc_id from v_usr_alloc
						where alloc_gbn_cd = '0003'
						and user_id = :APR_USER_ID/*#{APR_USER_ID}*/)
				end
    </update>

    <insert id="insertMsgSignRsltDtl" parameterType="hashmap">
        /* mng.insertMsgSignRsltDtl */
        INSERT INTO msg_sign_rslt_dtl
              (req_doc_id, sign_seq, signer_gbn, signer_id, tgt_item_id
             , sign_tgt_gbn_cd, sign_prc_gbn_cd, std_area_id, tgt_gbn_cd, sign_cmmt)
        <choose>
            <when test="SIGN_TGT_GBN_CD == &quot;1001&quot;">
        SELECT std_req_id, #{SIGN_SEQ}, #{SIGNER_GBN}, #{SIGNER_ID}, tgt_item_id
             , #{SIGN_TGT_GBN_CD}, req_stat_cd, std_area_id, tgt_gbn_cd, rejt_desc
          FROM imsi_std_dic_req
         WHERE std_req_id = #{REQ_DOC_ID}
           AND apr_user_id = #{APR_USER_ID}
            </when>
            <when test="SIGN_TGT_GBN_CD == &quot;2101&quot;">
        SELECT req_doc_id, #{SIGN_SEQ}, #{SIGNER_GBN}, #{SIGNER_ID}, tgt_item_id
             , #{SIGN_TGT_GBN_CD}, req_stat_cd, '' std_area_id, '' tgt_gbn_cd, rejt_desc
          FROM imsi_md_mdl_chg_req_tbl
         WHERE req_doc_id = #{REQ_DOC_ID}
           AND apr_user_id = #{APR_USER_ID}
            </when>
            <when test="SIGN_TGT_GBN_CD == &quot;2201&quot;">
        SELECT req_doc_id, #{SIGN_SEQ}, #{SIGNER_GBN}, #{SIGNER_ID}, tgt_item_id
             , #{SIGN_TGT_GBN_CD}, req_stat_cd, '' std_area_id, '' tgt_gbn_cd, sign_desc
          FROM mdl_auth_req_contents
         WHERE req_doc_id = #{REQ_DOC_ID}
            </when>
            <when test="SIGN_TGT_GBN_CD == &quot;3000&quot; or SIGN_TGT_GBN_CD == &quot;3001&quot;">
        SELECT req_doc_id, #{SIGN_SEQ}, 'U', #{APR_USER_ID}, job_req_id
             , #{SIGN_TGT_GBN_CD}, req_stat_cd, '', '', rejt_desc
          FROM imsi_mdb_job_req
         WHERE req_doc_id = #{REQ_DOC_ID}
           AND apr_user_id = #{APR_USER_ID}
            </when>
            <when test="SIGN_TGT_GBN_CD == &quot;4001&quot;">
        SELECT req_doc_id, #{SIGN_SEQ}, #{SIGNER_GBN}, #{SIGNER_ID}, tgt_item_id
             , #{SIGN_TGT_GBN_CD}, req_stat_cd, '', '', rejt_desc
          FROM imsi_biz_rule_req
         WHERE req_doc_id = #{REQ_DOC_ID}
           AND apr_user_id = #{APR_USER_ID}
            </when>
            <when test="SIGN_TGT_GBN_CD == &quot;7001&quot;">
        SELECT req_doc_id, #{SIGN_SEQ}, #{SIGNER_GBN}, #{SIGNER_ID}, tgt_item_id
             , #{SIGN_TGT_GBN_CD}, req_stat_cd, '', '', sign_desc
          FROM imsi_md_udp_req
         WHERE req_doc_id = #{REQ_DOC_ID}
           AND apr_user_id = #{APR_USER_ID}
            </when>
            <when test="SIGN_TGT_GBN_CD == &quot;8001&quot;">
        SELECT req_doc_id, #{SIGN_SEQ}, #{SIGNER_GBN}, #{SIGNER_ID}, tgt_item_id
             , #{SIGN_TGT_GBN_CD}, req_stat_cd, '', '', rejt_desc
          FROM imsi_code_dist_req
         WHERE req_doc_id = #{REQ_DOC_ID}
           AND apr_user_id = #{APR_USER_ID}
            </when>
        </choose>
    </insert>

	<select id="getAllSignLines" parameterType="hashmap" resultType="encore.meta.mybatis.UpperKeyMap">
        /* mng.getAllSignLines */
        SELECT sign_line_type, sign_line_nm, sign_line_id
          FROM (SELECT x.*, 'PUBLIC' sign_line_type
                  FROM (<include refid="publicSignSteps" />) x
                 UNION ALL
                SELECT y.*, 'PERSONAL' sign_line_type
                  FROM (<include refid="personalSignSteps" />) y
                ) z
         GROUP BY sign_line_type, sign_line_nm, sign_line_id
         ORDER BY sign_line_type, sign_line_nm, sign_line_id
    </select>

	<select id="getAllSignSteps" parameterType="hashmap" resultType="encore.meta.mybatis.UpperKeyMap">
        /* mng.getAllSignSteps */
        SELECT *
          FROM (SELECT x.*, 'PUBLIC' sign_line_type
                  FROM (<include refid="publicSignSteps" />) x
                 UNION ALL
                SELECT y.*, 'PERSONAL' sign_line_type
                  FROM (<include refid="personalSignSteps" />) y
                ) z
         ORDER BY CASE WHEN x.tgt_area_id = 'ROOT' THEN 1 ELSE 0 END, sign_line_type, sign_line_nm, sign_line_id, sign_seq, signer_nm
    </select>

	<select id="getPublicSignSteps" parameterType="hashmap" resultType="encore.meta.mybatis.UpperKeyMap">
        /* mng.getPublicSignSteps */
        SELECT x.*, 'PUBLIC' sign_line_type
          FROM (<include refid="publicSignSteps" />) x
         ORDER BY
        <if test="@Ognl@isEmpty(TGT_AREA_ID)">
                  CASE WHEN x.tgt_area_id = 'ROOT' THEN 1 ELSE 0 END,
        </if>
        <if test="@Ognl@isNotEmpty(TGT_AREA_ID)">
                  CASE WHEN x.tgt_area_id = #{TGT_AREA_ID} THEN 10000
                       WHEN x.sign_tgt_gbn_cd IN ('2001', '2101', '2201', '3000') THEN INSTR(MD_ETC.GET_AREA_ID(#{TGT_AREA_ID}), x.tgt_area_id)
                       WHEN x.sign_tgt_gbn_cd IN ('4001') THEN INSTR(MD_ETC.GET_MDQ_AREA_ID(#{TGT_AREA_ID}), x.tgt_area_id)
                       WHEN x.tgt_area_id = 'ROOT' THEN -1
                   END DESC,
        </if>
                  x.sign_line_nm, x.sign_line_id, x.sign_seq, x.signer_nm
    </select>

	<select id="getPersonalSignSteps" parameterType="hashmap" resultType="encore.meta.mybatis.UpperKeyMap">
        /* mng.getPersonalSignSteps */
        SELECT x.*, 'PERSONAL' sign_line_type
          FROM (<include refid="personalSignSteps" />) x
         ORDER BY CASE WHEN x.tgt_area_id = 'ROOT' THEN 1 ELSE 0 END, x.sign_line_nm, x.sign_line_id, x.sign_seq, x.signer_nm
    </select>

    <sql id="publicSignSteps">
        SELECT a.sign_line_id, a.sign_line_nm, a.sign_line_desc, a.aval_st_dt
             , b.sign_seq, b.sign_step_gbn_cd, b.signee_gbn_cd
             , b.sign_mthd_gbn AS signer_gbn, b.signer_id, c.user_nm AS signer_nm, c.post
             , (SELECT dept_nm FROM usr_dept WHERE dept_id = c.dept_id) AS dept_nm
             , b.signer_dept_id, b.last_appr_yn, b.doc_mod_prv_yn, b.line_mod_prv_yn
             , b.bypass_yn, d.sign_tgt_gbn_cd, d.tgt_area_id
             , CASE d.sign_tgt_gbn_cd
                    WHEN '1001'
                        THEN DECODE(d.tgt_area_id, 'ROOT', GET_TERM(#{langCd}, 'label.all'), (SELECT std_area_nm FROM std_area WHERE std_area_id = d.tgt_area_id AND aval_end_dt = '99991231235959'))
                    WHEN '2001'
                        THEN DECODE(d.tgt_area_id, 'ROOT', GET_TERM(#{langCd}, 'label.all'), MD_ETC.GET_AREA_NM(d.tgt_area_id, ' > '))
                    WHEN '2101'
                        THEN DECODE(d.tgt_area_id, 'ROOT', GET_TERM(#{langCd}, 'label.all'), MD_ETC.GET_AREA_NM(d.tgt_area_id, ' > '))
                    WHEN '3000'
                        THEN DECODE(d.tgt_area_id, 'ROOT', GET_TERM(#{langCd}, 'label.all'), MD_ETC.GET_AREA_NM(d.tgt_area_id, ' > '))
                    WHEN '3001'
                        THEN DECODE(d.tgt_area_id, 'ROOT', GET_TERM(#{langCd}, 'label.all'), (SELECT DB_NM || '>' || SUBSTR(d.tgt_area_id, INSTR(d.tgt_area_id,'.',1,3) + 1) FROM MD_DB WHERE SVR_ID || '.' || INST_ID || '.' || DB_ID = SUBSTR(d.tgt_area_id, 0, INSTR(d.tgt_area_id,'.',1,3)-1)))
                    WHEN '4001'
                        THEN DECODE(d.tgt_area_id, 'ROOT', GET_TERM(#{langCd}, 'label.all'), MD_ETC.GET_MDQ_AREA_NM(d.tgt_area_id, ' > '))
                    WHEN '5001'
                        THEN DECODE(d.tgt_area_id, 'ROOT', GET_TERM(#{langCd}, 'label.all'), (SELECT DB_NM || '>' || SUBSTR(d.tgt_area_id, INSTR(d.tgt_area_id,'.',1,3) + 1) FROM MD_DB WHERE SVR_ID || '.' || INST_ID || '.' || DB_ID = SUBSTR(d.tgt_area_id, 0, INSTR(d.tgt_area_id,'.',1,3)-1)))
        <if test="@encore.meta.data.DatawareConfigData@getProperty(&quot;common.installedDF&quot;).equals(&quot;Y&quot;)">
                    /* DATAFLOW 결재라인으로 인해 추가함. START */
                    WHEN '6001'
                        THEN DECODE(d.tgt_area_id, 'ROOT', GET_TERM(#{langCd}, 'label.all'), GET_SIGN_AREA_NM(d.tgt_area_id, ' > '))
                    /* DATAFLOW 결재라인으로 인해 추가함. END */
        </if>
                    ELSE ''
                END tgt_area_nm
          FROM msg_line a
             , msg_step b
             , usr_user c
             , msg_target d
         WHERE a.aval_end_dt = '99991231235959'
           AND b.sign_line_id = a.sign_line_id
           AND b.aval_end_dt = '99991231235959'
           AND b.sign_mthd_gbn = 'U'
           AND c.user_id = b.signer_id
           AND d.sign_line_id = a.sign_line_id
           AND d.aval_end_dt = '99991231235959'
        <if test="@Ognl@isNotEmpty(SIGN_TGT_GBN_CD)">
           AND d.sign_tgt_gbn_cd = #{SIGN_TGT_GBN_CD}
        </if>
        <if test="@Ognl@isNotEmpty(TGT_AREA_ID)">
           AND 'Y' = CASE WHEN d.tgt_area_id = 'ROOT' OR d.tgt_area_id = #{TGT_AREA_ID} THEN 'Y'
                          WHEN d.sign_tgt_gbn_cd IN ('2001', '2101', '3000') AND INSTR(MD_ETC.GET_AREA_ID(#{TGT_AREA_ID}), d.tgt_area_id) > 0 THEN 'Y'
                          WHEN d.sign_tgt_gbn_cd IN ('4001') AND INSTR(MD_ETC.GET_MDQ_AREA_ID(#{TGT_AREA_ID}), d.tgt_area_id) > 0 THEN 'Y'
                      END
        </if>
           AND a.user_id IS NULL
         UNION ALL
        SELECT a.sign_line_id, a.sign_line_nm, a.sign_line_desc, a.aval_st_dt
             , b.sign_seq, b.sign_step_gbn_cd, b.signee_gbn_cd
             , b.sign_mthd_gbn AS signer_gbn, b.signer_id, c.dept_nm AS signer_nm, '' post
             , c.dept_nm
             , b.signer_dept_id, b.last_appr_yn, b.doc_mod_prv_yn, b.line_mod_prv_yn
             , b.bypass_yn, d.sign_tgt_gbn_cd, d.tgt_area_id
             , CASE d.sign_tgt_gbn_cd
                    WHEN '1001'
                        THEN DECODE(d.tgt_area_id, 'ROOT', GET_TERM(#{langCd}, 'label.all'), (SELECT std_area_nm FROM std_area WHERE std_area_id = d.tgt_area_id AND aval_end_dt = '99991231235959'))
                    WHEN '2001'
                        THEN DECODE(d.tgt_area_id, 'ROOT', GET_TERM(#{langCd}, 'label.all'), MD_ETC.GET_AREA_NM(d.tgt_area_id, ' > '))
                    WHEN '2101'
                        THEN DECODE(d.tgt_area_id, 'ROOT', GET_TERM(#{langCd}, 'label.all'), MD_ETC.GET_AREA_NM(d.tgt_area_id, ' > '))
                    WHEN '3000'
                        THEN DECODE(d.tgt_area_id, 'ROOT', GET_TERM(#{langCd}, 'label.all'), MD_ETC.GET_AREA_NM(d.tgt_area_id, ' > '))
                    WHEN '3001'
                        THEN DECODE(d.tgt_area_id, 'ROOT', GET_TERM(#{langCd}, 'label.all'), (SELECT DB_NM || '>' || SUBSTR(d.tgt_area_id, INSTR(d.tgt_area_id,'.',1,3) + 1) FROM MD_DB WHERE SVR_ID || '.' || INST_ID || '.' || DB_ID = SUBSTR(d.tgt_area_id, 0, INSTR(d.tgt_area_id,'.',1,3)-1)))
                    WHEN '4001'
                        THEN DECODE(d.tgt_area_id, 'ROOT', GET_TERM(#{langCd}, 'label.all'), (SELECT biz_name FROM mdq_bizarea WHERE biz_id = d.tgt_area_id AND expireddate = '99991231235959'))
                    WHEN '5001'
                        THEN DECODE(d.tgt_area_id, 'ROOT', GET_TERM(#{langCd}, 'label.all'), (SELECT DB_NM || '>' || SUBSTR(d.tgt_area_id, INSTR(d.tgt_area_id,'.',1,3) + 1) FROM MD_DB WHERE SVR_ID || '.' || INST_ID || '.' || DB_ID = SUBSTR(d.tgt_area_id, 0, INSTR(d.tgt_area_id,'.',1,3)-1)))
        <if test="@encore.meta.data.DatawareConfigData@getProperty(&quot;common.installedDF&quot;).equals(&quot;Y&quot;)">
                    /* DATAFLOW 결재라인으로 인해 추가함. START */
                    WHEN '6001'
                        THEN DECODE(d.tgt_area_id, 'ROOT', GET_TERM(#{langCd}, 'label.all'), GET_SIGN_AREA_NM(d.tgt_area_id, ' > '))
                    /* DATAFLOW 결재라인으로 인해 추가함. END */
        </if>
                    ELSE ''
                END tgt_area_nm
          FROM msg_line a
             , msg_step b
             , usr_dept c
             , msg_target d
         WHERE a.aval_end_dt = '99991231235959'
           AND b.sign_line_id = a.sign_line_id
           AND b.aval_end_dt = '99991231235959'
           AND b.sign_mthd_gbn = 'G'
           AND c.dept_id = b.signer_id
           AND d.sign_line_id = a.sign_line_id
           AND d.aval_end_dt = '99991231235959'
        <if test="@Ognl@isNotEmpty(SIGN_TGT_GBN_CD)">
           AND d.sign_tgt_gbn_cd = #{SIGN_TGT_GBN_CD}
        </if>
        <if test="@Ognl@isNotEmpty(TGT_AREA_ID)">
           AND 'Y' = CASE WHEN d.tgt_area_id = 'ROOT' OR d.tgt_area_id = #{TGT_AREA_ID} THEN 'Y'
                          WHEN d.sign_tgt_gbn_cd IN ('2001', '2101', '3000') AND INSTR(MD_ETC.GET_AREA_ID(#{TGT_AREA_ID}), d.tgt_area_id) > 0 THEN 'Y'
                          WHEN d.sign_tgt_gbn_cd IN ('4001') AND INSTR(MD_ETC.GET_MDQ_AREA_ID(#{TGT_AREA_ID}), d.tgt_area_id) > 0 THEN 'Y'
                      END
        </if>
           AND a.user_id IS NULL
         UNION ALL
        SELECT a.sign_line_id, a.sign_line_nm, a.sign_line_desc, a.aval_st_dt
             , b.sign_seq, b.sign_step_gbn_cd, b.signee_gbn_cd
             , b.sign_mthd_gbn AS signer_gbn, b.signer_id, c.role_nm AS signer_nm, '' post
             , '' dept_nm
             , b.signer_dept_id, b.last_appr_yn, b.doc_mod_prv_yn, b.line_mod_prv_yn
             , b.bypass_yn, d.sign_tgt_gbn_cd, d.tgt_area_id
             , CASE d.sign_tgt_gbn_cd
                    WHEN '1001'
                        THEN DECODE(d.tgt_area_id, 'ROOT', GET_TERM(#{langCd}, 'label.all'), (SELECT std_area_nm FROM std_area WHERE std_area_id = d.tgt_area_id AND aval_end_dt = '99991231235959'))
                    WHEN '2001'
                        THEN DECODE(d.tgt_area_id, 'ROOT', GET_TERM(#{langCd}, 'label.all'), MD_ETC.GET_AREA_NM(d.tgt_area_id, ' > '))
                    WHEN '2101'
                        THEN DECODE(d.tgt_area_id, 'ROOT', GET_TERM(#{langCd}, 'label.all'), MD_ETC.GET_AREA_NM(d.tgt_area_id, ' > '))
                    WHEN '3000'
                        THEN DECODE(d.tgt_area_id, 'ROOT', GET_TERM(#{langCd}, 'label.all'), MD_ETC.GET_AREA_NM(d.tgt_area_id, ' > '))
                    WHEN '3001'
                        THEN DECODE(d.tgt_area_id, 'ROOT', GET_TERM(#{langCd}, 'label.all'), (SELECT DB_NM || '>' || SUBSTR(d.tgt_area_id, INSTR(d.tgt_area_id,'.',1,3) + 1) FROM MD_DB WHERE SVR_ID || '.' || INST_ID || '.' || DB_ID = SUBSTR(d.tgt_area_id, 0, INSTR(d.tgt_area_id,'.',1,3)-1)))
                    WHEN '4001'
                        THEN DECODE(d.tgt_area_id, 'ROOT', GET_TERM(#{langCd}, 'label.all'), (SELECT biz_name FROM mdq_bizarea WHERE biz_id = d.tgt_area_id AND expireddate = '99991231235959'))
                    WHEN '5001'
                        THEN DECODE(d.tgt_area_id, 'ROOT', GET_TERM(#{langCd}, 'label.all'), (SELECT DB_NM || '>' || SUBSTR(d.tgt_area_id, INSTR(d.tgt_area_id,'.',1,3) + 1) FROM MD_DB WHERE SVR_ID || '.' || INST_ID || '.' || DB_ID = SUBSTR(d.tgt_area_id, 0, INSTR(d.tgt_area_id,'.',1,3)-1)))
        <if test="@encore.meta.data.DatawareConfigData@getProperty(&quot;common.installedDF&quot;).equals(&quot;Y&quot;)">
                    /* DATAFLOW 결재라인으로 인해 추가함. START */
                    WHEN '6001'
                        THEN DECODE(d.tgt_area_id, 'ROOT', GET_TERM(#{langCd}, 'label.all'), GET_SIGN_AREA_NM(d.tgt_area_id, ' > '))
                    /* DATAFLOW 결재라인으로 인해 추가함. END */
        </if>
                    ELSE ''
                END tgt_area_nm
          FROM msg_line a
             , msg_step b
             , usr_role c
             , msg_target d
         WHERE a.aval_end_dt = '99991231235959'
           AND b.sign_line_id = a.sign_line_id
           AND b.aval_end_dt = '99991231235959'
           AND b.sign_mthd_gbn = 'R'
           AND c.role_id = b.signer_id
           AND d.sign_line_id = a.sign_line_id
           AND d.aval_end_dt = '99991231235959'
        <if test="@Ognl@isNotEmpty(SIGN_TGT_GBN_CD)">
           AND d.sign_tgt_gbn_cd = #{SIGN_TGT_GBN_CD}
        </if>
        <if test="@Ognl@isNotEmpty(TGT_AREA_ID)">
           AND 'Y' = CASE WHEN d.tgt_area_id = 'ROOT' OR d.tgt_area_id = #{TGT_AREA_ID} THEN 'Y'
                          WHEN d.sign_tgt_gbn_cd IN ('2001', '2101', '3000') AND INSTR(MD_ETC.GET_AREA_ID(#{TGT_AREA_ID}), d.tgt_area_id) > 0 THEN 'Y'
                          WHEN d.sign_tgt_gbn_cd IN ('4001') AND INSTR(MD_ETC.GET_MDQ_AREA_ID(#{TGT_AREA_ID}), d.tgt_area_id) > 0 THEN 'Y'
                      END
        </if>
           AND a.user_id IS NULL
    </sql>

    <sql id="personalSignSteps">
        SELECT a.sign_line_id, a.sign_line_nm, a.sign_line_desc, a.aval_st_dt
             , b.sign_seq, b.sign_step_gbn_cd, b.signee_gbn_cd
             , b.sign_mthd_gbn AS signer_gbn, b.signer_id, c.user_nm AS signer_nm, c.post
             , (SELECT dept_nm FROM usr_dept WHERE dept_id = c.dept_id) AS dept_nm
             , b.signer_dept_id, b.last_appr_yn, b.doc_mod_prv_yn, b.line_mod_prv_yn
             , b.bypass_yn, '' sign_tgt_gbn_cd, '' tgt_area_id
          FROM msg_line a
             , msg_step b
             , usr_user c
         WHERE a.sign_line_id = b.sign_line_id
           AND a.aval_end_dt = '99991231235959'
           AND b.aval_end_dt = '99991231235959'
           AND b.sign_mthd_gbn = 'U'
           AND b.signer_id = c.user_id
           AND a.user_id = #{requestUserId}
         UNION ALL
        SELECT a.sign_line_id, a.sign_line_nm, a.sign_line_desc, a.aval_st_dt
             , b.sign_seq, b.sign_step_gbn_cd, b.signee_gbn_cd
             , b.sign_mthd_gbn AS signer_gbn, b.signer_id, c.dept_nm AS signer_nm, '' post
             , c.dept_nm
             , b.signer_dept_id, b.last_appr_yn, b.doc_mod_prv_yn, b.line_mod_prv_yn
             , b.bypass_yn, '' sign_tgt_gbn_cd, '' tgt_area_id
          FROM msg_line a
             , msg_step b
             , usr_dept c
         WHERE a.sign_line_id = b.sign_line_id
           AND a.aval_end_dt = '99991231235959'
           AND b.aval_end_dt = '99991231235959'
           AND b.sign_mthd_gbn = 'G'
           AND b.signer_id = c.dept_id
           AND a.user_id = #{requestUserId}
         UNION ALL
        SELECT a.sign_line_id, a.sign_line_nm, a.sign_line_desc, a.aval_st_dt
             , b.sign_seq, b.sign_step_gbn_cd, b.signee_gbn_cd
             , b.sign_mthd_gbn AS signer_gbn, b.signer_id, c.role_nm AS signer_nm, '' post
             , '' dept_nm
             , b.signer_dept_id, b.last_appr_yn, b.doc_mod_prv_yn, b.line_mod_prv_yn
             , b.bypass_yn, '' sign_tgt_gbn_cd, '' tgt_area_id
          FROM msg_line a
             , msg_step b
             , usr_role c
         WHERE a.sign_line_id = b.sign_line_id
           AND a.aval_end_dt = '99991231235959'
           AND b.aval_end_dt = '99991231235959'
           AND b.sign_mthd_gbn = 'R'
           AND b.signer_id = c.role_id
           AND a.user_id = #{requestUserId}
    </sql>

    <select id="getSignLine" parameterType="hashmap" resultType="string">
        /* mng.getSignLine */
        SELECT sign_line_id
          FROM msg_line
         WHERE aval_end_dt = '99991231235959'
           AND sign_line_nm = #{SIGN_LINE_NM}
           AND user_id = #{USER_ID, jdbcType=VARCHAR}
    </select>

    <update id="deleteSignLine" parameterType="hashmap">
        /* mng.deleteSignLine */
        UPDATE msg_step
           SET aval_end_dt = #{AVAL_END_DT}
         WHERE sign_line_id = #{SIGN_LINE_ID}
           AND aval_end_dt = '99991231235959'
    </update>

    <update id="deleteSignStep" parameterType="hashmap">
        /* mng.deleteSignStep */
        UPDATE msg_line
           SET aval_end_dt = #{AVAL_END_DT}
         WHERE sign_line_id = #{SIGN_LINE_ID}
           AND aval_end_dt = '99991231235959'
    </update>

    <update id="deleteSignTarget" parameterType="hashmap">
        /* mng.deleteSignTarget */
        UPDATE msg_target
           SET aval_end_dt = #{AVAL_END_DT}
         WHERE sign_line_id = #{SIGN_LINE_ID}
           AND aval_end_dt = '99991231235959'
    </update>

    <insert id="insertSignLine" parameterType="hashmap">
        /* mng.insertSignLine */
        INSERT INTO msg_line
            (sign_line_id, aval_end_dt, aval_st_dt, sign_line_nm, sign_line_desc, user_id)
        VALUES
            (#{SIGN_LINE_ID}, '99991231235959', #{AVAL_ST_DT}, #{SIGN_LINE_NM},
             #{SIGN_LINE_DESC, jdbcType=VARCHAR}, #{USER_ID, jdbcType=VARCHAR})
    </insert>

    <insert id="insertSignStep" parameterType="hashmap">
        /* mng.insertSignStep */
        INSERT INTO msg_step
              (sign_line_id, sign_seq, aval_end_dt, aval_st_dt, sign_step_gbn_cd
             , signer_id, signee_gbn_cd, last_appr_yn, sign_mthd_gbn
             , bypass_yn, doc_mod_prv_yn, line_mod_prv_yn, signer_dept_id)
        VALUES
              (#{SIGN_LINE_ID}, #{SIGN_SEQ}, '99991231235959', #{AVAL_ST_DT}, #{SIGN_STEP_GBN_CD}
             , #{SIGNER_ID}, #{SIGNEE_GBN_CD}, #{LAST_APPR_YN, jdbcType=VARCHAR}, #{SIGNER_GBN}
             , #{BYPASS_YN, jdbcType=VARCHAR}, #{DOC_MOD_PRV_YN, jdbcType=VARCHAR}, #{LINE_MOD_PRV_YN, jdbcType=VARCHAR}, #{SIGNER_DEPT_ID, jdbcType=VARCHAR})
    </insert>

    <insert id="insertSignTarget" parameterType="hashmap">
        /* mng.insertSignTarget */
        INSERT INTO msg_target
            (sign_line_id, sign_tgt_gbn_cd, sign_sub_tgt_gbn, tgt_obj_gbn, tgt_area_id, aval_st_dt, aval_end_dt)
        VALUES
            (#{SIGN_LINE_ID}, #{SIGN_TGT_GBN_CD}, #{SIGN_SUB_TGT_GBN, jdbcType=VARCHAR}, #{TGT_OBJ_GBN, jdbcType=VARCHAR}, #{TGT_AREA_ID, jdbcType=VARCHAR}, #{AVAL_ST_DT}, '99991231235959')
    </insert>

	<select id="getApprovalStats" parameterType="hashmap" resultType="encore.meta.mybatis.UpperKeyMap">
        /* mng.getApprovalStats */
        SELECT /* 기안함 */
               NVL(SUM(DECODE(req_status || sign_seq, 'ING0',     1)), 0) draft_ongoing_cnt <!-- 진행중 -->
             , NVL(SUM(DECODE(req_status || sign_seq, 'REJECT0',  1)), 0) draft_rejected_cnt <!-- 반려 -->
             , NVL(SUM(DECODE(req_status || sign_seq, 'CANCEL0',  1)), 0) draft_cancel_cnt <!-- 회수 -->
             , NVL(SUM(DECODE(req_status || sign_seq, 'DONE0',    1)), 0) draft_done_cnt <!-- 결재완료 -->
             , NVL(SUM(DECODE(req_status || sign_seq, 'PARTIAL0', 1)), 0) draft_partial_cnt <!-- 부분승인 -->
               /* 결재함 */
             , NVL(SUM(DECODE(req_status || sign_stat_cd || sign_step_gbn_cd, 'ING00010002',  1, 'ING00010003',     1, 'ING00010004',  1                      )), 0) pending_sanction_cnt <!-- 현재 진행중인 결재/합의/수신 -->
             , NVL(SUM(DECODE(req_status || sign_stat_cd || sign_step_gbn_cd, 'ING00010005',  1, 'REJECT00010005',  1, 'DONE00010005', 1, 'PARTIAL00010005', 1)), 0) pending_read_cnt <!-- 검토를 완료(0004)하지 않은 열람(열람은 진행중/승인완료에서 가능) -->
             , NVL(SUM(DECODE(req_status || sign_stat_cd || sign_step_gbn_cd, 'DONE00010006', 1, 'PARTIAL00010006', 1                                         )), 0) pending_review_cnt <!-- 검토를 완료(0004)하지 않은 참조(참조는 최종 승인 완료시점부터 가능) -->
             , NVL(SUM(DECODE(req_status || sign_stat_cd || sign_step_gbn_cd, 'ING00040002',  1, 'ING00040003',     1, 'ING00040004',  1                      )), 0) pending_ongoing_cnt <!-- 나는 결재를 완료(sign_stat_cd = 0004)했으나, 신청서는 아직 진행중(req_status = ING)인 결재/합의/수신건 -->
               /* 종결함 */
             , NVL(SUM(DECODE(req_status || sign_step_gbn_cd, 'DONE0002',   1, 'DONE0003',   1, 'DONE0004',   1, 'DONE0005',   1, 'DONE0006',   1, 'PARTIAL0002', 1, 'PARTIAL0003', 1, 'PARTIAL0004', 1, 'PARTIAL0005', 1, 'PARTIAL0006', 1)), 0) finalized_approved_cnt <!-- 기안/공람을 제외하고 결재선상에 포함된 건중 승인완료 -->
             , NVL(SUM(DECODE(req_status || sign_step_gbn_cd, 'REJECT0002', 1, 'REJECT0003', 1, 'REJECT0004', 1, 'REJECT0005', 1, 'REJECT0006', 1                                                                                          )), 0) finalized_rejected_cnt <!-- 기안/공람을 제외하고 결재선상에 포함된 건중 반려완료 -->
               /* 공람함 */
             , NVL(SUM(DECODE(req_status || sign_step_gbn_cd, 'DONE0007', 1, 'PARTIAL0007', 1)), 0) shared_cnt <!-- 공람은 승인완료만 -->
          FROM (SELECT i.req_status, r.sign_step_gbn_cd, r.sign_stat_cd, r.sign_seq
                  FROM req_doc_info i
                     , msg_sign_rslt r
                 WHERE i.req_dt BETWEEN #{START_DT} AND #{END_DT}
                 <if test="@Ognl@isNotEmpty(APRV_START_DT) and @Ognl@isNotEmpty(APRV_END_DT)">
                   AND i.apr_dt BETWEEN #{APRV_START_DT} AND #{APRV_END_DT}
                 </if>
                   AND r.aval_end_dt = '99991231235959'
                   AND r.req_doc_id = i.req_doc_id
                   AND r.sign_stat_cd IS NOT NULL
                   AND r.signer_id = DECODE(r.signer_gbn, 'U', #{requestUserId}
                                                        , 'G', (SELECT dept_id FROM usr_user WHERE user_id = #{requestUserId})
                                                        , 'R', (SELECT distinct alloc_id
                                                                  FROM v_usr_alloc
                                                                 WHERE alloc_gbn_cd = '0003'
                                                                   AND user_id = #{requestUserId}
                                                                   AND alloc_id = r.signer_id))
                )
    </select>

    <sql id="getAprReq">
        WITH req AS (SELECT /*+ NO_MERGE */
                            r.req_doc_id
                          , r.up_req_doc_id
                          , r.sign_tgt_gbn_cd
                          , (SELECT cd_nm FROM ms_code WHERE up_cd_id = '9001' AND cd_id = r.sign_tgt_gbn_cd AND lang_cd = #{langCd}) sign_tgt_gbn
                          , r.req_dt
                          , u.user_id
                          , u.user_nm <!-- 신청자명 -->
                          , (SELECT dept_nm FROM usr_dept WHERE dept_id = u.dept_id) req_dept_nm
                          , u2.signer_nm apr_user_nm <!-- 최종 승인자명 -->
                          , NVL((SELECT dept_nm FROM usr_dept WHERE dept_id = u2.signer_dept_id), (SELECT role_nm FROM usr_role WHERE role_id = u2.signer_dept_id)) apr_dept_nm
                          , u2.signer_id apr_user_id
                          , u2.signer_gbn apr_user_gbn
                          , r.req_status
                          , r.sr_no
                          , r.req_nm
                          , r.req_rsn_cd <!-- 신청구분코드 : 옵션에 따라 출력 -->
                          , CASE WHEN r.req_status NOT IN ('ING', 'DONE', 'PARTIAL') THEN NULL
                                 ELSE (SELECT MAX('Y')
                                         FROM msg_sign_rslt s
                                        WHERE s.req_doc_id = r.req_doc_id
                                          AND s.aval_end_dt = '99991231235959'
                                          <!--AND s.sign_seq &lt; 200  결재 + 열람 -->
                                          AND s.sign_stat_cd = '0001'
                                          AND s.signer_id = DECODE(s.signer_gbn, 'U', NVL((SELECT user_id
                                                                                             FROM usr_user_absence
                                                                                            WHERE user_id = s.signer_id
                                                                                              AND start_dt <![CDATA[<=]]> TO_CHAR(sysdate, 'YYYYMMDDHH24MISS')
                                                                                              AND end_dt > TO_CHAR(sysdate, 'YYYYMMDDHH24MISS')
                                                                                              AND alt_user_id = #{requestUserId}), #{requestUserId})
                                                                               , 'G', (SELECT dept_id FROM usr_user WHERE user_id = #{requestUserId})
                                                                               , 'R', (SELECT distinct alloc_id
                                                                                         FROM v_usr_alloc
                                                                                        WHERE alloc_gbn_cd = '0003'
                                                                                          AND user_id = #{requestUserId}
                                                                                          AND alloc_id = s.signer_id))
                             ) END apr_tgt_yn
                          , CASE WHEN r.req_status = 'ING' THEN (SELECT 'Y'
                                                                   FROM v_usr_alloc a
                                                                  WHERE a.user_id = #{requestUserId}
                                                                    AND a.alloc_gbn_cd = '0003'
                                                                    AND a.biz_id = 'NONE'
                                                                    AND a.end_dt = '99991231'
                                                                    AND a.alloc_id = 'META_MASTER')
                                 ELSE NULL
                             END line_mod_prv_yn
                          <!--, CASE WHEN r.req_status IN ('CANCEL') THEN NULL
                                 ELSE (SELECT MAX('Y')
                                         FROM msg_sign_rslt s
                                        WHERE s.req_doc_id = r.req_doc_id
                                          AND s.aval_end_dt = '99991231235959'
                                          AND s.line_mod_prv_yn = 'Y'
                                          AND s.sign_stat_cd = '0001'
                                          AND s.signer_id = DECODE(s.signer_gbn, 'U', #{requestUserId}
                                                                               , 'G', (SELECT dept_id FROM usr_user WHERE user_id = #{requestUserId})
                                                                               , 'R', (SELECT distinct alloc_id
                                                                                         FROM v_usr_alloc
                                                                                        WHERE alloc_gbn_cd = '0003'
                                                                                          AND user_id = #{requestUserId}
                                                                                          AND alloc_id = s.signer_id))
                             ) END line_mod_prv_yn -->
                       FROM req_doc_info r
                          , usr_user u
                          , (SELECT s.req_doc_id
                                  , s.signer_id
                                  , s.signer_gbn
                                  , DECODE(s.signer_gbn, 'U', (SELECT user_nm FROM usr_user WHERE user_id = s.signer_id)
                                                       , 'G', (SELECT dept_nm FROM usr_dept WHERE dept_id = s.signer_id)
                                                       , 'R', (SELECT role_nm FROM usr_role WHERE role_id = s.signer_id)) signer_nm
                                  , s.signer_dept_id
                               FROM (SELECT req_doc_id
                                          , signer_id
                                          , signer_gbn
                                          , signer_dept_id
                                          , RANK() OVER (PARTITION BY req_doc_id ORDER BY sign_seq DESC) rk
                                       FROM msg_sign_rslt
                                      WHERE sign_seq BETWEEN 1 AND 99
                                        AND aval_end_dt = '99991231235959'
                                        AND sign_stat_cd IN ('0002', '0003', '0004', '0006') <!-- 0006 추가 : 내부결재중도 포함  -->
                                      UNION ALL <!-- 참조 내부결재인 경우 신청자가 승인자목록에 나올수 있도록 쿼리 추가 -->
                                     SELECT r.req_doc_id
                                          , r.signer_id
                                          , r.signer_gbn
                                          , r.signer_dept_id
                                          , RANK() OVER (PARTITION BY r.req_doc_id ORDER BY r.sign_seq DESC) rk
                                       FROM msg_sign_rslt r
                                      WHERE sign_seq = 0
                                        AND aval_end_dt = '99991231235959'
                                        AND NOT EXISTS( SELECT 1
                                                          FROM msg_sign_rslt
                                                         WHERE req_doc_id = r.req_doc_id
                                                           AND sign_step_gbn_cd !='0006'
                                                           AND sign_seq != 0 )) s
                              WHERE s.rk = 1) u2
                      WHERE 1 = 1
        <if test="@Ognl@isNotEmpty(REQ_DOC_ID)">
                        AND r.req_doc_id = #{REQ_DOC_ID}
        </if>
        <if test="@Ognl@isNotEmpty(SIGN_TGT_GBN_CD)">
                        AND r.sign_tgt_gbn_cd = #{SIGN_TGT_GBN_CD}
        </if>
        <if test="@Ognl@isNotEmpty(REQ_RSN)">
                        AND r.req_rsn like '%'||#{REQ_RSN}||'%'
        </if>
        <if test="@Ognl@isNotEmpty(REQ_STATUS)">
            <choose>
                <when test="REQ_STATUS == &quot;FINISHED&quot;">
                        AND r.req_status IN ('DONE', 'PARTIAL')
                </when>
                <otherwise>
                        AND r.req_status = #{REQ_STATUS}
                </otherwise>
            </choose>
        </if>
        <if test="@Ognl@isNotEmpty(REQ_USER_NM)">
                        AND (u.user_nm LIKE #{REQ_USER_NM} ||'%' OR u.user_num = #{REQ_USER_NM})
        </if>
        <if test="@Ognl@isNotEmpty(APR_USER_NM)">
                        AND EXISTS (SELECT 1
                                      FROM msg_sign_rslt x
                                         , usr_user y
                                     WHERE x.req_doc_id = r.req_doc_id
                                       AND x.sign_stat_cd = '0004'
                                       AND y.user_id = x.signer_id
                                       AND y.user_nm LIKE #{APR_USER_NM} ||'%'
                                       AND sign_seq != 0
                                       )
        </if>
                        AND req_dt BETWEEN #{START_DT} AND #{END_DT}
        <if test="@Ognl@isNotEmpty(APRV_START_DT) and @Ognl@isNotEmpty(APRV_END_DT)">
                        AND apr_dt BETWEEN #{APRV_START_DT} AND #{APRV_END_DT}
        </if>
                        AND r.req_user_id = u.user_id
                        AND r.req_doc_id = u2.req_doc_id(+))
       ,req_info AS (<!-- 표준 -->
                     SELECT /*+ NO_MERGE */
                            r.req_doc_id
                          , r.up_req_doc_id
                          , r.sr_no
                          , MAX(r.apr_tgt_yn) apr_tgt_yn
                          , MAX(r.line_mod_prv_yn) line_mod_prv_yn
                          , MAX(i.std_area_id) std_area_id
                          , MAX(r.sign_tgt_gbn_cd) sign_tgt_gbn_cd
                          , MAX(r.sign_tgt_gbn) sign_tgt_gbn
                          , MAX(r.req_dt) req_dt
                          , MAX(r.user_id) user_id
                          , MAX(r.user_nm) user_nm
                          , MAX(r.req_dept_nm) req_dept_nm
                          , MAX(r.apr_user_nm) apr_user_nm
                          , MAX(r.apr_dept_nm) apr_dept_nm
                          , MAX(r.apr_user_id) apr_user_id
                          , MAX(r.apr_user_gbn) apr_user_gbn
                          , MAX(r.req_status) req_status
                          , COUNT(i.std_req_id) cnt
                          , MAX(r.req_rsn_cd) req_rsn_cd
                          , MAX(CASE WHEN #{REQ_NM, jdbcType=VARCHAR} IS NOT NULL AND INSTR(i.cntnts_nm, #{REQ_NM, jdbcType=VARCHAR}) > 0 THEN 'Y' WHEN #{REQ_NM, jdbcType=VARCHAR} IS NULL THEN 'Y' END) req_nm_yn
                          , MAX(i.tgt_gbn_cd) tgt_gbn_cd
                          , MAX(i.dom_type_cd) dom_type_cd
                          , MAX(i.cd_gbn_cd) cd_gbn_cd
                          , r.req_nm
                          , MAX(i.term_gbn_cd) term_gbn_cd
                          , '' area_id
                          , '' a_uid
                          , '' dbms_gbn_cd
                       FROM req r
                          , std_req_contents i
                      WHERE r.req_doc_id = i.std_req_id
                      GROUP BY r.req_doc_id, r.up_req_doc_id, r.sr_no, r.req_nm
                      UNION ALL
                     <!-- DBMS -->
                     SELECT /*+ NO_MERGE */
                            r.req_doc_id
                          , r.up_req_doc_id
                          , r.sr_no
                          , MAX(r.apr_tgt_yn) apr_tgt_yn
                          , MAX(r.line_mod_prv_yn) line_mod_prv_yn
                          , '' std_area_id
                          , MAX(r.sign_tgt_gbn_cd) sign_tgt_gbn_cd
                          , MAX(r.sign_tgt_gbn) sign_tgt_gbn
                          , MAX(r.req_dt) req_dt
                          , MAX(r.user_id) user_id
                          , MAX(r.user_nm) user_nm
                          , MAX(r.req_dept_nm) req_dept_nm
                          , MAX(r.apr_user_nm) apr_user_nm
                          , MAX(r.apr_dept_nm) apr_dept_nm
                          , MAX(r.apr_user_id) apr_user_id
                          , MAX(r.apr_user_gbn) apr_user_gbn
                          , MAX(r.req_status) req_status
                          , COUNT(i.job_req_id) cnt
                          , MAX(r.req_rsn_cd) req_rsn_cd
                          , MAX(CASE WHEN #{REQ_NM, jdbcType=VARCHAR} IS NOT NULL AND INSTR(i.job_nm, #{REQ_NM, jdbcType=VARCHAR}) > 0 THEN 'Y' WHEN #{REQ_NM, jdbcType=VARCHAR} IS NULL THEN 'Y' END) req_nm_yn
                          , MAX(i.obj_gbn) tgt_gbn_cd
                          , '' dom_type_cd
                          , '' cd_gbn_cd
                          , r.req_nm
                          , '' term_gbn_cd
                          , MAX(i.area_id) area_id
                          , '' a_uid
                          , MAX(i.dbms_gbn_cd) dbms_gbn_cd
                       FROM req r
                          , mdb_job_req i
                      WHERE r.req_doc_id = i.req_doc_id
                      GROUP BY r.req_doc_id, r.up_req_doc_id, r.sr_no, r.req_nm
                      UNION ALL
                     <!-- 모델 -->
                     <if test='repositoryVer =="da4"'>
                     SELECT /*+ NO_MERGE */
                            r.req_doc_id
                          , r.up_req_doc_id
                          , r.sr_no
                          , MAX(r.apr_tgt_yn) apr_tgt_yn
                          , MAX(r.line_mod_prv_yn) line_mod_prv_yn
                          , '' std_area_id
                          , MAX(r.sign_tgt_gbn_cd) sign_tgt_gbn_cd
                          , MAX(r.sign_tgt_gbn) sign_tgt_gbn
                          , MAX(r.req_dt) req_dt
                          , MAX(r.user_id) user_id
                          , MAX(r.user_nm) user_nm
                          , MAX(r.req_dept_nm) req_dept_nm
                          , MAX(r.apr_user_nm) apr_user_nm
                          , MAX(r.apr_dept_nm) apr_dept_nm
                          , MAX(r.apr_user_id) apr_user_id
                          , MAX(r.apr_user_gbn) apr_user_gbn
                          , MAX(r.req_status) req_status
                          , COUNT(i.mdl_aprv_req_id) cnt
                          , MAX(r.req_rsn_cd) req_rsn_cd
                          , MAX(CASE WHEN #{REQ_NM, jdbcType=VARCHAR} IS NOT NULL AND INSTR(s.foldername, #{REQ_NM, jdbcType=VARCHAR}) > 0 THEN 'Y' WHEN #{REQ_NM, jdbcType=VARCHAR} IS NULL THEN 'Y' END) req_nm_yn
                          , 'MDL' tgt_gbn_cd
                          , '' dom_type_cd
                          , '' cd_gbn_cd
                          , r.req_nm
                          , '' term_gbn_cd
                          , '' area_id
                          , '' a_uid
                          , '' dbms_gbn_cd
                      FROM req r
                     INNER JOIN md_mdl_aprv_req i
                        ON r.req_doc_id = i.req_doc_id
                     INNER JOIN da_modelstru s
                        ON i.log_a_uid = s.a_uid
                       AND i.log_reg_dt &gt;= s.registerdate
                       AND i.log_reg_dt &lt; s.expireddate
                      LEFT OUTER JOIN md_mdl_gap_enttab g
                        ON i.mdl_aprv_req_id = g.mdl_aprv_req_id
                       AND (CASE WHEN s.modeltype = 2 THEN g.ent_tab_type ELSE '0007' END ) = '0007'
                     GROUP BY r.req_doc_id, r.up_req_doc_id, r.sr_no, r.req_nm
                     </if>
                     <if test='repositoryVer =="da5"'>
                     SELECT /*+ NO_MERGE */
                            r.req_doc_id
                          , r.up_req_doc_id
                          , r.sr_no
                          , MAX(r.apr_tgt_yn) apr_tgt_yn
                          , MAX(r.line_mod_prv_yn) line_mod_prv_yn
                          , '' std_area_id
                          , MAX(r.sign_tgt_gbn_cd) sign_tgt_gbn_cd
                          , MAX(r.sign_tgt_gbn) sign_tgt_gbn
                          , MAX(r.req_dt) req_dt
                          , MAX(r.user_id) user_id
                          , MAX(r.user_nm) user_nm
                          , MAX(r.req_dept_nm) req_dept_nm
                          , MAX(r.apr_user_nm) apr_user_nm
                          , MAX(r.apr_dept_nm) apr_dept_nm
                          , MAX(r.apr_user_id) apr_user_id
                          , MAX(r.apr_user_gbn) apr_user_gbn
                          , MAX(r.req_status) req_status
                          , COUNT(i.mdl_aprv_req_id) cnt
                          , MAX(r.req_rsn_cd) req_rsn_cd
                          , MAX(CASE WHEN #{REQ_NM, jdbcType=VARCHAR} IS NOT NULL AND INSTR(m.mdl_nm, #{REQ_NM, jdbcType=VARCHAR}) > 0 THEN 'Y' WHEN #{REQ_NM, jdbcType=VARCHAR} IS NULL THEN 'Y' END) req_nm_yn
                          , 'MDL' tgt_gbn_cd
                          , '' dom_type_cd
                          , '' cd_gbn_cd
                          , r.req_nm
                          , '' term_gbn_cd
                          , '' area_id
                          , MAX(m.mdl_id) a_uid
                          , '' dbms_gbn_cd
                      FROM req r
                     INNER JOIN md_mdl_aprv_req i
                        ON r.req_doc_id = i.req_doc_id
                     INNER JOIN dam_mdl_info m
                        ON m.mdl_id = nvl(i.log_a_uid, i.phy_a_uid)
                       AND m.aval_st_dt <![CDATA[<=]]> i.log_reg_dt
                       AND m.aval_end_dt > i.log_reg_dt
                     GROUP BY r.req_doc_id, r.up_req_doc_id, r.sr_no, r.req_nm
                     </if>
                     <if test='repositoryVer =="da4"'>
                     UNION ALL
                     <!-- 모델변경 -->
                     SELECT /*+ NO_MERGE */
                            r.req_doc_id
                          , r.up_req_doc_id
                          , r.sr_no
                          , MAX(r.apr_tgt_yn) apr_tgt_yn
                          , MAX(r.line_mod_prv_yn) line_mod_prv_yn
                          , MAX(m.stdclsorg) std_area_id
                          , MAX(r.sign_tgt_gbn_cd) sign_tgt_gbn_cd
                          , MAX(r.sign_tgt_gbn) sign_tgt_gbn
                          , MAX(r.req_dt) req_dt
                          , MAX(r.user_id) user_id
                          , MAX(r.user_nm) user_nm
                          , MAX(r.req_dept_nm) req_dept_nm
                          , MAX(r.apr_user_nm) apr_user_nm
                          , MAX(r.apr_dept_nm) apr_dept_nm
                          , MAX(r.apr_user_id) apr_user_id
                          , MAX(r.apr_user_gbn) apr_user_gbn
                          , MAX(r.req_status) req_status
                          , COUNT(t.req_doc_id) cnt
                          , MAX(r.req_rsn_cd) req_rsn_cd
                          , MAX(CASE WHEN #{REQ_NM, jdbcType=VARCHAR} IS NOT NULL
                                      AND INSTR(r.req_nm, #{REQ_NM, jdbcType=VARCHAR}) > 0 THEN 'Y'
                                     WHEN #{REQ_NM, jdbcType=VARCHAR} IS NULL THEN 'Y' END) req_nm_yn
                          , 'MDLCHG' tgt_gbn_cd
                          , '' dom_type_cd
                          , '' cd_gbn_cd
                          , r.req_nm
                          , '' term_gbn_cd
                          , '' area_id
                          , MAX(t.a_uid) AS a_uid
                          , '' dbms_gbn_cd
                      FROM req r
                          ,md_mdl_chg_req_tbl t
                         , da_model m
                     WHERE r.sign_tgt_gbn_cd = '2101'   /* 모델변경신청 */
                       AND r.req_doc_id = t.req_doc_id
                       AND m.a_uid = t.A_UID
                       AND m.expireddate = '99999999999999'
                       AND m.modeltype = 2
                     GROUP BY r.req_doc_id, r.up_req_doc_id, r.sr_no, r.req_nm
                     </if>
                     <if test='repositoryVer =="da5"'>
                     UNION ALL
                     <!-- 모델변경 -->
                     SELECT /*+ NO_MERGE */
                            r.req_doc_id
                          , r.up_req_doc_id
                          , r.sr_no
                          , MAX(r.apr_tgt_yn) apr_tgt_yn
                          , MAX(r.line_mod_prv_yn) line_mod_prv_yn
                          , MAX(m.clas_syst_id) std_area_id
                          , MAX(r.sign_tgt_gbn_cd) sign_tgt_gbn_cd
                          , MAX(r.sign_tgt_gbn) sign_tgt_gbn
                          , MAX(r.req_dt) req_dt
                          , MAX(r.user_id) user_id
                          , MAX(r.user_nm) user_nm
                          , MAX(r.req_dept_nm) req_dept_nm
                          , MAX(r.apr_user_nm) apr_user_nm
                          , MAX(r.apr_dept_nm) apr_dept_nm
                          , MAX(r.apr_user_id) apr_user_id
                          , MAX(r.apr_user_gbn) apr_user_gbn
                          , MAX(r.req_status) req_status
                          , COUNT(t.req_doc_id) cnt
                          , MAX(r.req_rsn_cd) req_rsn_cd
                          , MAX(CASE WHEN #{REQ_NM, jdbcType=VARCHAR} IS NOT NULL
                                      AND INSTR(r.req_nm, #{REQ_NM, jdbcType=VARCHAR}) > 0 THEN 'Y'
                                     WHEN #{REQ_NM, jdbcType=VARCHAR} IS NULL THEN 'Y' END) req_nm_yn
                          , 'MDLCHG' tgt_gbn_cd
                          , '' dom_type_cd
                          , '' cd_gbn_cd
                          , r.req_nm
                          , '' term_gbn_cd
                          , '' area_id
                          , MAX(t.a_uid) AS a_uid
                          , '' dbms_gbn_cd
                      FROM req r
                          ,md_mdl_chg_req_tbl t
                         , dam_mdl_info m
                     WHERE r.sign_tgt_gbn_cd = '2101'   /* 모델변경신청 */
                       AND r.req_doc_id = t.req_doc_id
                       AND m.mdl_id = t.A_UID
                       AND m.aval_end_dt = '99991231235959'
                     GROUP BY r.req_doc_id, r.up_req_doc_id, r.sr_no, r.req_nm
                     </if>
                     <if test='repositoryVer =="da5"'>
                      <!-- 모델권한 신청 -->
                      UNION ALL
                     SELECT /*+ NO_MERGE */
                            r.req_doc_id
                          , r.up_req_doc_id
                          , r.sr_no
                          , MAX(r.apr_tgt_yn) apr_tgt_yn
                          , MAX(r.line_mod_prv_yn) line_mod_prv_yn
                          , '' std_area_id
                          , MAX(r.sign_tgt_gbn_cd) sign_tgt_gbn_cd
                          , MAX(r.sign_tgt_gbn) sign_tgt_gbn
                          , MAX(r.req_dt) req_dt
                          , MAX(r.user_id) user_id
                          , MAX(r.user_nm) user_nm
                          , MAX(r.req_dept_nm) req_dept_nm
                          , MAX(r.apr_user_nm) apr_user_nm
                          , MAX(r.apr_dept_nm) apr_dept_nm
                          , MAX(r.apr_user_id) apr_user_id
                          , MAX(r.apr_user_gbn) apr_user_gbn
                          , MAX(r.req_status) req_status
                          , COUNT(t.req_doc_id) cnt
                          , MAX(r.req_rsn_cd) req_rsn_cd
                          , MAX(CASE WHEN #{REQ_NM, jdbcType=VARCHAR} IS NOT NULL AND INSTR(t.cntnts_nm, #{REQ_NM, jdbcType=VARCHAR}) > 0 THEN 'Y' WHEN #{REQ_NM, jdbcType=VARCHAR} IS NULL THEN 'Y' END) req_nm_yn
                          , 'MDLAUTH' tgt_gbn_cd
                          , '' dom_type_cd
                          , '' cd_gbn_cd
                          , r.req_nm
                          , '' term_gbn_cd
                          , '' area_id
                          , max(t.tgt_stru_id) AS a_uid
                          , '' dbms_gbn_cd
                       FROM req r
                          ,mdl_auth_req_contents t
                     WHERE r.sign_tgt_gbn_cd = '2201'   /* 모델권한신청 */
                       AND r.req_doc_id = t.req_doc_id
                      GROUP BY r.req_doc_id, r.up_req_doc_id, r.sr_no, r.req_nm
                    </if>
                     <if test="@encore.meta.data.DatawareConfigData@getProperty(&quot;common.installedDq&quot;).equals(&quot;Y&quot;)">
                      UNION ALL
                     <!-- 업무규칙 -->
                     SELECT /*+ NO_MERGE */
                            r.req_doc_id
                          , r.up_req_doc_id
                          , r.sr_no
                          , MAX(r.apr_tgt_yn) apr_tgt_yn
                          , MAX(r.line_mod_prv_yn) line_mod_prv_yn
                          , '' std_area_id
                          , MAX(r.sign_tgt_gbn_cd) sign_tgt_gbn_cd
                          , MAX(r.sign_tgt_gbn) sign_tgt_gbn
                          , MAX(r.req_dt) req_dt
                          , MAX(r.user_id) user_id
                          , MAX(r.user_nm) user_nm
                          , MAX(r.req_dept_nm) req_dept_nm
                          , MAX(r.apr_user_nm) apr_user_nm
                          , MAX(r.apr_dept_nm) apr_dept_nm
                          , MAX(r.apr_user_id) apr_user_id
                          , MAX(r.apr_user_gbn) apr_user_gbn
                          , MAX(r.req_status) req_status
                          , COUNT(i.req_doc_id) cnt
                          , MAX(r.req_rsn_cd) req_rsn_cd
                          , MAX(CASE WHEN #{REQ_NM, jdbcType=VARCHAR} IS NOT NULL AND INSTR(i.req_nm, #{REQ_NM, jdbcType=VARCHAR}) > 0 THEN 'Y' WHEN #{REQ_NM, jdbcType=VARCHAR} IS NULL THEN 'Y' END) req_nm_yn
                          , 'BIZRULE' tgt_gbn_cd
                          , '' dom_type_cd
                          , '' cd_gbn_cd
                          , r.req_nm
                          , '' term_gbn_cd
                          , '' area_id
                          , '' a_uid
                          , '' dbms_gbn_cd
                       FROM req r
                          , mdq_br_req i
                      WHERE r.req_doc_id = i.req_doc_id
                      GROUP BY r.req_doc_id, r.up_req_doc_id, r.sr_no, r.req_nm
                    </if>
                    <!-- 코드배포 -->
                      UNION ALL
                     SELECT /*+ NO_MERGE */
                            r.req_doc_id
                          , r.up_req_doc_id
                          , r.sr_no
                          , MAX(r.apr_tgt_yn) apr_tgt_yn
                          , MAX(r.line_mod_prv_yn) line_mod_prv_yn
                          , MAX(i.std_area_id) std_area_id
                          , MAX(r.sign_tgt_gbn_cd) sign_tgt_gbn_cd
                          , MAX(r.sign_tgt_gbn) sign_tgt_gbn
                          , MAX(r.req_dt) req_dt
                          , MAX(r.user_id) user_id
                          , MAX(r.user_nm) user_nm
                          , MAX(r.req_dept_nm) req_dept_nm
                          , MAX(r.apr_user_nm) apr_user_nm
                          , MAX(r.apr_dept_nm) apr_dept_nm
                          , MAX(r.apr_user_id) apr_user_id
                          , MAX(r.apr_user_gbn) apr_user_gbn
                          , MAX(r.req_status) req_status
                          , COUNT(i.req_doc_id) cnt
                          , MAX(r.req_rsn_cd) req_rsn_cd
                          , MAX(CASE WHEN #{REQ_NM, jdbcType=VARCHAR} IS NOT NULL AND INSTR(c.cd_nm, #{REQ_NM, jdbcType=VARCHAR}) > 0 THEN 'Y' WHEN #{REQ_NM, jdbcType=VARCHAR} IS NULL THEN 'Y' END) req_nm_yn
                          , 'CODEDIST' tgt_gbn_cd
                          , '' dom_type_cd
                          , '' cd_gbn_cd
                          , r.req_nm
                          , '' term_gbn_cd
                          , '' area_id
                          , '' a_uid
                          , '' dbms_gbn_cd
                       FROM req r
                          , std_code_dist_req i
                          , std_code c
                      WHERE i.req_doc_id = r.req_doc_id
                        AND c.std_area_id = i.std_area_id
                        AND c.cd_area_id = i.cd_area_id
                        AND c.cd_id = i.cd_id
                        AND i.cd_apr_dt = CASE WHEN i.req_gbn_cd = '0003' THEN c.aval_end_dt ELSE c.aval_st_dt END
                      GROUP BY r.req_doc_id, r.up_req_doc_id, r.sr_no, r.req_nm
                    )
    </sql>

	<select id="getDashboardAprList" parameterType="hashmap" resultType="encore.meta.mybatis.UpperKeyMap">
        /* mng.getDashboardAprList */
        SELECT *
          FROM (SELECT req.req_doc_id, req.req_dt, usr.user_nm req_user_nm, req.req_nm, rlt.sign_step_gbn_cd, rlt.sign_stat_cd, req.sign_tgt_gbn_cd
                     , (SELECT DISTINCT udp_grp_id FROM md_udp_req_contents WHERE req_doc_id = req.req_doc_id) udp_grp_id
                  FROM req_doc_info req
                     , usr_user usr
                     , (SELECT req_doc_id, MIN(sign_step_gbn_cd) sign_step_gbn_cd, MAX(sign_stat_cd) AS sign_stat_cd
                          FROM msg_sign_rslt
                         WHERE ((sign_stat_cd = '0001'
                                 AND sign_step_gbn_cd in ('0001','0002','0003','0004','0006')
                                 <!--AND sign_seq BETWEEN 1 AND 99-->
                                 )
                                or sign_step_gbn_cd in ('0005')
                                or sign_stat_cd in ('0006'))
                           AND (   signer_gbn = 'U' AND signer_id = #{requestUserId}
                                OR signer_gbn = 'U' AND signer_id = NVL((SELECT user_id
                                                                           FROM usr_user_absence
                                                                          WHERE alt_user_id = #{requestUserId}
                                                                            AND start_dt <![CDATA[<=]]> TO_CHAR(sysdate, 'YYYYMMDDHH24MISS')
                                                                            AND end_dt > TO_CHAR(sysdate, 'YYYYMMDDHH24MISS')), #{requestUserId})
                                OR signer_gbn = 'G' AND signer_id = (SELECT dept_id FROM usr_user WHERE user_id = #{requestUserId})
                                OR signer_gbn = 'R' AND signer_id = (SELECT distinct alloc_id
                                                                       FROM v_usr_alloc
                                                                      WHERE user_id = #{requestUserId}
                                                                        AND alloc_gbn_cd = '0003'
                                                                        AND alloc_id = signer_id))
                         GROUP BY req_doc_id) rlt
                 WHERE 1=1
           <choose>
                <when test="@encore.meta.data.DatawareConfigData@getProperty(&quot;sign.process.useReviewStep&quot;).equals(&quot;Y&quot;)">
                    AND req.req_status IN ('ING', 'DONE', 'PARTIAL')
                </when>
                <otherwise>
                    AND req.req_status = 'ING'
                </otherwise>
            </choose>
                   AND usr.user_id = req.req_user_id
                   AND rlt.req_doc_id = req.req_doc_id
                 ORDER BY req_dt DESC)
         WHERE ROWNUM &lt; 11
    </select>

	<select id="getDashboardReqList" parameterType="hashmap" resultType="encore.meta.mybatis.UpperKeyMap">
      /* mng.getDashboardReqList */
         SELECT *
          FROM (SELECT req.req_doc_id, req.req_dt, req.req_nm, req.req_status, req.sign_tgt_gbn_cd
                     , (SELECT DISTINCT udp_grp_id FROM md_udp_req_contents WHERE req_doc_id = req.req_doc_id) udp_grp_id
                  FROM req_doc_info req
                 WHERE EXISTS (SELECT 1
                                 FROM msg_sign_rslt
                                WHERE req_doc_id = req.req_doc_id
                                  AND sign_seq = 0
                                  AND signer_id = :requestUserId/*#{requestUserId}*/)
                 ORDER BY req_dt DESC) t1
         WHERE 1=1
         limit 10
    </select>


	<select id="getAprReqList" parameterType="hashmap" resultType="encore.meta.mybatis.UpperKeyMap">
        /* mng.getAprReqList */
        <include refid="getAprReq"/>
        <include refid="pagingHeader"/>
        SELECT DISTINCT
               i.req_doc_id
             , i.up_req_doc_id
             , i.sr_no
             , i.std_area_id
             , i.sign_tgt_gbn_cd
             , i.sign_tgt_gbn
             , i.req_nm
             , i.req_dt
             , i.user_id
             , i.user_nm
             , i.req_dept_nm
             , i.apr_user_nm
             , i.apr_dept_nm
             , i.apr_user_id
             , i.apr_user_gbn
             , i.req_status
             , i.cnt
             , SUM(i.cnt) OVER() tot_cnt
             , i.tgt_gbn_cd
             , i.dom_type_cd
             , i.cd_gbn_cd
             , i.term_gbn_cd
             , i.apr_tgt_yn
             , i.line_mod_prv_yn
             , s.sign_seq
             , s.sign_step_gbn_cd
             , i.area_id
             <if test='repositoryVer =="da4"'>
             , replace(md_etc.get_area_nm(i.area_id), '.', '>') mdl_path
             </if>
             <if test='repositoryVer =="da5"'>
             , md_etc_v5.get_area_path_nm(i.area_id) mdl_path
             </if>
             , a_uid
             , i.dbms_gbn_cd
          FROM req_info i
             , msg_sign_rslt s
             , req r
         WHERE (i.req_nm_yn = 'Y'
             <if test ="@Ognl@isNotEmpty(REQ_NM)">
                 OR UPPER(r.req_nm) LIKE '%'|| UPPER(#{REQ_NM, jdbcType=VARCHAR}) ||'%'
             </if>
                )
           AND s.req_doc_id = i.req_doc_id
           AND s.aval_end_dt = '99991231235959'
           AND s.sign_seq = (SELECT MAX(t.sign_seq)
                               FROM msg_sign_rslt t
                              WHERE t.req_doc_id = s.req_doc_id
                                AND t.aval_end_dt = '99991231235959'
                                AND t.sign_stat_cd IS NOT NULL
                                AND t.sign_seq &lt; 100)
           AND r.req_doc_id = i.req_doc_id
        <if test="@Ognl@isNotEmpty(APR_TGT_YN)">
            <choose>
                <when test="APR_TGT_YN == &quot;Y&quot;">
                    AND i.apr_tgt_yn = 'Y'
                </when>
                <when test="APR_TGT_YN == &quot;N&quot;">
                    AND i.apr_tgt_yn != 'Y'
                </when>
            </choose>
        </if>
        <if test="@Ognl@isNotEmpty(sortParams)">
            <foreach item="item" collection="sortParams" open="ORDER BY" separator=",">
                ${item.property} ${item.direction}
            </foreach>
        </if>
        <if test="@Ognl@isEmpty(sortParams)">
         ORDER BY i.req_dt DESC
        </if>
        <include refid="pagingFooter"/>
    </select>

    <select id="getAprReqListCnt" parameterType="hashmap" resultType="int">
        /* mng.getAprReqListCnt */
        <include refid="getAprReq"/>
        SELECT COUNT(DISTINCT i.req_doc_id)
          FROM req_info i
             , msg_sign_rslt s
         WHERE i.req_nm_yn = 'Y'
           AND s.req_doc_id = i.req_doc_id
           AND s.aval_end_dt = '99991231235959'
           AND s.sign_seq = (SELECT MAX(t.sign_seq)
                               FROM msg_sign_rslt t
                              WHERE t.req_doc_id = s.req_doc_id
                                AND t.aval_end_dt = '99991231235959'
                                AND t.sign_stat_cd IS NOT NULL
                                AND t.sign_seq &lt; 100)
        <if test="@Ognl@isNotEmpty(APR_TGT_YN)">
            <choose>
                <when test="APR_TGT_YN == &quot;Y&quot;">
                    AND i.apr_tgt_yn = 'Y'
                </when>
                <when test="APR_TGT_YN == &quot;N&quot;">
                    AND i.apr_tgt_yn != 'Y'
                </when>
            </choose>
        </if>
        <!--<if test="@Ognl@isNotEmpty(APR_USER_NM)">
           AND EXISTS
              (SELECT 1
                 FROM msg_sign_rslt x
                    , usr_user un
                    , usr_dept dn
                WHERE x.req_doc_id = i.req_doc_id
                  AND x.aval_end_dt = '99991231235959'
                  AND x.sign_seq &gt; 0
                  AND un.user_id(+) = x.signer_id
                  AND un.user_nm(+) LIKE #{APR_USER_NM} ||'%'
                  AND dn.dept_id(+) = x.signer_id
                  AND dn.dept_nm(+) LIKE #{APR_USER_NM} ||'%')
        </if>-->
    </select>

    <select id="getReqDocId" parameterType="hashmap" resultType="string">
        /* mng.getReqDocId */
        <choose>
            <when test="@Ognl@isNotEmpty(modelDBGapAnalysisSpaceId)">
        SELECT #{modelDBGapAnalysisSpaceId}
            </when>
            <otherwise>
		SELECT TO_CHAR(current_timestamp, 'YYYYMMDD') || ':' || LPAD(nextval('req_seq')::varchar, 5, '0') 
            </otherwise>
        </choose>
    </select>

    <insert id="insertReqDocInfo" parameterType="hashmap">
        /* mng.insertReqDocInfo */

        INSERT INTO req_doc_info
            (req_doc_id, sign_tgt_gbn_cd, req_dt, req_user_id, req_status
            , up_req_doc_id, sign_line_id, sr_no, req_nm, req_rsn, req_rsn_cd)
        VALUES
            (#{REQ_DOC_ID}, #{SIGN_TGT_GBN_CD}, #{CUR_DATE}, #{requestUserId}, 'ING'
            , #{UP_REQ_DOC_ID}, 'N/A', #{SR_NO, jdbcType=VARCHAR}, #{REQ_NM}, #{REQ_RSN, jdbcType=VARCHAR}, #{REQ_RSN_CD, jdbcType=VARCHAR});

        <if test="@Ognl@isNotEmpty(SIGN_GBN)">
            <if test="SIGN_GBN == &quot;0006&quot;">
                UPDATE req_doc_info
                   SET req_status = 'DONE'
                 WHERE req_doc_id = #{REQ_DOC_ID};

			    UPDATE msg_sign_rslt r
                   SET sign_stat_cd = '0004'
                     , last_hist_dt = TO_CHAR(LOCALTIMESTAMP, 'YYYYMMDDHH24MISS')
                     , read_yn = 'N'
                 WHERE r.req_doc_id = #{UP_REQ_DOC_ID}
                   AND r.aval_end_dt = '99991231235959'
                   AND r.sign_step_gbn_cd = '0006'
                   AND r.signer_id = 
						case
							when r.signer_gbn = 'U' then #{requestUserId}
							when r.signer_gbn = 'G' then (
								select dept_id from	usr_user
					  				where user_id = #{requestUserId})
							when r.signer_gbn = 'R' then (
								select distinct alloc_id from v_usr_alloc
									where alloc_gbn_cd = '0003'
									and user_id = #{requestUserId}
									and alloc_id = r.signer_id)
						end;
           </if>
        </if>
    </insert>

    <insert id="insertMsgSignRslt" parameterType="hashmap">
        /* mng.insertMsgSignRslt */
        INSERT INTO msg_sign_rslt
              (req_doc_id, sign_seq, signer_gbn, signer_id, signer_dept_id, last_appr_yn, last_hist_dt
              , sign_cmmt, sign_stat_cd, sign_step_gbn_cd, doc_mod_prv_yn, line_mod_prv_yn, aval_st_dt, aval_end_dt)
	        /* SIGN_SEQ: 0 (기안) */
	        SELECT #{REQ_DOC_ID}, 0, 'U', #{requestUserId}, (SELECT dept_id FROM usr_user WHERE user_id = #{requestUserId}), 'N', #{CUR_DATE}
	             , #{SIGN_CMMT, jdbcType=VARCHAR}, '0004', '0001', 'Y', 'Y', #{CUR_DATE}, '99991231235959'
	
	         UNION ALL
	         /* 첫번째 단계를 찾아 진행중(0001)로 표시 */
	        <foreach collection="SIGN_STEPS" item="STEP" open="" separator="UNION ALL" close="">
	        SELECT #{REQ_DOC_ID}, (#{STEP.SIGN_SEQ}::varchar)::numeric , #{STEP.SIGNER_GBN}, #{STEP.SIGNER_ID}, #{STEP.SIGNER_DEPT_ID, jdbcType=VARCHAR}, #{STEP.LAST_APPR_YN, jdbcType=VARCHAR}, #{CUR_DATE}
	             , '', CASE WHEN (#{STEP.SIGN_SEQ}::varchar)::numeric  = 1 THEN '0001' /* 첫번째 결재자 상태: 진행중 */
	                        WHEN #{STEP.SIGN_STEP_GBN_CD} = '0006' THEN CASE WHEN #{STEP.SIGNER_ID} = #{requestUserId} THEN '0004'
	                                                                         ELSE '0001'
	                                                                     END /* 열람자 상태: 진행중 */
	                        ELSE ''
	                    END
	             , #{STEP.SIGN_STEP_GBN_CD}, #{STEP.DOC_MOD_PRV_YN, jdbcType=VARCHAR}, #{STEP.LINE_MOD_PRV_YN, jdbcType=VARCHAR}
	             , #{CUR_DATE}, '99991231235959'
	        </foreach>
    </insert>

	<select id="getSignSteps" parameterType="hashmap" resultType="encore.meta.mybatis.UpperKeyMap">
        /* mng.getSignSteps */
        SELECT sign_seq, signer_gbn, signer_id, signer_dept_id, sign_step_gbn_cd
             , sign_stat_cd, read_yn, last_appr_yn, doc_mod_prv_yn, line_mod_prv_yn
             , bypass_yn
          FROM msg_sign_rslt a
         WHERE req_doc_id = #{REQ_DOC_ID}
           AND aval_end_dt = '99991231235959'
         ORDER BY sign_seq
    </select>

    <select id="getLastStepYn" parameterType="hashmap" resultType="string">
       /* mng.getLastStepYn */
        <!-- 맨 마지막 승인단계('0002/0003/0004')가 진행중('0001/0006')이면 LAST 단계 Y -->
        SELECT COALESCE(MAX('Y'), 'N')
          FROM msg_sign_rslt r
         WHERE r.req_doc_id = #{REQ_DOC_ID}
           AND r.aval_end_dt = '99991231235959'
           AND r.sign_seq &lt; 100
           AND r.sign_stat_cd IN ('0001', '0006') <!-- 진행중/내부결재중 -->
           AND r.last_appr_yn = 'Y'
           <!-- 역할일 경우 match 되는 경우가 없어 마지막을 표시하지 않음. 2017.09.21 -->
           AND r.signer_id =  CASE  WHEN r.signer_gbn =  'U' THEN  #{requestUserId}
                                                 WHEN r.signer_gbn =  'G' THEN  (SELECT dept_id FROM usr_user WHERE user_id = #{requestUserId})
                                                 WHEN r.signer_gbn =  'R' THEN  (SELECT distinct alloc_id
                                                          FROM v_usr_alloc
                                                         WHERE alloc_gbn_cd = '0003'
                                                           AND user_id = #{requestUserId}
                                                           AND alloc_id = r.signer_id) END
           <!-- 아직 MSG_SIGN_RSLT에 입력전이므로 나를 제외한 동일한 SIGN_SEQ의 모든 결재자들이 결재를 마친 경우에만 -->
           AND 1 = (SELECT SUM( CASE  WHEN s.sign_stat_cd =  '0001' THEN  1 WHEN s.sign_stat_cd =  '0006' THEN  1 ELSE  0 END )
                      FROM msg_sign_rslt s
                     WHERE s.req_doc_id = #{REQ_DOC_ID}
                       AND s.aval_end_dt = '99991231235959'
                       AND s.sign_seq = r.sign_seq
                     GROUP BY s.sign_seq)
    </select>

    <select id="getCheckApprovable" parameterType="hashmap" resultType="string">
        /* mng.getCheckApprovable */
        <choose>
            <when test="SIGN_STAT_CD == &quot;0002&quot;">
                SELECT CASE WHEN coalesce(signed_cnt, 0)=0 THEN  'OK'  ELSE 'UNABLE_REQUEST' END
                  FROM (SELECT COUNT(1) signed_cnt
                          FROM msg_sign_rslt
                         WHERE req_doc_id = :REQ_DOC_ID/*#{REQ_DOC_ID}*/
                           AND aval_end_dt = '99991231235959'
                           AND sign_seq = 1
                           AND sign_stat_cd IN ('0003', '0004', '0005') /*<!-- 반려/승인/부분승인 -->*/
                        ) alias3
			</when>
            <when test="SIGN_STAT_CD == &quot;0003&quot; || SIGN_STAT_CD == &quot;0004&quot;">
                SELECT CASE WHEN NVL(seq, 0) = 0
                                THEN 'UNABLE_REQUEST'
                            ELSE 'OK'
                        END
                  FROM (SELECT MAX(seq) seq, MAX(signer_id) signer_id
                          FROM (SELECT 1 seq
                                     , (SELECT #{APR_USER_ID} FROM usr_user u WHERE u.user_id = r.signer_id AND r.signer_id = #{APR_USER_ID}
                                         UNION
                                        SELECT #{APR_USER_ID} FROM usr_user d WHERE d.dept_id = r.signer_id AND d.user_id = #{APR_USER_ID}) signer_id
                                  FROM msg_sign_rslt r
                                 WHERE r.req_doc_id = #{REQ_DOC_ID}
                                   AND r.aval_end_dt = '99991231235959'
                                   AND r.sign_stat_cd IN ('0001', '0006') <!-- 진행중/내부결재중 -->
                                ) t1
                        ) t2
            </when>
        </choose>
    </select>

	<select id="getAprStatusList" parameterType="hashmap" resultType="encore.meta.mybatis.UpperKeyMap">
        /* mng.getAprStatusList */
		 SELECT d.sign_tgt_gbn_cd
             , d.req_status
             , r.sign_step_gbn_cd
             , CASE WHEN r.sign_seq >= 200 THEN NULL ELSE r.sign_seq END sign_seq
             , r.signer_gbn
             , r.signer_id
             , CASE WHEN r.signer_gbn='U' THEN (SELECT user_nm FROM usr_user WHERE user_id = r.signer_id)                                   WHEN r.signer_gbn='G' THEN (SELECT dept_nm FROM usr_dept WHERE dept_id = r.signer_id)                                   WHEN r.signer_gbn='R' THEN (SELECT role_nm FROM usr_role WHERE role_id = r.signer_id) END  signer_nm
             , r.sign_cmmt
             , (SELECT dept_nm FROM usr_dept WHERE dept_id = r.signer_dept_id
					UNION ALL
                SELECT role_nm FROM usr_role WHERE role_id = r.signer_dept_id) dept_nm
             , r.sign_stat_cd
             , CASE WHEN coalesce(r.sign_stat_cd::text, '') = '' THEN  '' WHEN r.sign_stat_cd='0001' THEN  ''  ELSE last_hist_dt END  sign_dt
             /*, CASE WHEN r.sign_stat_cd IS NOT NULL THEN r.sign_seq END || '/' || MAX(r.sign_seq) OVER() sign_step*/
          FROM msg_sign_rslt r
             , req_doc_info d
         WHERE r.req_doc_id = :REQ_DOC_ID/*#{REQ_DOC_ID}*/
           AND r.aval_end_dt = '99991231235959'
           AND r.sign_step_gbn_cd IN ('0002', '0003', '0004', '0006')
           AND d.req_doc_id = r.req_doc_id
         ORDER BY r.sign_seq

    </select>

    <!-- 고도화결재 by hdhong -->
	<select id="getAllUser" parameterType="hashmap" resultType="encore.meta.mybatis.UpperKeyMap">
        /* mng.getAllUser */
        SELECT a.user_id
              ,a.login_id
              ,a.user_nm
              ,a.cel_phone
              ,a.home_phone
              ,a.office_phone
              ,a.email
              ,a.access_yn
              ,a.post
              ,b.dept_nm
              ,b.dept_id
          FROM usr_user a, usr_dept b
         WHERE 1 = 1
          FROM usr_user a
			LEFT OUTER JOIN usr_dept b ON (a.dept_id = b.dept_id)
		<if test="@Ognl@isNotEmpty(LOGIN_ID)">
           AND a.login_id LIKE '%' || #{LOGIN_ID} || '%'
        </if>
        <if test="@Ognl@isNotEmpty(USER_NM)">
           AND a.user_nm LIKE '%' || #{USER_NM} || '%'
        </if>

        <if test="@Ognl@isNotEmpty(DEPT_ID)">
           AND a.dept_id IN (SELECT dept_id
                               FROM usr_dept
                              WHERE del_yn = 'N'
                                AND dept_id = #{DEPT_ID}
            <if test="@Ognl@isNotEmpty(INCLUDE_CHILD_DEPT)">
                              UNION ALL
                             SELECT dept_id
                               FROM usr_dept
                              WHERE del_yn = 'N'
                              START WITH up_dept_id = #{DEPT_ID}
                            CONNECT BY PRIOR dept_id = up_dept_id
            </if>
                            )
        </if>
           AND TO_CHAR(SYSDATE, 'YYYYMMDD') BETWEEN a.start_dt AND a.end_dt
           AND a.end_dt <![CDATA[>=]]> to_char(sysdate,'yyyymmdd')
           AND a.id_end_dt <![CDATA[>]]> to_char(sysdate,'yyyymmdd')
         ORDER BY a.user_nm
    </select>

	<select id="getAllDepartment" parameterType="hashmap" resultType="encore.meta.mybatis.UpperKeyMap">
		WITH RECURSIVE cte AS (
	        SELECT 1 lvl
	        	--,CASE  WHEN CONNECT_BY_ISLEAF =  1 THEN  'true' ELSE  'false' END  AS leaf
	        	,ARRAY[ row_number() OVER (ORDER BY  org_order, dept_nm) ] as hierarchy
	        	, a.*
	          FROM usr_dept a WHERE up_dept_id = 'ROOT'
	 		 UNION ALL
	        SELECT (c.lvl+1) lvl
	        	--,CASE  WHEN CONNECT_BY_ISLEAF =  1 THEN  'true' ELSE  'false' END  AS leaf
	        	, array_append(c.hierarchy, row_number() OVER (ORDER BY  a.org_order, a.dept_nm))  as hierarchy
	        	, a.*
	          FROM usr_dept a JOIN cte c ON (c.dept_id = a.up_dept_id)
		) SELECT dept_id,dept_nm,dept_desc
				,CASE  WHEN up_dept_id =  '0' THEN  'ROOT' ELSE  up_dept_id END  up_dept_id
				,org_order,dept_tel_no,dept_fax_no
	        	,lvl
			   , not exists (select 1 from cte p where c.dept_id = p.up_dept_id) leaf
		    FROM cte c 
		    WHERE del_yn = 'N' 
		    ORDER BY hierarchy
    </select>

    <insert id="insertDepartment" parameterType="hashmap">
        /* mng.insertDepartment */
        INSERT INTO usr_dept
            (dept_id, dept_nm, dept_desc, up_dept_id, org_order, dept_tel_no, dept_fax_no, del_yn)
        VALUES
            (#{DEPT_ID}, #{DEPT_NM}, #{DEPT_DESC}, #{UP_DEPT_ID}, #{ORG_ORDER}, #{DEPT_TEL_NO, jdbcType=VARCHAR}, #{DEPT_FAX_NO, jdbcType=VARCHAR}, 'N')
    </insert>

    <update id="updateDepartment" parameterType="hashmap">
        /* mng.updateDepartment */
        UPDATE usr_dept
        <set>
            <if test="@Ognl@isNotEmpty(DEPT_NM)">dept_nm = #{DEPT_NM},</if>
            <if test="@Ognl@isNotEmpty(DEPT_DESC)">dept_desc = #{DEPT_DESC},</if>
            <if test="@Ognl@isNotEmpty(DEPT_TEL_NO)">dept_tel_no = #{DEPT_TEL_NO},</if>
            <if test="@Ognl@isNotEmpty(DEPT_FAX_NO)">dept_fax_no = #{DEPT_FAX_NO},</if>
            <if test="@Ognl@isNotEmpty(ORG_ORDER)">org_order = #{ORG_ORDER},</if>
            <if test="@Ognl@isNotEmpty(UP_DEPT_ID)">up_dept_id = #{UP_DEPT_ID}</if>
        </set>
         WHERE dept_id = #{DEPT_ID}
    </update>


    <delete id="deleteDepartment" parameterType="hashmap">
        /* mng.deleteDepartment */
        delete from usr_dept
        where dept_id = #{deptId}
    </delete>


    <delete id="deleteAllChildDepartment" parameterType="string">
        /* mng.deleteAllChildDepartment */
        delete from usr_dept
        where dept_id in (WITH RECURSIVE cte AS (
							select a.dept_id, a.up_dept_id from usr_dept a WHERE up_dept_id = #{upDeptId}
  							UNION ALL
							select a.dept_id, a.up_dept_id from usr_dept a JOIN cte c ON (c.dept_id = a.up_dept_id)
							) SELECT dept_id FROM cte
			)
	</delete>

	<select id="getUsrCode" parameterType="hashmap" resultType="encore.meta.mybatis.UpperKeyMap">
        /* mng.getUsrCode */
        SELECT cd_id, cd_nm
          FROM usr_code
         WHERE up_cd_id = #{UP_CD_ID}
           AND aval_end_dt = '99991231235959'
           AND use_yn = 'Y'
         ORDER BY show_ord, cd_nm
    </select>

	<select id="getUsrCodeTree" parameterType="hashmap" resultType="encore.meta.mybatis.UpperKeyMap">
        /* mng.getUsrCodeTree */
    WITH RECURSIVE cte AS (
	        SELECT *
	          FROM usr_code 
	          WHERE up_cd_id = 'ROOT'
	           AND aval_end_dt = '99991231235959'
	           <if test="@Ognl@isNotEmpty(SEARCH_WORD)">
		            <if test="@Ognl@isNotEmpty(SEARCH_TYPE) and SEARCH_TYPE == &quot;0001&quot;">
		           AND cd_id LIKE #{SEARCH_WORD}
		            </if>
		        </if>
	 		 UNION ALL
	        SELECT a.*
	          FROM usr_code a
	          JOIN cte c 
	            ON c.cd_id = a.up_cd_id
	           AND a.aval_end_dt = '99991231235959'
	           <if test="@Ognl@isNotEmpty(SEARCH_WORD)">
	            <if test="@Ognl@isNotEmpty(SEARCH_TYPE) and SEARCH_TYPE == &quot;0002&quot;">
	           AND a.cd_nm LIKE #{SEARCH_WORD}
	            </if>
	           </if>
		) SELECT up_cd_id || '_' || cd_id "id",cd_id,up_cd_id,cd_nm,show_ord,cd_desc
	        --,CASE  WHEN CONNECT_BY_ISLEAF =  0 THEN  'false' ELSE  'true' END  "leaf"
	        , not exists (select 1 from cte p where c.cd_id = p.up_cd_id) "leaf"
	        ,use_yn 
	        FROM cte c 
	        ORDER BY  nullif(show_ord,'')::numeric
    </select>

    <insert id="insertUsrCode" parameterType="hashmap">
        /* mng.insertUsrCode */
        INSERT INTO usr_code (cd_id, up_cd_id, cd_nm, show_ord, cd_desc, aval_st_dt, aval_end_dt, use_yn)
        VALUES (#{CD_ID}, #{UP_CD_ID}, #{CD_NM},  #{SHOW_ORD, jdbcType=VARCHAR}, #{CD_DESC, jdbcType=VARCHAR}, TO_CHAR(SYSDATE, 'YYYYMMDDHH24MISS'), '99991231235959', #{USE_YN})
    </insert>

    <update id="updateUsrCode" parameterType="hashmap">
        /* mng.updateUsrCode */
        UPDATE usr_code
           SET cd_nm = #{CD_NM}
              ,show_ord = #{SHOW_ORD, jdbcType=VARCHAR}
              ,cd_desc = #{CD_DESC, jdbcType=VARCHAR}
              ,use_yn = #{USE_YN}
         WHERE up_cd_id = #{UP_CD_ID}
           AND cd_id = #{CD_ID}
           AND aval_end_dt = '99991231235959'
    </update>

    <delete id="deleteUsrCode" parameterType="hashmap">
        /* mng.deleteUsrCode */
        UPDATE usr_code
           SET use_yn = 'N' /*aval_end_dt = TO_CHAR(SYSDATE, 'YYYYMMDDHH24MISS')*/
         WHERE up_cd_id = #{UP_CD_ID}
           AND cd_id = #{CD_ID}
           AND aval_end_dt = '99991231235959'
    </delete>

	<select id="getGroupListByAllocUser" parameterType="hashmap" resultType="encore.meta.mybatis.UpperKeyMap">
        /* mng.getGroupListByAllocUser */
	  WITH menu_role AS (SELECT a.user_id, c.role_id, c.role_nm
	                             FROM usr_user a, v_usr_alloc b, usr_role c
	                            WHERE a.user_id = b.user_id
	                              AND a.user_id = :USER_ID/*#{USER_ID}*/
	                              AND b.alloc_id = c.role_id
	                              AND b.alloc_gbn_cd = '0003'
	                              AND c.role_type_cd = 'MENU'
	                            GROUP BY a.user_id, c.role_id, c.role_nm)
	            ,sign_role AS (SELECT a.user_id, c.role_id, c.role_nm
	                             FROM usr_user a, v_usr_alloc b, usr_role c
	                            WHERE a.user_id = b.user_id
	                              AND a.user_id = :USER_ID/*#{USER_ID}*/
	                              AND b.alloc_id = c.role_id
	                              AND b.alloc_gbn_cd = '0003'
	                              AND c.role_type_cd = 'SIGN'
	                            GROUP BY a.user_id, c.role_id, c.role_nm)
	        SELECT (SELECT string_agg(role_id, ' ' ORDER BY role_id) FROM menu_role) menu_grp_id
	             , (SELECT string_agg(role_id, ' ' ORDER BY role_id) FROM sign_role) sign_grp_id
    </select>

	<select id="getContextModelTreeByAllocUser" parameterType="hashmap" resultType="encore.meta.mybatis.UpperKeyMap">
        /* mng.getContextModelTreeByAllocUser */
        WITH mtree AS (SELECT LEVEL lvl
                             ,a.a_uid
                             ,a.p_uid
                             ,a.foldername
                             ,a.registerdate
                             ,SYS_CONNECT_BY_PATH(a.a_uid, '/') ids
                             ,ROWNUM rnum
                             ,a.ismodel
                             ,a.modeltype
                         FROM da_modelstru a
                        START WITH a.p_uid = 'ROOT'
                          AND a.expireddate = '99999999999999'
                          AND a.modeltype IN (9, 0)
                      CONNECT BY PRIOR a.a_uid = a.p_uid
                          AND a.expireddate = '99999999999999'
                        ORDER SIBLINGS BY a.foldername)
            ,alloc AS (SELECT m.ids FROM mtree m WHERE m.modeltype = 0)
        SELECT m.a_uid id
              ,m.p_uid pid
              ,m.foldername model_name
              ,DECODE(m.ismodel, 'M', 'Y') model_yn
              ,m.registerdate
              ,ua.prv_gbn
              ,DECODE(ua.user_id, null, 'false', 'true') "checked"
              ,DECODE(m.modeltype, 9, 'folder', 'icon-logical-model') "iconCls"
          FROM mtree m
              ,v_usr_alloc ua
         WHERE EXISTS (SELECT 1 FROM alloc al WHERE INSTR(al.ids, m.ids) = 1 )
           AND m.a_uid = ua.alloc_id(+)
           AND ua.user_id(+) = #{USER_ID}
         ORDER BY m.rnum
    </select>

	<select id="getConceptModelTreeByAllocUser" parameterType="hashmap" resultType="encore.meta.mybatis.UpperKeyMap">
        /* model.getConceptModelTreeByAllocUser */
        WITH mtree AS (SELECT LEVEL lvl
                             ,a.a_uid
                             ,a.p_uid
                             ,a.foldername
                             ,a.registerdate
                             ,SYS_CONNECT_BY_PATH(a.a_uid, '/') ids
                             ,ROWNUM rnum
                             ,a.ismodel
                             ,a.modeltype
                         FROM da_modelstru a
                        START WITH a.p_uid = 'ROOT'
                          AND a.expireddate = '99999999999999'
                          AND a.modeltype IN (9, 1)
                      CONNECT BY PRIOR a.a_uid = a.p_uid
                          AND a.expireddate = '99999999999999'
                          AND a.modeltype IN (9, 1)
                        ORDER SIBLINGS BY a.foldername)
            ,alloc AS (SELECT m.ids FROM mtree m WHERE m.modeltype = 1)
        SELECT m.a_uid id
              ,m.p_uid pid
              ,m.foldername model_name
              ,DECODE(m.ismodel, 'M', 'Y') model_yn
              ,m.registerdate
              ,ua.prv_gbn
              ,DECODE(ua.user_id, null, 'false', 'true') "checked"
              ,DECODE(m.modeltype, 9, 'folder', 'icon-logical-model') "iconCls"
          FROM mtree m
              ,v_usr_alloc ua
         WHERE EXISTS (SELECT 1 FROM alloc al WHERE INSTR(al.ids, m.ids) = 1 )
           AND m.a_uid = ua.alloc_id(+)
           AND ua.user_id(+) = #{USER_ID}
         ORDER BY m.rnum
    </select>

	<select id="getLogicalPhysicalModelTreeByAllocUser" parameterType="hashmap" resultType="encore.meta.mybatis.UpperKeyMap">
        /* mng.getLogicalPhysicalModelTreeByAllocUser */
        WITH mtree AS (SELECT LEVEL lvl
                             ,a.a_uid
                             ,a.p_uid
                             ,a.foldername
                             ,a.registerdate
                             ,ROWNUM rnum
                             ,SYS_CONNECT_BY_PATH(a.a_uid, '/') ids
                             ,a.ismodel
                             ,b.m_uid phy_id
                             ,a.modeltype
                             ,CONNECT_BY_ISLEAF leaf
                         FROM da_modelstru a
                         LEFT OUTER JOIN da_model b
                           ON b.a_uid = a.a_uid
                          AND b.expireddate = '99999999999999'
                          AND b.modeltype = 3
                        START WITH a.p_uid = 'ROOT'
                          AND a.expireddate = '99999999999999'
                          AND (a.modeltype = 2 OR a.ismodel = 'F')
                      CONNECT BY PRIOR a.a_uid = a.p_uid
                          AND a.expireddate = '99999999999999'
                          AND a.modeltype in (2,3,9)
                        ORDER SIBLINGS BY a.foldername)
            ,alloc AS (SELECT m.ids FROM mtree m WHERE m.modeltype = 2)
        SELECT m.lvl
              ,m.a_uid id
              ,m.p_uid pid
              ,DECODE(m.phy_id, NULL, m.a_uid, m.phy_id) phy_id
              ,m.foldername model_name
              ,DECODE(m.ismodel, 'M', 'Y') model_yn
              ,m.registerdate
              ,ua.prv_gbn
              ,DECODE(ua.user_id, null, 'false', 'true') "checked"
              <!--,DECODE(m.modeltype, 9, 'folder', 'icon-logical-model') "iconCls"-->
              ,DECODE(leaf, '1', 'icon-logical-model', 'folder') "iconCls"
          FROM mtree m
              ,v_usr_alloc ua
         WHERE m.a_uid = ua.alloc_id(+)
           AND ua.user_id(+) = #{USER_ID}
           AND EXISTS (SELECT 1 FROM alloc al WHERE INSTR(al.ids, m.ids) = 1)
         ORDER BY m.rnum
    </select>

	<select id="getBizAreaTreeByAllocUser" parameterType="hashmap" resultType="encore.meta.mybatis.UpperKeyMap">
        /* mng.getBizAreaTreeByAllocUser */
	      with recursive cte as (
				 select ba.*
				 	  , array[row_number() over(order by ba.biz_name)] hierarchy
				   FROM mdq_bizarea ba
				  where ba.biz_pid = 'ROOT'
				    and ba.expireddate = '99991231235959'
				 union all
				  select ba.*
				  	   , array_append(c.hierarchy, row_number() over(order by ba.biz_name))
				    FROM mdq_bizarea ba
				    join cte c 
				      on c.biz_id = ba.biz_pid
				     and ba.expireddate = '99991231235959' 
			)  SELECT ba.biz_pid
		             , ba.biz_id
		             , ba.biz_name
		             , ba.biz_code
		             ,  (CASE  WHEN ua.user_id IS NULL THEN  'false' ELSE  'true' end)  "checkedColumn"
		             , 'dqbiz' as "iconCls"
		        from cte ba
		        LEFT OUTER JOIN usr_alloc ua
		            ON ba.biz_id = ua.alloc_id
		           AND ua.alloc_gbn_cd = '0006'
		           AND ua.user_id = #{USER_ID}
			    order by ba.hierarchy   
    </select>

	<select id="getAppBizAreaTreeByAllocUser" parameterType="hashmap" resultType="encore.meta.mybatis.UpperKeyMap">
        /* mng.getAppBizAreaTreeByAllocUser */
		WITH RECURSIVE cte AS (
		     SELECT ap.app_biz_id,ap.app_biz_pid,ap.app_biz_name,ap.app_biz_desc,CASE WHEN coalesce(ua.user_id::text, '') = '' THEN  'false'  ELSE 'true' END  "checked",'icon-apparea' AS "iconCls"
		          FROM ma_app_area ap
		          LEFT OUTER JOIN usr_alloc ua
		            ON ap.app_biz_id = ua.biz_id
		           AND ua.alloc_gbn_cd = '0005'
		           AND ua.user_id = :USER_ID/*#{USER_ID}*/ WHERE ap.app_biz_pid = 'ROOT'
		           AND ap.aval_end_dt = '99991231235959'
		  UNION ALL
		     SELECT ap.app_biz_id,ap.app_biz_pid,ap.app_biz_name,ap.app_biz_desc,CASE WHEN coalesce(ua.user_id::text, '') = '' THEN  'false'  ELSE 'true' END  "checked",'icon-apparea' AS "iconCls"
		          FROM ma_app_area ap
		          LEFT OUTER JOIN usr_alloc ua
		            ON ap.app_biz_id = ua.biz_id
		           AND ua.alloc_gbn_cd = '0005'
		           AND ua.user_id = :USER_ID/*#{USER_ID}*/ JOIN cte c ON (c.app_biz_id = ap.app_biz_pid AND ap.aval_end_dt = '99991231235959')
		
		) SELECT * FROM cte c ORDER BY c.app_biz_name;
	</select>

	<select id="getNextSigners" parameterType="hashmap" resultType="encore.meta.mybatis.UpperKeyMap">
        /* mng.getNextSigners */
        SELECT signer_id AS target_id, signer_gbn AS target_gbn
          FROM msg_sign_rslt i
         WHERE i.req_doc_id = #{REQ_DOC_ID}
           AND i.aval_end_dt = '99991231235959'
           AND i.sign_seq &lt; 100
           AND i.sign_stat_cd = '0001'
    </select>

	<select id="getSvrInstList" parameterType="hashmap" resultType="encore.meta.mybatis.UpperKeyMap">
        /* mng.getSvrInstList */
        <include refid="pagingHeader"/>
      SELECT i.db_type
             , i.inst_nm
             , l.lsnr_ip AS host_nm
             , l.lsnr_prt AS port
             , i.sys_id
             , i.lsnc_desc AS inst_desc
             , i.meta_conn_acct_id AS username
             , i.svr_id
             , i.inst_id
             , l.lsnr_id
             , d.db_id
             , (SELECT CASE WHEN COUNT(1)=0 THEN  ''  ELSE 'Y' END
                  FROM md_job
                 WHERE svr_id = i.svr_id
                   AND inst_id = i.inst_id
                   AND db_id = d.db_id
                   AND use_yn = 'Y'
                ) AS hasjob
             , i.conn_alias_nm
             , coalesce(i.jdbc_url_tp, '0') AS jdbc_url_tp
             , coalesce(i.external_yn, 'N') AS external_yn
             , a.agent_id
             , a.agent_nm
             , COUNT(1) OVER () AS total_row_count
	          FROM md_lsnr l, md_inst i
				left outer join md_db d on
					(i.svr_id = d.svr_id
					and i.inst_id = d.inst_id
					and 'Y' = d.meta_mng_yn)
				left outer join mcs_agent_inf a on
					(i.agent_id = a.agent_id)
					where
					i.svr_id = l.svr_id
					and i.inst_id = l.inst_id
					and l.meta_conn_yn = 'Y'

        <if test="@Ognl@isNotEmpty(DB_TYPE)">
           AND i.db_type = #{DB_TYPE}
        </if>
        <if test="@Ognl@isNotEmpty(KEYWORD)">
           AND (   l.lsnr_ip LIKE #{KEYWORD}
                OR UPPER(i.inst_nm) LIKE UPPER(#{KEYWORD})
                OR UPPER(i.sys_id) LIKE UPPER(#{KEYWORD})
             OR UPPER(i.lsnc_desc) LIKE UPPER(#{KEYWORD})
           )
        </if>
        <if test="@Ognl@isNotEmpty(sortParams)">
            <foreach item="item" collection="sortParams" open="ORDER BY" separator=",">
                ${item.property} ${item.direction}
            </foreach>
            </if>
        <if test="@Ognl@isEmpty(sortParams)">
         ORDER BY db_type, inst_nm
        </if>
        <include refid="pagingFooter"/>
    </select>

    <select id="getInstCnt" parameterType="hashmap" resultType="int">
        /* mng.getInstCnt */
        SELECT COUNT(*) cnt FROM md_inst WHERE inst_nm = #{INST_NM}
    </select>

    <insert id="insertMdDbInst" parameterType="hashmap">
        <selectKey keyProperty="INST_ID" resultType="string" order="BEFORE">
            SELECT /*+ INDEX_DESC(A MD_SVR_PK) */ LPAD(COALESCE(TO_NUMBER(MAX(TO_NUMBER(svr_id))), 0) + 1, 4, '0') max_svr_id FROM md_svr
        </selectKey>
        /* mng.insertMdDbInst */
        INSERT ALL
          INTO md_svr (svr_id, svr_nm, cpu_cnt, cpu_spec, mem_size, svr_desc, creat_dt, creat_user_id, last_alter_dt, last_alter_user_id)
        VALUES (inst_id, inst_nm, cpu_cnt, cpu_spec, mem_size, inst_desc, creat_dt, user_id, creat_dt, user_id)
          INTO md_svr_ip (svr_id, seq, ip, ip_desc, main_yn, creat_dt, creat_user_id, last_alter_dt, last_alter_user_id)
        VALUES (inst_id, seq, ip, ip_desc, 'y', creat_dt, user_id, creat_dt, user_id)
          INTO md_inst (svr_id, inst_id, inst_nm, sys_id, db_type, comp_type, inst_os_acct_nm, dflt_home_path, biz_area
                       ,biz_area_sub, meta_conn_acct_id, meta_conn_acct_pwd, mjr_mngr_id, sub_mngr_id, creat_dt
                       ,creat_user_id, last_alter_dt, last_alter_user_id, lsnc_desc, conn_alias_nm, jdbc_url_tp, external_yn
                       ,agent_id)
        VALUES (inst_id, inst_id, inst_nm, sys_id, db_type, '', '', '', '', '', meta_conn_acct_id,  meta_conn_acct_pwd, user_id, user_id, creat_dt, user_id, creat_dt, user_id, inst_desc, conn_alias_nm, jdbc_url_tp, external_yn, agent_id)
          INTO md_lsnr (svr_id, inst_id, lsnr_id, lsnr_nm, lsnr_ip, lsnr_prt, svc_nm, pwd_mng_yn, meta_conn_yn, mngr_id , creat_dt, creat_user_id, last_alter_dt, last_alter_user_id)
        VALUES (inst_id, inst_id, inst_id, inst_nm, ip, port, '', 'Y', 'Y', user_id , creat_dt, user_id, creat_dt, user_id)
        SELECT #{INST_ID} inst_id
              ,#{INST_NM} inst_nm
              ,1 cpu_cnt
              ,'' cpu_spec
              ,1 mem_size
              ,#{INST_DESC, jdbcType=VARCHAR} inst_desc
              ,current_timestamp creat_dt
              ,#{requestUserId} user_id
              ,1 seq
              ,#{HOST_NM} ip
              ,'' ip_desc
              ,#{SYS_ID} sys_id
              ,#{DB_TYPE} db_type
              ,#{USERNAME} meta_conn_acct_id
              ,META_CRYPT.CRYPT(#{PASSWORD}, 'encore5868') meta_conn_acct_pwd
              ,#{PORT} port
              ,#{JDBC_URL_TP,jdbcType=VARCHAR} AS jdbc_url_tp
              ,#{CONN_ALIAS_NM,jdbcType=VARCHAR} AS conn_alias_nm
              ,COALESCE(nullif(#{EXTERNAL_YN,jdbcType=VARCHAR}, ''), 'N') AS external_yn
              ,#{AGENT_ID,jdbcType=VARCHAR} agent_id
         LIMIT 1
    </insert>

    <insert id="insertMdDb" parameterType="hashmap">
        /* mng.insertMdDb */
 		INSERT INTO md_db(svr_id, inst_id, db_id, db_nm, meta_mng_yn,
             del_yn, creat_dt, creat_user_id, last_alter_dt, last_alter_user_id)
        SELECT #{SVR_ID} svr_id, #{INST_ID} inst_id, #{DB_ID} db_id, #{INST_NM} inst_nm, 'Y' META_MNG_YN
             , 'N' del_yn, LOCALTIMESTAMP creat_dt, #{requestUserId} creat_user_id, LOCALTIMESTAMP last_alter_dt, #{requestUserId} last_alter_user_id
    </insert>

    <update id="updateMdDb" parameterType="hashmap">
        /* mng.updateMdDb */
        UPDATE md_db
           SET db_nm = #{INST_NM}
             , last_alter_dt = LOCALTIMESTAMP
             , last_alter_user_id = #{requestUserId}
         WHERE svr_id = #{SVR_ID}
           AND inst_id = #{INST_ID}
           AND db_id = #{DB_ID}
    </update>

    <delete id="deleteMdDb" parameterType="hashmap">
        /* mng.deleteMdDb */
        DELETE FROM md_db
         WHERE svr_id = #{SVR_ID}
           AND inst_id = #{INST_ID}
           AND db_id = #{DB_ID, jdbcType=VARCHAR}
    </delete>

    <update id="updateMdLsnr" parameterType="hashmap">
        /* mng.updateMdLsnr */
        UPDATE md_lsnr
           SET lsnr_nm = #{INST_NM}
             , lsnr_ip = #{HOST_NM}
             , lsnr_prt = #{PORT}
             , last_alter_dt = SYSDATE
             , last_alter_user_id = #{requestUserId}
         WHERE svr_id = #{SVR_ID}
           AND inst_id = #{INST_ID}
           AND lsnr_id = #{LSNR_ID}
    </update>

    <delete id="deleteMdLsnr" parameterType="hashmap">
        /* mng.deleteMdLsnr */
        DELETE FROM md_lsnr
         WHERE svr_id = #{SVR_ID}
           AND inst_id = #{INST_ID}
           AND lsnr_id = #{LSNR_ID}
    </delete>

    <update id="updateMdInst" parameterType="hashmap">
        /* mng.updateMdInst */
        UPDATE md_inst
           SET inst_nm = #{INST_NM}
             , sys_id = #{SYS_ID}
             , db_type = #{DB_TYPE}
             , meta_conn_acct_id = #{USERNAME}
           <if test="@Ognl@isNotEmpty(PASSWORD)">
             , meta_conn_acct_pwd = META_CRYPT.CRYPT(#{PASSWORD}, 'encore5868')
           </if>
             , last_alter_dt = LOCALTIMESTAMP
             , last_alter_user_id = #{requestUserId}
             , lsnc_desc = #{INST_DESC, jdbcType=VARCHAR}
             , jdbc_url_tp = #{JDBC_URL_TP, jdbcType=VARCHAR}
             , conn_alias_nm = #{CONN_ALIAS_NM, jdbcType=VARCHAR}
           <if test="@Ognl@isNotEmpty(EXTERNAL_YN)">
             , external_yn = #{EXTERNAL_YN, jdbcType=VARCHAR}
           </if>
             , agent_id = #{AGENT_ID, jdbcType=VARCHAR}
         WHERE svr_id = #{SVR_ID}
           AND inst_id = #{INST_ID}
    </update>

    <delete id="deleteMdInst" parameterType="hashmap">
        /* mng.deleteMdInst */
        DELETE FROM md_inst
         WHERE svr_id = #{SVR_ID}
           AND inst_id = #{INST_ID}
    </delete>

    <update id="updateMdSvrIp" parameterType="hashmap">
        /* mng.updateMdSvrIp */
        UPDATE md_svr_ip
           SET ip = #{HOST_NM}
             , ip_desc = #{INST_DESC, jdbcType=VARCHAR}
             , last_alter_dt = LOCALTIMESTAMP
             , last_alter_user_id = #{requestUserId}
         WHERE svr_id = #{SVR_ID}
    </update>

    <delete id="deleteMdSvrIp" parameterType="hashmap">
        /* mng.deleteMdSvrIp */
        DELETE FROM md_svr_ip
         WHERE svr_id = #{SVR_ID}
    </delete>

    <update id="updateMdSvr" parameterType="hashmap">
        /* mng.updateMdSvr */
        UPDATE md_svr
           SET svr_nm = #{INST_NM}
             , svr_desc = #{INST_DESC}
             , last_alter_dt = LOCALTIMESTAMP
             , last_alter_user_id = #{requestUserId}
         WHERE svr_id = #{SVR_ID}
    </update>

    <delete id="deleteMdSvr" parameterType="hashmap">
        /* mng.deleteMdSvr */
        DELETE FROM md_svr
         WHERE svr_id = #{SVR_ID}
    </delete>

	<select id="getJobList" parameterType="hashmap" resultType="encore.meta.mybatis.UpperKeyMap">
         <include refid="pagingHeader"/>
        SELECT a.job_id
             , a.job_nm
             , a.job_cat_cd
             , a.svr_id
             , a.inst_id
             , UPPER(c.inst_nm) inst_nm
             , a.db_id
             , b.schl_id
             , b.actv_st_tm
             , b.next_run_dt
             , b.aval_st_dt
             , b.aval_end_dt
             , c.external_yn
             , c.agent_id
             , freq_type
             , freq_intrv
             , freq_rcrr_intrv
             , freq_rltv_intrv
             , use_yn
             , (SELECT SUBSTR(MAX(COALESCE(TO_CHAR(z.job_end_dt, 'YYYYMMDDHH24MISS'), '99991231235959') || COALESCE(z.run_rslt,  CASE  WHEN z.job_id IS NULL THEN  'READY' ELSE  'IN PROGRESS' END )), 15)
                  FROM md_job x
                   join md_job_schd y
                     on y.job_id = x.job_id
                   left outer join md_job_hist z
                    on z.job_id = y.job_id
                   AND z.schl_id = y.schl_id) status
             , (SELECT COALESCE(MAX(TO_CHAR(h.job_end_dt, 'YYYYMMDDHH24MISS')), '99991231235959')
                  FROM md_job_hist h
                 WHERE h.job_id = a.job_id) last_job_end_dt
             , COUNT(1) OVER() total_row_count
          FROM md_job a
          left outer join (SELECT job_id
                     , SUBSTR(MAX(freq_type || next_run_dt || schl_id), 19) schl_id
                     , SUBSTR(MAX(freq_type || next_run_dt), 5) next_run_dt
                     , SUBSTR(MAX(freq_type || next_run_dt || aval_st_dt), 19) aval_st_dt
                     , SUBSTR(MAX(freq_type || next_run_dt || aval_end_dt), 19) aval_end_dt
                     , SUBSTR(MAX(freq_type || next_run_dt || actv_st_tm), 19) actv_st_tm
                     , MAX(freq_type) freq_type
                     , SUBSTR(MAX(freq_type || next_run_dt || freq_intrv), 19) freq_intrv
                     , SUBSTR(MAX(freq_type || next_run_dt || freq_rcrr_intrv), 19) freq_rcrr_intrv
                     , SUBSTR(MAX(freq_type || next_run_dt || freq_rltv_intrv), 19) freq_rltv_intrv
                  FROM md_job_schd
                 GROUP BY job_id) b
            on b.job_id = a.job_id     
           left outer join md_inst c
             on c.svr_id = a.svr_id
           AND c.inst_id = a.inst_id
           left outer join md_db d
             on d.svr_id = a.svr_id
           AND d.inst_id = a.inst_id
           AND d.db_id = a.db_id
           AND d.meta_mng_yn = 'Y'
         WHERE 1 = 1
        <if test="@Ognl@isNotEmpty(JOB_CAT_CD)">
           AND a.job_cat_cd = #{JOB_CAT_CD}
        </if>
        <if test="@Ognl@isEmpty(JOB_CAT_CD)">
           AND a.job_cat_cd IN ('0000', '0001', '0002', '0003'
            <if test="@Ognl@isNotEmpty(USE_USER_JOB) and USE_USER_JOB == &quot;Y&quot;">
                , '0100'
            </if>
           )
        </if>
        <if test="@Ognl@isNotEmpty(USE_YN)">
           AND a.use_yn = #{USE_YN}
        </if>
        <if test="@Ognl@isNotEmpty(SEARCH_WORD)">
           AND (UPPER(a.job_nm) LIKE UPPER(#{SEARCH_WORD}) OR UPPER(c.inst_nm) LIKE UPPER(#{SEARCH_WORD}))
        </if>
           
        <if test="@Ognl@isNotEmpty(START_DT)">
           AND b.next_run_dt BETWEEN #{START_DT} AND #{END_DT}
        </if>
        <if test="@Ognl@isNotEmpty(sortParams)">
            <foreach item="item" collection="sortParams" open="ORDER BY" separator=",">
                ${item.property} ${item.direction}
            </foreach>
        </if>
        <if test="@Ognl@isEmpty(sortParams)">
               ORDER BY b.next_run_dt DESC
        </if>
        <include refid="pagingFooter"/>
    </select>

	<select id="getJobRslt" parameterType="hashmap" resultType="encore.meta.mybatis.UpperKeyMap">
    /* mng.getJobRslt */
        <include refid="pagingHeader"/>
        SELECT a.job_id
             , a.job_nm
             , TO_CHAR(c.job_st_dt, 'YYYYMMDDHH24MISS') job_st_dt
             , CASE WHEN c.run_stat = '0004' THEN ''
                    ELSE TO_CHAR(c.job_end_dt, 'YYYYMMDDHH24MISS')
                END job_end_dt
             , CASE WHEN c.run_stat = '0004' THEN ''
                    ELSE  CASE  WHEN c.elps_tm =  '' THEN  '' ELSE  LPAD(FLOOR(c.elps_tm::int / 3600)::varchar, 2, '0') || ':' || LPAD(FLOOR(MOD(c.elps_tm::int, 3600) / 60)::varchar, 2, '0') || ':' || LPAD(MOD(c.elps_tm::int, 60)::varchar, 2, '0') END 
                END elps_tm
             , CASE WHEN c.run_stat = '0004' THEN ''
                    ELSE  CASE  WHEN COALESCE(c.agent_elps_tm, '') =  '' THEN  '' ELSE  LPAD(FLOOR(COALESCE(c.agent_elps_tm::int, 0) / 3600)::varchar, 2, '0') || ':' || LPAD(FLOOR(MOD(COALESCE(c.agent_elps_tm::int, 0), 3600) / 60)::varchar, 2, '0') || ':' || LPAD(MOD(COALESCE(c.agent_elps_tm::int, 0), 60)::varchar, 2, '0') END 
                END agent_elps_tm
             , CASE WHEN c.run_stat = '0004' THEN ''
                    ELSE  CASE  WHEN (c.elps_tm || COALESCE(c.agent_elps_tm, '')) =  '' THEN  '' ELSE  LPAD(FLOOR((c.elps_tm::int + COALESCE(c.agent_elps_tm::int, 0)) / 3600)::varchar, 2, '0') || ':' || LPAD(FLOOR(MOD((c.elps_tm::int + COALESCE(c.agent_elps_tm::int, 0)), 3600) / 60)::varchar, 2, '0') || ':' || LPAD(MOD((c.elps_tm::int + COALESCE(c.agent_elps_tm::int, 0)), 60)::varchar, 2, '0') END 
                END total_elps_tm
             , b.schl_id
             , b.schl_nm
             , freq_type
             , COALESCE(c.run_rslt,  CASE  WHEN c.job_id IS NULL THEN  'READY' ELSE  'IN PROGRESS' END ) run_rslt
             , COUNT(1) OVER () total_row_count
          FROM md_job a
          join md_job_schd b
            on b.job_id = a.job_id
          left outer join md_job_hist c
            on c.job_id = b.job_id
           AND c.schl_id = b.schl_id
         WHERE a.job_id = #{JOB_ID}::int
         ORDER BY c.job_end_dt DESC, schl_nm DESC
         <include refid="pagingFooter"/>
    </select>

    <!--
    <select id="getAprReqCntForWidget" parameterType="hashmap" resultType="int">
        /* mng.getAprReqCntForWidget */
        SELECT COUNT(*)
          FROM req_doc_info r,  msg_sign_rslt s
         WHERE 1 = 1
           <if test="@Ognl@isNotEmpty(SIGN_TGT_GBN_CDS)">
           AND r.sign_tgt_gbn_cd IN
               <foreach item="item" collection="SIGN_TGT_GBN_CDS" open="(" separator="," close=")">
                   #{item}
               </foreach>
           </if>
           AND r.req_status = 'ING'
           AND s.sign_stat_cd = '0001'
           AND s.sign_seq BETWEEN 1 AND 99
           AND s.req_doc_id = r.req_doc_id
           AND s.aval_end_dt = '99991231235959'
           AND s.signer_gbn = 'U'
           AND s.signer_id = #{USER_ID}
    </select>
    -->

    <select id="getAprReqCntForWidget" parameterType="hashmap" resultType="hashmap">
        /* mng.getAprReqCntForWidget */
        SELECT COUNT(CASE WHEN r.sign_tgt_gbn_cd IN ('1001', '2001', '3001', '5001') THEN 1 ELSE NULL END) std_cnt
             , COUNT(CASE WHEN r.sign_tgt_gbn_cd IN ('4001') THEN 1 ELSE NULL END) dq_cnt
          FROM req_doc_info r,  msg_sign_rslt s
         WHERE r.req_status = 'ING'
           AND s.sign_stat_cd = '0001'
           AND s.sign_seq BETWEEN 1 AND 99
           AND s.req_doc_id = r.req_doc_id
           AND s.aval_end_dt = '99991231235959'
           AND s.signer_gbn = 'U'
           AND s.signer_id = #{USER_ID}
    </select>

    <select id="getAprReqCntForGrpForWidget" parameterType="hashmap" resultType="int">
        /* bok.mng.getAprReqCntForGrpForWidget */
        SELECT COUNT(*)
          FROM req_doc_info r, msg_sign_rslt s
         WHERE 1 = 1
           AND r.req_status = 'ING'
           AND s.sign_stat_cd = '0001'
           AND s.sign_seq BETWEEN 1 AND 99
           AND s.req_doc_id = r.req_doc_id
           AND s.aval_end_dt = '99991231235959'
           AND s.signer_gbn = 'G'
           AND s.signer_id = (SELECT dept_id
                                FROM usr_user
                               WHERE user_id = #{USER_ID})
    </select>

	<select id="getDashList" parameterType="hashmap" resultType="encore.meta.mybatis.UpperKeyMap">
        /* mng.getDashList */
          SELECT dsbd_id
             , dsbd_nm
             , dsbd_gbn_cd
             , dsbd_cnts
             , dsbd_sort_seq
             , dsbd_prd_gbn_cd
             , CASE WHEN(SELECT COUNT(*) FROM ms_obj_rel WHERE obj_rel2_id = dsbd_id)=0 THEN  'N'  ELSE 'Y' END  used_item
          FROM ms_dsbd_inf
         WHERE 1 = 1
        <if test="@Ognl@isNotEmpty(DSBD_ID)">
           AND dsbd_id = #{DSBD_ID}
        </if>
        <if test="@Ognl@isNotEmpty(DSBD_GBN_CD)">
           AND dsbd_gbn_cd = #{DSBD_GBN_CD}
        </if>
         ORDER BY dsbd_prd_gbn_cd, dsbd_nm
    </select>

	<select id="getDashBoardItemTree" parameterType="hashmap" resultType="encore.meta.mybatis.UpperKeyMap">
        /* mng.getDashBoardItemTree */
       with recursive cte as (
			select
				p_dsbd_id, dsbd_id,dsbd_nm,	dsbd_desc,
				array[ row_number() over (order by dsbd_id, dsbd_nm) ] as hierarchy
			from
				(
				select dsbd_prd_gbn_cd p_dsbd_id , dsbd_id , dsbd_nm ,	dsbd_desc
					from ms_dsbd_inf
					where dsbd_gbn_cd = '0002'
				union all
				select
					'ROOT' p_dsbd_id ,
					cd_id dsbd_id , cd_nm dsbd_nm ,	cd_desc dsbd_desc
				from
					ms_code
				where
					up_cd_id = '6031'
					and lang_cd = #{langCd})
				) t1
			where
				p_dsbd_id = 'ROOT'
			union all
			select
				t2.p_dsbd_id, t2.dsbd_id, t2.dsbd_nm, t2.dsbd_desc,
				array_append(c.hierarchy, row_number() over (order by t2.dsbd_id, t2.dsbd_nm)) as hierarchy
			from
				(
				select dsbd_prd_gbn_cd p_dsbd_id, dsbd_id , dsbd_nm , dsbd_desc
					from ms_dsbd_inf
					where dsbd_gbn_cd = '0002'
				union all
				select 'ROOT' p_dsbd_id ,
					cd_id dsbd_id , cd_nm dsbd_nm ,	cd_desc dsbd_desc
				from ms_code
				where up_cd_id = '6031'
					and lang_cd = #{langCd})
				) t2
				join cte c on (c.dsbd_id = t2.p_dsbd_id)
		) select * from cte order by hierarchy;

        <!--
        SELECT dsbd_id, dsbd_nm, d_pid, d_id, cnt
          FROM (SELECT dsbd_id, dsbd_nm, d_pid, d_id, COUNT(dsbd_id) OVER (PARTITION BY prod_id) cnt
                  FROM (SELECT RAWTOHEX(SYS_GUID()) dsbd_id
                             , cd_nm dsbd_nm
                             , 'ROOT' d_pid
                             , cd_id d_id
                             , cd_id prod_id
                          FROM ms_code
                         WHERE lang_cd = #{langCd}
                           AND up_cd_id = '6031'
                         UNION ALL
                        SELECT dsbd_id
                             , dsbd_nm
                             , dsbd_prd_gbn_cd d_pid
                             , dsbd_id d_id
                             , dsbd_prd_gbn_cd prod_id
                          FROM ms_dsbd_inf
                         WHERE 1 = 1
                           AND dsbd_gbn_cd = '0002')
               )
         WHERE cnt > 1
         START WITH d_pid = 'ROOT'
       CONNECT BY d_pid = PRIOR d_id
        -->
    </select>

	<select id="getRoleDashList" parameterType="hashmap" resultType="encore.meta.mybatis.UpperKeyMap">
        /* mng.getRoleDashList */
           SELECT a.obj_rel1_id
             , MAX(a.obj_rel2_id) obj_rel2_id
             , a.obj_rel_gbn_cd
             , b.dsbd_id
             , b.dsbd_nm
             , b.dsbd_sort_seq
             , b.dsbd_gbn_cd
          FROM ms_obj_rel a
          left outer join ms_dsbd_inf b
            on b.dsbd_id = a.obj_rel1_id
         WHERE 1 = 1
        <if test="@Ognl@isNotEmpty(ROLE_ID)">
           AND a.obj_rel2_id = #{ROLE_ID}
        </if>
        <if test="@Ognl@isEmpty(ROLE_ID)">
           AND a.obj_rel2_id IN (SELECT alloc_id
                                   FROM v_usr_alloc
                                  WHERE user_id = #{requestUserId}
                                    AND alloc_gbn_cd = '0003'
                                  GROUP BY alloc_id)
        </if>
           AND a.obj_rel_gbn_cd = '0002'
         GROUP BY a.obj_rel1_id, obj_rel_gbn_cd, b.dsbd_id, b.dsbd_nm, b.dsbd_sort_seq, b.dsbd_gbn_cd
         ORDER BY b.dsbd_sort_seq ASC
    </select>

    <insert id="insertRoleDash" parameterType="hashmap">
        /* mng.insertRoleDash */
		insert into ms_obj_rel (
				obj_rel1_id,
				obj_rel2_id,
				obj_rel_gbn_cd,
				rel_desc
			) with upsert as (
				select
					#{OBJ_REL1_ID}::varchar obj_rel1_id,
					#{OBJ_REL2_ID}::varchar obj_rel2_id 
			) 
		
		select
			obj_rel1_id,
			obj_rel2_id,
			#{OBJ_REL_GBN_CD},
			#{REL_DESC}
		from upsert v
		where not exists (
			select 1 from ms_obj_rel b
			where b.obj_rel1_id = v.obj_rel1_id
			and b.obj_rel2_id = v.obj_rel2_id
		)
    </insert>

    <insert id="insertObjRel" parameterType="hashmap">
        /* mng.insertObjRel */
        INSERT INTO ms_obj_rel
           (obj_rel1_id, obj_rel2_id, obj_rel_gbn_cd, rel_desc)
        VALUES
           (#{OBJ_REL1_ID}, #{OBJ_REL2_ID}, #{OBJ_REL_GBN_CD}, #{REL_DESC, jdbcType=VARCHAR})
    </insert>

    <insert id="insertDsbdInf" parameterType="hashmap">
        /* mng.insertDsbdInf */
        INSERT INTO ms_dsbd_inf
            (dsbd_id, dsbd_nm, dsbd_gbn_cd, dsbd_desc, dsbd_prd_gbn_cd, dsbd_cnts)
        VALUES
            (#{DSBD_ID}, #{DSBD_NM}, #{DSBD_GBN_CD}, #{DSBD_DESC, jdbcType=VARCHAR}, #{DSBD_PRD_GBN_CD}, #{DSBD_CNTS, jdbcType=VARCHAR})
    </insert>

    <update id="updateDsdbInf" parameterType="hashmap">
        /* mng.updateDsdbInf */
        UPDATE ms_dsbd_inf
        <set>
            <if test="@Ognl@isNotEmpty(DSBD_NM)">dsbd_nm = #{DSBD_NM},</if>
            <if test="@Ognl@isNotEmpty(DSBD_DESC)">dsbd_desc = #{DSBD_DESC},</if>
            <if test="@Ognl@isNotEmpty(DSBD_CNTS)">dsbd_cnts = #{DSBD_CNTS},</if>
        </set>
         WHERE dsbd_id = #{DSBD_ID}
        <if test="@Ognl@isNotEmpty(DSDB_GBN_CD)">
           AND dsbd_gbn_cd = #{DSDB_GBN_CD}
        </if>
    </update>

    <delete id="deleteDsbdInf" parameterType="hashmap">
        /* mng.deleteDsbdInf */
        DELETE FROM ms_dsbd_inf
         WHERE dsbd_id = #{DSBD_ID}
    </delete>

    <delete id="deleteObjRel" parameterType="hashmap">
        /* mng.deleteObjRel */
        DELETE FROM ms_obj_rel
         WHERE obj_rel1_id = #{DSBD_ID}
           AND obj_rel_gbn_cd = #{OBJ_REL_GBN_CD}
    </delete>

    <delete id="deleteRoleDash" parameterType="hashmap">
        /* mng.deleteRoleDash */
        DELETE FROM ms_obj_rel
         WHERE obj_rel1_id = #{OBJ_REL1_ID}
           AND obj_rel2_id = #{OBJ_REL2_ID}
           AND obj_rel_gbn_cd = #{OBJ_REL_GBN_CD}
    </delete>

	<select id="getDashboardItem" parameterType="hashmap" resultType="encore.meta.mybatis.UpperKeyMap">
     with recursive cte as (
		  with t as (SELECT 'ROOT' dsbd_pid
		                     , a.dsbd_id
		                     , a.dsbd_nm
		                     , a.dsbd_gbn_cd
		                     , a.dsbd_sort_seq
		                  FROM ms_dsbd_inf a
		                 WHERE 1 = 1
		                   AND a.dsbd_gbn_cd = '0001'
		                UNION ALL
		                SELECT b.obj_rel1_id
		                     , b.obj_rel2_id
		                     , a.dsbd_nm
		                     , a.dsbd_gbn_cd
		                     , a.dsbd_sort_seq
		                  FROM ms_dsbd_inf a, ms_obj_rel b
		                 WHERE 1 = 1
		                   AND b.obj_rel2_id = a.dsbd_id
		                   AND b.obj_rel_gbn_cd = '0001')
		        SELECT t.*	
		        	 , array[row_number() over(order by t.dsbd_sort_seq)] rnum
		          FROM t
		         where dsbd_pid = 'ROOT'
		         union all
		         select t.*
		         	  , array_append(c.rnum, row_number() over(order by t.dsbd_sort_seq))
		           from t join cte c
		             on c.dsbd_id = t.dsbd_pid
		  ) select dsbd_pid
		             , dsbd_id
		             , dsbd_nm
		             , dsbd_gbn_cd
		             , dsbd_sort_seq
		             --,  CASE  WHEN CONNECT_BY_ISLEAF =  0 THEN  'false' ELSE  'true' END  leaf
		             , (not exists(select 1 from cte p where c.dsbd_id = p.dsbd_pid))::varchar leaf
		     from cte c
        <if test="@Ognl@isNotEmpty(DSBD_PID)">
         WHERE dsbd_pid = #{DSBD_PID}
        </if>
	    ORDER  BY rnum
    </select>

	<select id="getObjList" parameterType="hashmap" resultType="encore.meta.mybatis.UpperKeyMap">
        /*mng.getObjList*/
      with recursive cte as (
		select
			ID::varchar ID,	PID, 1 LVL, OBJECT_ID, OBJECT_TYPE, TABLE_NAME,
			array[ row_number() over (order by A.NO) ] as hierarchy
		from
			(
			select
				case
					when B.NO = 1 then 'TABLE'
					when B.NO = 2 then 'INDEX'
					when B.NO = 3 then 'SEQUENCE'
					when B.NO = 4 then 'VIEW'
					when B.NO = 5 then 'PROCEDURE'
					when B.NO = 6 then 'FUNCTION'
					when B.NO = 7 then 'PACKAGE'
					when B.NO = 8 then 'TYPE'
				end ID ,
				'ROOT' PID , B.NO , '0' OBJECT_ID , '' OBJECT_TYPE , '' TABLE_NAME
			  from COPY_T B 
			  where B.NO <![CDATA[<=]]> 8
		
			union all
			
			select OBJ_NM ID, OBJ_GBN_CD PID, 0 "no", OBJ_ID OBJECT_ID, OBJ_GBN_CD OBJECT_TYPE, TBL_NM TABLE_NAME
			  from RM_OBJ_INF
			  where AVAL_END_DT = '99991231235959' 
			) A
			where PID = 'ROOT'
	
			union all
			select
					t1.ID::varchar ID,	t1.PID, (c.lvl + 1) LVL, t1.OBJECT_ID, t1.OBJECT_TYPE, t1.TABLE_NAME,
					array_append(c.hierarchy, row_number() over (order by c.lvl)) as hierarchy
				from
					(
					select
						case
							when B.NO = 1 then 'TABLE'
							when B.NO = 2 then 'INDEX'
							when B.NO = 3 then 'SEQUENCE'
							when B.NO = 4 then 'VIEW'
							when B.NO = 5 then 'PROCEDURE'
							when B.NO = 6 then 'FUNCTION'
							when B.NO = 7 then 'PACKAGE'
							when B.NO = 8 then 'TYPE'
						end ID, 'ROOT' PID ,
						B.NO, '0' OBJECT_ID , '' OBJECT_TYPE , '' TABLE_NAME
					from COPY_T B
					where B.NO <![CDATA[<=]]> 8
				
				union all
			
				select
					OBJ_NM ID, OBJ_GBN_CD PID, 0 "no", OBJ_ID OBJECT_ID, OBJ_GBN_CD OBJECT_TYPE, TBL_NM TABLE_NAME
				from RM_OBJ_INF
				where AVAL_END_DT = '99991231235959'
			) t1 join cte c on (c.ID = t1.PID)	
		) select *	from cte order by hierarchy;
    </select>

    <select id="getObjDdl" parameterType="hashmap" resultType="encore.meta.mybatis.UpperKeyMap">
 	 SELECT  CASE  WHEN OBJ_GBN_CD =  'PACKAGE' THEN  OBJ_SRC ELSE  OBJ_FLL_SRC END  RSLT_SQL,
               CASE  WHEN OBJ_GBN_CD =  'PACKAGE' THEN  OBJ_FLL_SRC ELSE  '' END  RSLT_BODY_SQL
         FROM RM_OBJ_INF
        WHERE OBJ_GBN_CD = #{TYPE, jdbcType=VARCHAR}
          AND OBJ_ID = #{OBJ_ID, jdbcType=VARCHAR}
        <if test="@Ognl@isEmpty(AVAL_END_DT)">
          AND AVAL_END_DT = '99991231235959'
        </if>
        <if test="@Ognl@isNotEmpty(AVAL_END_DT)">
         AND AVAL_END_DT = #{AVAL_END_DT}
        </if>
    </select>

    <!-- 2014.11.04 레파지토리 버전  정보 조회 cjy -->
	<select id="getVerInfo" parameterType="hashmap" resultType="encore.meta.mybatis.UpperKeyMap">
        /* mng.getVerInfo */
        SELECT VER_ID
          FROM RM_VER_INF
         ORDER BY VER_ID DESC
    </select>

	<select id="getTableColumnInfo" parameterType="hashmap" resultType="encore.meta.mybatis.UpperKeyMap">
        /* mng.getTableColumnInfo */
      SELECT A.COL_ID
             , A.COL_NM
             , A.COL_SEQ
             , '' DROP_CHECK
             ,  CASE  WHEN A.NULL_YN = 'Y' THEN '' ELSE 'N' END  NULL_YN
             , A.DATA_TYPE
             , A.DATA_LEN
             , A.DATA_SCALE
             , A.DATA_DEFAULT
             , A.CMNT
             ,  CASE  WHEN A.CHAR_USED =  'C' THEN  'Char' WHEN A.CHAR_USED =  'B' THEN  'Byte' END  CHAR_USED
             , A.OBJ_NM
             ,  CASE  WHEN  B.OBJ_NM IS NULL THEN '' ELSE  'Y'  END  PK_YN
             , B.OBJ_NM CONSTRAINT_NAME
          FROM (SELECT A.*, B.OBJ_NM
                 FROM RM_COL_INF A
                    , RM_OBJ_INF B
                 WHERE B.OBJ_ID = A.OBJ_ID
                   AND B.AVAL_END_DT = A.AVAL_END_DT
                   AND A.OBJ_ID = #{OBJ_ID}
                     AND A.OBJ_GBN_CD = #{OBJ_GBN_CD}
                   <if test="@Ognl@isEmpty(AVAL_END_DT)">
                   AND A.AVAL_END_DT = '99991231235959'
                   </if>
                   <if test="@Ognl@isNotEmpty(AVAL_END_DT)">
                   AND A.AVAL_END_DT = #{AVAL_END_DT}
                   </if>
               ) A
            LEFT OUTER JOIN ( SELECT C.OBJ_NM, C.TBL_NM, D.COL_NM, D.COL_SEQ
                    FROM RM_OBJ_INF C, RM_COL_INF D
                    WHERE C.CONSTRAINT_TYPE = 'P'
                      AND C.OBJ_GBN_CD = 'INDEX'
                     <if test="@Ognl@isEmpty(AVAL_END_DT)">
                      AND C.AVAL_END_DT = '99991231235959'
                     </if>
                     <if test="@Ognl@isNotEmpty(AVAL_END_DT)">
                      AND C.AVAL_END_DT = #{AVAL_END_DT}
                     </if>
                      AND D.OBJ_ID = C.OBJ_ID
                      AND D.OBJ_GBN_CD = C.OBJ_GBN_CD
                      AND D.AVAL_END_DT = C.AVAL_END_DT
               ) B
            on B.TBL_NM = A.OBJ_NM
           AND B.COL_NM = A.COL_NM    
         WHERE 1=1
         ORDER BY A.COL_SEQ
    </select>

	<select id="getIndexColumnInfo" parameterType="hashmap" resultType="encore.meta.mybatis.UpperKeyMap">
         /*mng.getIndexColumnInfo*/
        SELECT A.OBJ_NM, B.COL_ID, A.COL_NM, A.COL_SEQ, B.OBJ_NM IDX_NM,  CASE  WHEN B.COL_NM IS NULL THEN '' ELSE 'Y' END  IDX_YN, B.COL_SEQ IDX_SEQ, B.UNIQ_YN
          FROM (
                SELECT A.OBJ_NM, B.COL_NM, B.COL_SEQ
                  FROM RM_OBJ_INF A, RM_COL_INF B
                 WHERE A.OBJ_NM = #{TABLE_NAME}
                   AND A.OBJ_GBN_CD = 'TABLE'
                   <if test="@Ognl@isEmpty(AVAL_END_DT)">
                   AND A.AVAL_END_DT = '99991231235959'
                  </if>
                   AND B.AVAL_END_DT = A.AVAL_END_DT
                   AND B.OBJ_ID = A.OBJ_ID
                   AND B.OBJ_GBN_CD = A.OBJ_GBN_CD
                ) A
           LEFT OUTER JOIN
               (
                SELECT A.OBJ_NM, A.TBL_NM, A.UNIQ_YN, B.COL_NM, B.COL_SEQ, B.SORT_GBN_CD, B.APLY_EXPR, B.COL_ID
                  FROM RM_OBJ_INF A, RM_COL_INF B
                 WHERE A.OBJ_ID = #{OBJ_ID}
                   AND A.OBJ_GBN_CD = 'INDEX'
                  <if test="@Ognl@isEmpty(AVAL_END_DT)">
                   AND A.AVAL_END_DT = '99991231235959'
                  </if>
                  <if test="@Ognl@isNotEmpty(AVAL_END_DT)">
                   AND A.AVAL_END_DT = #{AVAL_END_DT}
                  </if>
                   AND B.AVAL_END_DT = A.AVAL_END_DT
                   AND B.OBJ_ID = A.OBJ_ID
                   AND B.OBJ_GBN_CD = A.OBJ_GBN_CD
                ) B
           ON B.TBL_NM = A.OBJ_NM
          AND B.COL_NM = A.COL_NM
        WHERE 1=1
         ORDER BY A.COL_SEQ, B.COL_SEQ
    </select>

	<select id="getObjHist" parameterType="hashmap" resultType="encore.meta.mybatis.UpperKeyMap">
        /* mng.getObjHist */
        SELECT A.WRKR_ID
             , A.TEST_YN
             , C.LOGIN_ID
             , A.OBJ_ID
             , A.OBJ_GBN_CD
             , A.AVAL_END_DT AVAL_END_DT
             , TO_CHAR(TO_DATE(A.AVAL_ST_DT, 'YYYYMMDDHH24MISS'), 'YYYY-MM-DD HH24:MI:SS') AVAL_ST_DT
             , CASE WHEN AVAL_END_DT='99991231235959' THEN  'Y'  ELSE '' END  LAST_YN
          FROM RM_OBJ_INF A, USR_USER C
         WHERE A.OBJ_ID = #{OBJ_ID}
           AND C.USER_ID = A.WRKR_ID
              AND C.end_dt <![CDATA[>=]]> to_char(LOCALTIMESTAMP,'yyyymmdd')
         ORDER BY A.AVAL_END_DT DESC
    </select>

    <select id="getNextVer" parameterType="hashmap" resultType="String">
        /* mng.getNextVer */
        SELECT nextval('ver_info_seq')
    </select>

    <select id="getCrateQuery" parameterType="hashmap" resultType="String">
        /* mng.getCrateQuery */
   		 SELECT DBMS_METADATA.GET_DDL(#{OBJ_GBN_CD},#{OBJ_NM})
    </select>

    <insert id="insertVerInf" parameterType="hashmap">
        /*mng.insertVerInf*/
        INSERT INTO RM_VER_INF(VER_ID, VER_DESC, VER_CRE_DT)
        SELECT #{VER_ID}
             , '' VER_DESC
             , TO_CHAR(LOCALTIMESTAMP, 'YYYYMMDDHH24MISS') VER_CRE_DT
    </insert>

    <insert id="insertObjInf" parameterType="hashmap">
        /*mng.insertObjInf*/
        INSERT INTO RM_OBJ_INF  ( OBJ_ID
                          , OBJ_GBN_CD
                          , OBJ_NM
                          , WRKR_ID
                          , OBJ_DESC
                          , OBJ_SRC
                          , OBJ_FLL_SRC
                          , TBL_GBN_CD
                          , TBL_NM
                          , UNIQ_YN
                          , IDX_GBN_CD
                          , TEST_YN
                          , AVAL_ST_DT
                          , AVAL_END_DT
                        )
        VALUES (
            #{OBJ_ID, jdbcType=VARCHAR},
            #{OBJ_GBN_CD, jdbcType=VARCHAR},
            #{OBJ_NM, jdbcType=VARCHAR},
            #{requestUserId, jdbcType=VARCHAR},
            #{OBJ_DESC, jdbcType=VARCHAR},
            <![CDATA[#{OBJ_SRC, jdbcType=VARCHAR}]]>,
            <![CDATA[#{OBJ_FLL_SRC, jdbcType=VARCHAR}]]>,
            #{TBL_GBN_CD, jdbcType=VARCHAR},
            #{TBL_NM, jdbcType=VARCHAR},
            #{UNIQ_YN, jdbcType=VARCHAR},
            #{IDX_GBN_CD, jdbcType=VARCHAR},
            #{TEST_YN, jdbcType=VARCHAR},
            #{REG_DATE},
            '99991231235959'
        )
    </insert>

    <update id="updateObjInf" parameterType="hashmap">
        /*mng.updateObjInf*/
        UPDATE RM_OBJ_INF
           SET AVAL_END_DT = #{REG_DATE}
         WHERE OBJ_ID = #{OBJ_ID, jdbcType=VARCHAR}
           AND OBJ_GBN_CD = #{OBJ_GBN_CD, jdbcType=VARCHAR}
           AND OBJ_NM = #{OBJ_NM, jdbcType=VARCHAR}
           AND AVAL_END_DT = '99991231235959'
    </update>

    <update id="updateColInf" parameterType="hashmap">
        UPDATE RM_COL_INF
           SET AVAL_END_DT = #{REG_DATE}
         WHERE OBJ_ID = #{OBJ_ID, jdbcType=VARCHAR}
           AND OBJ_GBN_CD = #{OBJ_GBN_CD, jdbcType=VARCHAR}
           AND AVAL_END_DT = '99991231235959'
    </update>

    <insert id="insertColInf" parameterType="hashmap">
        /*mng.insertColInf*/
              INSERT INTO RM_COL_INF
                ( OBJ_ID
                 , OBJ_GBN_CD
                 , COL_ID
                 , COL_NM
                 , COL_SEQ
                 , APLY_EXPR
                 , SORT_GBN_CD
                 , PK_YN
                 , NULL_YN
                 , DATA_TYPE
                 , DATA_LEN
                 , DATA_SCALE
                 , DATA_DEFAULT
                 , CHAR_USED
                 , CMNT
                 , AVAL_ST_DT
                 , AVAL_END_DT
               )
              VALUES (
                #{OBJ_ID, jdbcType=VARCHAR},
                #{OBJ_GBN_CD, jdbcType=VARCHAR},
                <if test="@Ognl@isNotEmpty(COL_ID)">
                #{COL_ID, jdbcType=VARCHAR},
                </if>
                <if test="@Ognl@isEmpty(COL_ID)">
                uuid_generate_v4(),
                </if>
                #{COL_NM, jdbcType=VARCHAR},
                #{COL_SEQ, jdbcType=VARCHAR},
                #{APLY_EXPR, jdbcType=VARCHAR},
                #{SORT_GBN_CD, jdbcType=VARCHAR},
                #{PK_YN, jdbcType=VARCHAR},
                #{NULL_YN, jdbcType=VARCHAR},
                #{DATA_TYPE, jdbcType=VARCHAR},
                #{DATA_LEN, jdbcType=VARCHAR},
                #{DATA_SCALE, jdbcType=VARCHAR},
                #{DATA_DEFAULT, jdbcType=VARCHAR},
                #{CHAR_USED, jdbcType=VARCHAR},
                #{CMNT, jdbcType=VARCHAR},
                #{REG_DATE},
                '99991231235959'
              )
    </insert>

    <select id="getinstallDdlScript" parameterType="hashmap" resultType="encore.meta.mybatis.UpperKeyMap">
     SELECT CASE WHEN OBJ_GBN_CD='TABLE' THEN  '01_' WHEN OBJ_GBN_CD='INDEX' THEN  '02_' WHEN OBJ_GBN_CD='SEQUENCE' THEN  '04_' WHEN OBJ_GBN_CD='VIEW' THEN  '06_' WHEN OBJ_GBN_CD='PROCEDURE' THEN  '08_' WHEN OBJ_GBN_CD='FUNCTION' THEN  '07_' WHEN OBJ_GBN_CD='PACKAGE' THEN  '09_' WHEN OBJ_GBN_CD='TYPE' THEN  '03_' END  "NO"
            , CASE WHEN OBJ_GBN_CD='PACKAGE' THEN 'PKG_BODY'  ELSE OBJ_GBN_CD END  OBJ_GBN_CD
            , OBJ_NM
            , OBJ_SRC
            , OBJ_FLL_SRC RSLT_SQL
         FROM RM_OBJ_INF
         WHERE AVAL_END_DT = '99991231235959'
           AND coalesce(TEST_YN,'N/A') != 'N'
        ORDER BY CASE WHEN OBJ_GBN_CD='TABLE' THEN  3 WHEN OBJ_GBN_CD='INDEX' THEN  4 WHEN OBJ_GBN_CD='SEQUENCE' THEN  2 WHEN OBJ_GBN_CD='VIEW' THEN  5 WHEN OBJ_GBN_CD='PROCEDURE' THEN  6 WHEN OBJ_GBN_CD='FUNCTION' THEN  7 WHEN OBJ_GBN_CD='PACKAGE' THEN  8 WHEN OBJ_GBN_CD='TYPE' THEN  1 END
    </select>


    <select id="getPatchDdlScript" parameterType="hashmap" resultType="encore.meta.mybatis.UpperKeyMap">
        SELECT CASE WHEN OBJ_GBN_CD='PACKAGE' THEN  OBJ_SRC || CHR(13) || CHR(10) || OBJ_FLL_SRC  ELSE OBJ_SRC END  RSLT_SQL
         FROM RM_OBJ_INF
         WHERE 1 = 1
         <if test="@Ognl@isNotEmpty(START_DT) and @Ognl@isNotEmpty(END_DT)">
             AND AVAL_ST_DT &gt;= #{START_DT}
             AND AVAL_END_DT &lt;= #{END_DT}
         </if>
         <if test="@Ognl@isEmpty(START_DT)">
             AND AVAL_END_DT = '99991231235959'
         </if>
            AND OBJ_SRC IS NOT NULL
            AND TEST_YN != 'N'
        ORDER BY DECODE(OBJ_GBN_CD, 'TABLE', 3, 'INDEX', 4, 'SEQUENCE', 2, 'VIEW', 5, 'PROCEDURE', 6, 'FUNCTION', 7, 'PACKAGE', 8, 'TYPE', 1), OBJ_ID, OBJ_NM, AVAL_END_DT
    </select>

    <!-- 승인모델 이력 시간 -->
	<select id="getAprvModelDtList" parameterType="hashmap" resultType="encore.meta.mybatis.UpperKeyMap">
        /* mng.getAprvModelDtList */
        SELECT chg_dt, fmt_chg_dt, log_reg_dt, mdl_req_id
             , DECODE(RANK() OVER(PARTITION BY version ORDER BY chg_dt DESC), 1,version, '') AS version
          FROM (
            SELECT mdl_req_dt as chg_dt, mdl_req_dt AS fmt_chg_dt, mdl_aprv_req_id as mdl_req_id, log_reg_dt,
                 (SELECT version
                    FROM da_modelversion
                   WHERE a_uid = #{A_UID}
                     AND createbasedate =
                        (SELECT MIN(createbasedate)
                           FROM da_modelversion
                          WHERE a_uid = #{A_UID}
                            AND TO_CHAR(createbasedate,'YYYYMMDDHH24MISS')>= r.log_reg_dt)) AS version
              FROM md_mdl_aprv_req r
             WHERE log_a_uid = #{A_UID}
               AND mdl_aprv_stat_Cd = '0004'
            )
         ORDER BY chg_dt DESC
    </select>

    <!-- 승인모델 테이블 비교 -->
	<select id="getAprvModelCompareTableList" parameterType="hashmap" resultType="encore.meta.mybatis.UpperKeyMap">
        /* mng.getAprvModelCompareTableList */
        select decode(bf_ENT_TAB_ID, null, 'N', decode(af_ENT_TAB_ID, null, 'D' , decode(chg, 0 , c.diff ,'M'))) AS chg_type
               , T.*
         from(
              SELECT NVL (bf.ent_tab_id, af.ent_tab_id) AS ent_tab_id
                   , bf.ent_tab_id AS bf_ent_tab_id, af.ent_tab_id AS af_ent_tab_id
                   , DECODE(bf.ent_tab_name, af.ent_tab_name ,bf.ent_tab_name , LTRIM(RTRIM(bf.ent_tab_name ||' > '|| af.ent_tab_name,' > '),' > ')) AS ent_tab_name
                   , DECODE(bf.tabname, af.tabname, bf.tabname, LTRIM(RTRIM(bf.tabname ||' > '|| af.tabname,' > '),' > ')) AS tabname
                   , DECODE(bf.altnentname, af.altnentname, bf.altnentname, LTRIM(RTRIM(bf.altnentname ||' > '|| af.altnentname,' > '),' > '))  AS altnentname
                   , bf.synonyminfo AS bf_synonyminfo, af.synonyminfo AS af_synonyminfo
                   , bf.partgubun AS bf_partgubun ,af.partgubun  AS af_partgubun
                   , bf.part_type AS bf_part_type ,af.part_type  AS af_part_type
                   , CASE TRIM(TO_CHAR(BITAND(bf.mdl_stdoption, TO_NUMBER('F00','XXX')),'XXX'))
                         WHEN '0' THEN '0'
                         WHEN '100' THEN '1'
                         WHEN '200' THEN '2' END AS bf_mdl_stdoption
                    , CASE TRIM(TO_CHAR(BITAND(af.mdl_stdoption, TO_NUMBER('F00','XXX')),'XXX'))
                         WHEN '0' THEN '0'
                         WHEN '100' THEN '1'
                         WHEN '200' THEN '2' END AS af_mdl_stdoption
                   , bf.ent_stdoption AS bf_ent_stdoption ,af.ent_stdoption AS af_ent_stdoption
                   , bf.init_yn AS bf_init_yn, af.init_yn AS af_init_yn
                   , bf.export_yn AS bf_export_yn, af.export_yn  AS af_export_yn
                   , bf.tab_gbn AS bf_tab_gbn, af.tab_gbn  AS af_tab_gbn
                   , bf.store_period AS bf_store_period, af.store_period  AS af_store_period
                   , bf.del_period AS bf_del_period, af.del_period  AS af_del_period
                   , DECODE(bf.dbowner_info, af.dbowner_info, bf.dbowner_info , LTRIM(RTRIM(Bf.dbowner_info ||' > '|| af.dbowner_info, ' > '), ' > ')) AS dbowner_info
                   , DECODE(bf.dbacct_info, af.dbacct_info, bf.dbacct_info , LTRIM(RTRIM(bf.dbacct_info ||' > '|| af.dbacct_info, ' > '), ' > ')) AS dbacct_info
                   , DECODE(bf.req_rsn, af.req_rsn, bf.req_rsn , LTRIM(RTRIM(bf.req_rsn ||' > '|| af.req_rsn, ' > '), ' > ')) AS req_rsn
                   , bf.mdl_aprv_req_id AS bf_mdl_aprv_req_id,  af.mdl_aprv_req_id AS af_mdl_aprv_req_id
                   , bf.log_reg_dt AS bf_chg_dt, af.log_reg_dt AS af_chg_dt
                   , DECODE(bf.tabname||bf.ent_tab_name||bf.altnentname||bf.synonyminfo||bf.partgubun||bf.part_type||bf.mdl_stdoption
                          ||bf.ent_stdoption||bf.init_yn||bf.export_yn||bf.tab_gbn||bf.store_period||bf.del_period||bf.dbowner_info
                          ||bf.dbacct_info||bf.REQ_RSN
                          , af.tabname||af.ent_tab_name||af.altnentname||af.synonyminfo||af.partgubun||af.part_type||af.mdl_stdoption
                          ||af.ent_stdoption||af.init_yn||af.export_yn||af.tab_gbn||af.store_period||af.del_period||af.dbowner_info
                          ||af.dbacct_info||af.REQ_RSN,
                          0,1) chg
              FROM ( SELECT r.mdl_aprv_req_id, r.log_reg_dt, ent_tab_id,  ent_tab_name, tabname
                           , altnentname, synonyminfo, partgubun, part_type
                           , mdl_stdoption, ent_stdoption, init_yn, export_yn, tab_gbn
                           , store_period, del_period, aply_hope_dt, req_rsn
                           , PKG_STD.FN_SORT_COMP_IDS( dbowner_info, ';' ) dbowner_info
                           , PKG_STD.FN_SORT_COMP_IDS( dbacct_info, ';' ) dbacct_info
                       FROM md_mdl_aprv_req r, md_mdl_aprv_req_enttab t
                      WHERE r.log_a_uid = #{A_UID}
                        AND r.mdl_aprv_stat_Cd = '0004'
                        AND r.mdl_aprv_req_id = t.mdl_aprv_req_id
                        AND t.ent_Tab_Type = '0007'
                        AND r.log_reg_dt = #{APRV_DT1} ) bf full outer join (
                     SELECT r.mdl_aprv_req_id, r.log_reg_dt, ent_tab_id, ent_tab_name, tabname
                           , altnentname, synonyminfo, partgubun, part_type
                           , mdl_stdoption, ent_stdoption, init_yn, export_yn, tab_gbn
                           , store_period, del_period, aply_hope_dt, req_rsn
                           , PKG_STD.FN_SORT_COMP_IDS( dbowner_info, ';' ) dbowner_info
                           , PKG_STD.FN_SORT_COMP_IDS( dbacct_info, ';' ) dbacct_info
                       FROM md_mdl_aprv_req r, md_mdl_aprv_req_enttab t
                      WHERE r.log_a_uid = #{A_UID}
                        AND r.mdl_aprv_stat_cd = '0004'
                        AND r.mdl_aprv_req_id = t.mdl_aprv_req_id
                        AND t.ent_Tab_Type = '0007'
                        AND r.log_reg_dt = #{APRV_DT2} ) af
                    ON (bf.ent_tab_id = af.ent_tab_id)
                      OR (bf.ent_tab_name = af.ent_tab_name)
               ) T,
               (SELECT ent_tab_id, max(diff) diff
                  FROM (
                         SELECT DECODE( bf.ent_tab_id, null, 'N', DECODE( af.ent_tab_id, null, 'D', 'M' )) type
                              , DECODE( bf.ent_tab_id, null, af.ent_tab_id,   bf.ent_tab_id ) AS ent_tab_id
                              ,decode (bf.ent_tab_name || bf.tabname || bf.ref_attr_nm || bf.attr_col_name || bf.coltype || bf.collen || bf.bprimary || bf.bnull || bf.seq
                                      ,af.ent_tab_name || af.tabname || af.ref_attr_nm || af.attr_col_name || af.coltype || af.collen || af.bprimary || af.bnull || af.seq
                                      ,'','M') as diff
                           FROM ( SELECT r.mdl_aprv_req_id, r.log_reg_dt, ent_tab_id, ent_tab_name, tabname, attr_col_id,
                                         ref_attr_nm, attr_col_name, DECODE( bprimary, 1, 'Y', '' ) AS bprimary, DECODE( bnull, 0, 'N', '' ) AS bnull, seq,
                                         coltype, collen
                                   FROM md_mdl_aprv_req r, md_mdl_aprv_req_enttab t, md_mdl_aprv_req_atrcol c
                                  WHERE r.log_a_uid = #{A_UID}
                                    AND r.mdl_aprv_stat_cd = '0004'
                                    AND r.mdl_aprv_req_id = t.mdl_aprv_req_id
                                    AND t.mdl_aprv_req_id = c.mdl_aprv_req_id
                                    AND t.ent_tab_type = '0007'
                                    AND c.attr_col_type = '0008'
                                    AND t.ent_tab_id = c.ref_ent_tab_id
                                    AND mastentid = 'ROOT'
                                    AND r.log_reg_dt = #{APRV_DT1} ) bf FULL OUTER JOIN (
                                 SELECT
                                        r.mdl_aprv_req_id, r.log_reg_dt, ent_tab_id, ent_tab_name, tabname, attr_col_id,
                                        ref_attr_nm, attr_col_name, DECODE( bprimary, 1, 'Y', '' ) AS bprimary, DECODE( bnull, 0, 'N', '' ) AS bnull, seq,
                                        coltype, collen
                                   FROM md_mdl_aprv_req r, md_mdl_aprv_req_enttab t, md_mdl_aprv_req_atrcol c
                                  WHERE r.log_a_uid = #{A_UID}
                                    AND r.mdl_aprv_stat_cd = '0004'
                                    AND r.mdl_aprv_req_id = t.mdl_aprv_req_id
                                    AND t.mdl_aprv_req_id = c.mdl_aprv_req_id
                                    AND t.ent_tab_type = '0007'
                                    AND c.attr_col_Type = '0008'
                                    AND t.ent_tab_id = c.ref_ent_tab_id
                                    AND mastentid = 'ROOT'
                                    AND r.log_reg_dt = #{APRV_DT2} ) af
                                 ON (bf.ent_tab_name = af.ent_tab_name AND bf.seq = af.seq)
                      )
                  GROUP BY ent_tab_id) c
            WHERE t.ent_tab_id = c.ent_tab_id
            <if test='changedYN == "Y"'>
              AND decode(bf_ENT_TAB_ID, null, 'N', decode(af_ENT_TAB_ID, null, 'D' , decode(chg, 0 , c.diff ,'M'))) IS NOT NULL
            </if>

    </select>

    <!-- 승인모델 컬럼 비교 -->
	<select id="getAprvModelCompareColumnList" parameterType="hashmap" resultType="encore.meta.mybatis.UpperKeyMap">
        /*mng.getAprvModelCompareColumnList*/
  		SELECT  CASE  WHEN  type =  'M' THEN   CASE  WHEN position('>' in ref_attr_nm ||attr_col_name || coltype || collen || bprimary || bnull || seq  ) = 0 THEN '' ELSE 'M' END  ELSE type END  AS chg_type
              , ent_tab_id, ent_tab_name, tabname
              , bf_mdl_aprv_req_id, af_mdl_aprv_req_id
              , bf_chg_dt, af_chg_dt
              , attr_col_id, ref_attr_nm, attr_col_name, coltype, collen, bprimary, bnull, seq
          FROM (
            SELECT  CASE  WHEN bf.ent_tab_id IS NULL THEN  'N' ELSE   CASE  WHEN af.ent_tab_id IS NULL THEN  'D'  ELSE  'M' END  END  "type"
                  ,  CASE  WHEN bf.ent_tab_id IS NULL THEN  af.ent_tab_id ELSE  bf.ent_tab_id END  AS ent_tab_id
                  ,  CASE  WHEN bf.ent_tab_name =  af.ent_tab_name  THEN  bf.ent_tab_name ELSE  LTRIM(RTRIM(bf.ent_tab_name ||' > '|| af.ent_tab_name,' > '),' > ') END  AS ent_tab_name
                  ,  CASE  WHEN bf.tabname =  af.tabname  THEN  bf.tabname ELSE  LTRIM(RTRIM(bf.tabname ||' > '|| af.tabname,' > '),' > ') END  AS tabname
                  ,  CASE  WHEN bf.attr_col_id IS NULL THEN  af.attr_col_id ELSE  bf.attr_col_id END  AS attr_col_id
                  , bf.mdl_aprv_req_id AS bf_mdl_aprv_req_id, af.mdl_aprv_req_id AS af_mdl_aprv_req_id
                  , bf.log_reg_dt AS bf_chg_dt, af.log_reg_dt AS af_chg_dt
                  ,  CASE  WHEN bf.ref_attr_nm =  af.ref_attr_nm  THEN  bf.ref_attr_nm ELSE  LTRIM(RTRIM(bf.ref_attr_nm ||' > '|| af.ref_attr_nm,' > '),' > ') END  AS ref_attr_nm
                  ,  CASE  WHEN bf.attr_col_name =  af.attr_col_name THEN  bf.attr_col_name ELSE  LTRIM(RTRIM(bf.attr_col_name ||' > '|| af.attr_col_name,' > '),' > ') END  AS attr_col_name
                  ,  CASE  WHEN bf.coltype =  af.coltype THEN  bf.coltype ELSE  LTRIM(RTRIM(bf.coltype ||' > '|| af.coltype,' > '),' > ') END  AS coltype
                  ,  CASE  WHEN bf.collen =  af.collen THEN  bf.collen ELSE  LTRIM(RTRIM(bf.collen ||' > '|| af.collen,' > '),' > ') END  AS collen
                  ,  CASE  WHEN bf.bprimary =  af.bprimary THEN  bf.bprimary ELSE  LTRIM(RTRIM(bf.bprimary ||' > '|| af.bprimary,' > '),' > ') END  AS bprimary
                  ,  CASE  WHEN bf.bnull IS NULL THEN  bf.bnull ELSE  LTRIM(RTRIM(bf.bnull ||' > '|| af.bnull,' > '),' > ') END  AS bnull
                  ,  CASE  WHEN bf.seq =  af.seq  THEN TO_CHAR(bf.seq, '99999') ELSE  LTRIM(RTRIM(bf.seq ||' > '|| af.seq,' > '),' > ') END   AS seq
                  , ROW_NUMBER() OVER (order by af.seq, bf.seq) AS rn
              FROM
                (SELECT r.mdl_aprv_req_id, r.log_reg_dt, ent_tab_id, ent_tab_name, tabname
                      , attr_col_id, ref_attr_nm, attr_col_name, CASE  when bprimary = 1::text THEN 'Y' ELSE 'N' END  AS bprimary,  CASE  WHEN bnull = 0 THEN 'N' ELSE 'Y' END AS bnull,seq,coltype,collen
                   FROM md_mdl_aprv_req r, md_mdl_aprv_req_enttab t, md_mdl_aprv_req_atrcol c
                  WHERE r.log_a_uid = :A_UID/*#{A_UID}*/
                    AND r.mdl_aprv_stat_cd = '0004'
                    AND r.mdl_aprv_req_id = t.mdl_aprv_req_id
                    AND t.mdl_aprv_req_id = c.mdl_aprv_req_id
                    AND t.ent_tab_id = :ENT_TAB_ID/*#{ENT_TAB_ID}*/
                    AND t.ent_tab_type = '0007'
                    AND c.attr_col_type = '0008'
                    AND t.ent_tab_id = c.ref_ent_tab_id
                    AND mastentid = 'ROOT'
                    AND r.log_reg_dt = :APRV_DT1/*#{APRV_DT1}*/) bf FULL OUTER JOIN
                (SELECT r.mdl_aprv_req_id, r.log_reg_dt, ent_tab_id, ent_tab_name, tabname
                      , attr_col_id, ref_attr_nm, attr_col_name, CASE WHEN c.bprimary = 1::text THEN 'Y' ELSE 'N' END  AS bprimary,  CASE  WHEN bnull = 0 THEN 'N' ELSE 'Y' END AS bnull,seq,coltype,collen
                   FROM md_mdl_aprv_req r, md_mdl_aprv_req_enttab t, md_mdl_aprv_req_atrcol c
                  WHERE r.log_a_uid = :A_UID/*#{A_UID}*/
                    AND r.mdl_aprv_stat_cd = '0004'
                    AND r.mdl_aprv_req_id = t.mdl_aprv_req_id
                    AND t.ent_tab_name = :ENT_TAB_NAME/*#{ENT_TAB_NAME}*/
                    AND t.ent_tab_type = '0007'
                    AND t.mastentid = 'ROOT'
                    AND c.attr_col_Type = '0008'
                    AND t.mdl_aprv_req_id = c.mdl_aprv_req_id
                    AND t.ent_tab_id = c.ref_ent_tab_id
                    AND r.log_reg_dt = :APRV_DT2/*#{APRV_DT2}*/ ) af
                  ON (bf.ent_tab_name = af.ent_tab_name AND bf.seq = af.seq)
          ) t1
          <if test='changedYN == "Y"'>
          WHERE  CASE  WHEN  type =  'M' THEN   CASE  WHEN position('>' in ent_tab_name || tabname || ref_attr_nm ||attr_col_name || coltype || collen || bprimary || bnull || seq  ) = 0 THEN '' ELSE 'M' END  ELSE type END  IS NOT NULL
          </if>
          ORDER BY rn

    </select>

    <!-- 기간별 표준 이력 -->
	<select id="getStdHistoryListByPeriod" parameterType="hashmap" resultType="encore.meta.mybatis.UpperKeyMap">
        /* mng.getStdHistoryListByPeriod */
        SELECT #{STD_AREA_ID} AS std_area_id, A.*, decode(use_end_dt, null, DECODE(rn, 1, 'N', 'M'), 'D') AS chg_type
          FROM (
         <choose>
          <when test="@Ognl@isNotEmpty(DIC_GBN_ARRAY)">
           <foreach collection="DIC_GBN_ARRAY" item="DIC_GBN" open="" separator="UNION ALL" close="">
               <!-- 단어 -->
            <if test="DIC_GBN.DIC_GBN_CD == '0001'">
            /* @std.getStdDicSearchList */
            WITH tgt AS (SELECT /*+ NO_MERGE */
                                dic_gbn_cd
                               ,dic_log_nm
                               ,dic_phy_fll_nm
                               ,dic_phy_nm
                               ,dic_chn_nm
                               ,attr_clss_yn
                               ,ent_clss_yn
                               ,src_gbn_cd
                               ,dic_desc
                               ,dic_id
                               ,standard_yn
                               ,aval_end_dt
                               ,aval_st_dt
                               ,std_area_id
                               ,use_end_dt
                           FROM std_dic d
                          WHERE d.std_area_id = #{STD_AREA_ID}
                            AND d.dic_gbn_cd = '0001')
                ,std AS (SELECT /*+ NO_MERGE */
                                DISTINCT DECODE(tgt.standard_yn, 'Y', tgt.dic_log_nm, d.dic_log_nm) dic_log_nm
                               ,DECODE(tgt.standard_yn, 'Y', tgt.dic_phy_fll_nm, d.dic_phy_fll_nm) dic_phy_fll_nm
                               ,DECODE(tgt.standard_yn, 'Y', tgt.dic_phy_nm, d.dic_phy_nm) dic_phy_nm
                               ,DECODE(tgt.standard_yn, 'Y', tgt.dic_chn_nm, d.dic_chn_nm) dic_chn_nm
                               ,DECODE(tgt.standard_yn, 'Y', tgt.attr_clss_yn, d.attr_clss_yn) attr_clss_yn
                               ,DECODE(tgt.standard_yn, 'Y', tgt.ent_clss_yn, d.ent_clss_yn) ent_clss_yn
                               ,DECODE(tgt.standard_yn, 'Y', tgt.src_gbn_cd, d.src_gbn_cd) src_gbn_cd
                               ,DECODE(tgt.standard_yn, 'Y', tgt.dic_desc, d.dic_desc) dic_desc
                               ,DECODE(tgt.standard_yn, 'Y', tgt.dic_id, d.dic_id) dic_id
                               ,tgt.aval_end_dt
                               ,tgt.aval_st_dt
                               ,tgt.std_area_id
                               ,tgt.use_end_dt
                               ,tgt.dic_gbn_cd
                           FROM tgt, std_dic_rel r, std_dic d
                          WHERE tgt.std_area_id = r.c_std_area_id(+)
                            AND tgt.dic_id = r.c_dic_id(+)
                            AND tgt.aval_end_dt = r.aval_end_dt(+)
                            AND r.rel_gbn_cd(+) = '0001'
                            AND r.p_std_area_id = d.std_area_id(+)
                            AND r.p_dic_id = d.dic_id(+)
                            AND r.aval_end_dt = d.aval_end_dt(+))
                ,fll AS (SELECT /*+ NO_MERGE */
                                std.dic_gbn_cd
                               ,std.dic_log_nm
                               ,std.dic_phy_fll_nm
                               ,std.dic_phy_nm
                               ,std.dic_chn_nm
        <choose>
            <when test="_databaseId eq 'oracle10'">
                               ,LTRIM(RTRIM(XMLAGG(XMLELEMENT(e,du.dic_log_nm, ', ')).EXTRACT('//text()'), ', '), ', ') syn_nms
            </when>
            <otherwise>
                               ,LISTAGG(du.dic_log_nm, ', ') WITHIN GROUP (ORDER BY du.dic_log_nm) syn_nms
            </otherwise>
        </choose>
                               ,std.attr_clss_yn
                               ,std.ent_clss_yn
                               ,std.src_gbn_cd
                               ,std.dic_desc
                               ,std.dic_id
                               ,std.aval_end_dt
                               ,std.aval_st_dt
                               ,std.use_end_dt
                               ,ROW_NUMBER() OVER (PARTITION BY std.dic_id ORDER BY std.dic_id, std.aval_st_dt) AS RN
                           FROM std, std_dic_rel r, std_dic du
                          WHERE std.std_area_id = r.p_std_area_id(+)
                            AND std.dic_id = r.p_dic_id(+)
                            AND std.aval_end_dt = r.aval_end_dt(+)
                            AND r.rel_gbn_cd(+) = '0001'
                            AND r.c_std_area_id = du.std_area_id(+)
                            AND r.c_dic_id = du.dic_id(+)
                            AND r.aval_end_dt = du.aval_end_dt(+)
                          GROUP BY std.dic_gbn_cd, std.dic_log_nm, std.dic_phy_fll_nm, std.dic_phy_nm, std.dic_chn_nm, std.attr_clss_yn
                                 , std.ent_clss_yn, std.src_gbn_cd, std.dic_desc, std.dic_id, std.aval_end_dt
                                 , std.aval_st_dt , std.use_end_dt
                          ORDER BY std.dic_log_nm, std.aval_end_dt)
            SELECT fll.dic_gbn_cd
                  , '' term_gbn_cd
                  , '' dom_type_cd
                  , '' cd_gbn_cd
                  ,fll.dic_log_nm AS log_nm
                  ,fll.dic_phy_nm AS phy_nm
                  ,fll.dic_phy_fll_nm AS fll_nm
                  , '' key_dom_nm, '' data_type, null data_len, null data_scale, '' dom_grp_nm
                  ,c.cd_nm src_gbn_cd
                  ,fll.dic_desc AS dic_desc
                  ,fll.dic_id
                  ,'' as dom_id
                  ,fll.aval_end_dt
                  ,fll.aval_st_dt
                  ,fll.use_end_dt
                  ,fll.rn
                  <!--  ,fll.dic_chn_nm
                 ,fll.syn_nms
                 , DECODE(fll.attr_clss_yn, null, 'N', attr_clss_yn) attr_clss_yn
                 , DECODE(fll.ent_clss_yn, null, 'N', ent_clss_yn) ent_clss_yn -->
              FROM fll, usr_code c
             WHERE fll.src_gbn_cd = c.cd_id(+)
               AND c.up_cd_id(+) = 'SRC_GBN_CD'
               AND c.aval_end_dt(+) = '99991231235959'
               AND fll.aval_st_dt BETWEEN #{startDt} AND #{endDt}
            </if>
            <!-- 용어 -->
            <if test="DIC_GBN.DIC_GBN_CD == '0002'">
            /* @std.getTermList */
            SELECT * FROM(
                SELECT /*+ NO_MERGE */
                         t.dic_gbn_cd
                        ,term_gbn_cd
                        ,'' dom_type_cd
                        ,'' cd_gbn_cd
                        ,t.dic_log_nm log_nm
                        ,t.dic_phy_nm phy_nm
                        ,t.dic_phy_fll_nm fll_nm
                        ,d.key_dom_nm
                        ,dt.cd_nm data_type
                        ,d.data_len
                        ,d.data_scale
                        ,dg.dom_grp_nm
                        ,src.cd_nm src_gbn_cd
                        ,t.dic_desc
                        ,t.dic_id
                        ,d.dom_id
                        ,t.aval_end_dt
                        ,t.aval_st_dt
                        ,t.use_end_dt
                        ,ROW_NUMBER() OVER(PARTITION BY t.dic_id ORDER BY t.dic_id, t.aval_st_dt) AS rn
                        <!--,d.dom_nm
                        ,t.std_area_id
                        ,d.dom_id -->
                    FROM std_dic t, std_dom d, std_dom_grp dg, usr_code src, ms_code dt
                   WHERE t.std_area_id = #{STD_AREA_ID}
                     AND t.standard_yn = 'Y'
                     AND t.dic_gbn_cd = '0002'
                     AND t.term_gbn_cd = '0001'
                     AND t.std_area_id = d.std_area_id
                     AND t.dom_id = d.dom_id
                     AND t.aval_end_dt <![CDATA[<=]]> d.aval_end_dt
                     AND t.aval_end_dt > d.aval_st_dt
                     AND d.std_area_id = dg.std_area_id
                     AND d.dom_grp_id = dg.dom_grp_id
                     AND d.aval_end_dt <![CDATA[<=]]> dg.aval_end_dt
                     AND d.aval_end_dt > dg.aval_st_dt
                     AND t.src_gbn_cd = src.cd_id(+)
                     AND t.aval_end_dt <![CDATA[<=]]> src.aval_end_dt(+)
                     AND t.aval_end_dt > src.aval_st_dt(+)
                     AND src.up_cd_id(+) = 'SRC_GBN_CD'
                     AND d.data_type_cd = dt.cd_id
                     AND dt.lang_cd = #{langCd}
                     AND dt.up_cd_id = '0101'
                 )
                 WHERE aval_st_dt BETWEEN #{startDt} AND #{endDt}
            </if>
            <!--도메인-->
            <if test="DIC_GBN.DIC_GBN_CD == '0003' and DIC_GBN.DOM_TYPE_CD == '0003'">
            /* @std.getDomainSearchList */
            SELECT * FROM (
                SELECT '0003' as dic_gbn_cd
                     , '' term_gbn_cd
                     , dom_type_cd
                     , '' as cd_gbn_cd
                     , d.key_dom_nm log_nm
                     , '' phy_nm
                     , '' fll_nm
                     , '' key_dom_nm
                     , dt.cd_nm data_type
                     , d.data_len
                     , d.data_scale
                     , g.dom_grp_nm
                     , d.src_gbn_cd
                     , d.dom_desc as dic_desc
                     , d.dom_id as dic_id
                     , d.dom_id
                     , d.aval_end_dt
                     , d.aval_st_dt
                     , d.use_end_dt
                     , ROW_NUMBER() OVER(PARTITION BY d.dom_id ORDER BY d.dom_id, d.aval_st_dt) AS rn
                      <!--,d.dom_nm
                      ,d.data_default
                      ,d.data_min
                      ,d.data_max
                      ,d.data_format
                      ,d.data_enum-->
                  FROM std_dom d, std_dom_grp g, ms_code dt
                 WHERE d.std_area_id = #{STD_AREA_ID}
                   AND d.dom_grp_id = g.dom_grp_id
                   AND d.std_area_id = g.std_area_id
                   AND d.aval_end_dt <![CDATA[<=]]> g.aval_end_dt
                   AND d.aval_end_dt > g.aval_st_dt
                   AND d.data_type_cd = dt.cd_id
                   AND d.dom_type_cd = '0003'
                   AND dt.up_cd_id = '0101'
                   AND dt.lang_cd = #{langCd}
               )
               WHERE aval_st_dt BETWEEN #{startDt} AND #{endDt}
            </if>
            <!-- 코드 -->
            <if test="DIC_GBN.DIC_GBN_CD == '0003' and DIC_GBN.DOM_TYPE_CD == '0001'">
            /* @std.getStdCodeHistoryList */
            SELECT * FROM (
                SELECT '0003' dic_gbn_cd
                      , '' term_gbn_cd
                      , d.dom_type_cd
                      , c.cd_gbn_cd
                      , c.cd_nm log_nm
                      , cd_eng_nm phy_nm
                      , '' fll_nm
                      , '' key_dom_nm
                      , (SELECT cd_nm FROM ms_code WHERE up_cd_id = '0101' AND cd_id = d.data_type_cd AND lang_cd = #{langCd}) data_type
                      , d.data_len
                      , d.data_scale
                      , a.cd_area_nm as dom_grp_nm
                      , d.src_gbn_cd
                      , c.cd_desc as dic_desc
                      , d.dom_id as dic_id
                      , d.dom_id
                      , c.aval_end_dt
                      , c.aval_st_dt
                      , d.use_end_dt
                      , ROW_NUMBER() OVER(PARTITION BY dic_id ORDER BY dic_id, c.aval_st_dt) AS rn
                 FROM std_code c, std_dom d, std_cd_area a
                WHERE c.std_area_id = #{STD_AREA_ID}
                  AND d.dom_id = c.dom_id
                  AND d.std_area_id = c.std_area_id
                  AND d.aval_end_dt <![CDATA[>=]]> c.aval_end_dt
                  AND d.aval_st_dt <![CDATA[<]]> c.aval_end_dt
                  AND a.std_area_id(+) = c.std_area_id
                  AND a.cd_area_id(+) = c.cd_area_id
                  AND a.aval_st_dt(+) <![CDATA[<=]]> #{startDt}
                  AND a.aval_end_dt(+) > #{startDt}
              )
              WHERE aval_st_dt BETWEEN #{startDt} AND #{endDt}
            </if>
           </foreach>
          </when>
         </choose>
         ) A
         ORDER BY aval_st_dt
    </select>

    <!-- 과거 표준 데이터 조회 -->
	<select id="getStdHistoryList" parameterType="hashmap" resultType="encore.meta.mybatis.UpperKeyMap">
        /* mng.getStdHistoryList */
        <include refid="pagingHeader"/>
        SELECT A.*,COUNT( 1 ) OVER ( ) total_row_count
          FROM
          <choose>
          <when test="@Ognl@isNotEmpty(DIC_GBN_ARRAY)">
           <foreach collection="DIC_GBN_ARRAY" item="DIC_GBN" open="(" separator="UNION ALL" close=") A">
            <!-- 단어 -->
            <if test="DIC_GBN.DIC_GBN_CD == '0001'">
            SELECT std_area_id
                 , dic_id
                 , '' AS dom_id
                 , '0001' AS dic_gbn_cd
                 , '' AS term_gbn_cd
                 , '' AS dom_type_cd
                 , '' AS cd_gbn_cd
                 , dic_log_nm AS log_nm
                 , dic_phy_nm AS phy_nm
                 , dic_phy_fll_nm AS fll_nm
                 , '' AS key_dom_nm
                 , '' AS dom_grp_nm
                 , '' AS data_type
                 , null AS data_len
                 , null AS data_scale
                 , dic_desc
                 , use_end_dt
                 , aval_st_dt
                 , aval_end_dt
              FROM (
                SELECT std_area_id, dic_id, dic_log_nm, dic_phy_nm, dic_phy_fll_nm, dic_desc
                     , ent_clss_yn, attr_clss_yn, use_end_dt, aval_st_dt, aval_end_dt
                  FROM std_dic dic
                 WHERE dic.std_area_id = #{STD_AREA_ID}
                   AND dic.aval_st_dt <![CDATA[<=]]> #{DATE}
                   AND dic.aval_end_dt > #{DATE}
                   AND dic.dic_gbn_cd = '0001'
              )
            </if>
            <!-- 용어 -->
            <if test="DIC_GBN.DIC_GBN_CD == '0002'">
            SELECT std_area_id
                 , dic_id
                 , dom_id
                 , '0002' AS dic_gbn_cd
                 , term_gbn_cd
                 , '' AS dom_type_cd
                 , '' AS cd_gbn_cd
                 , dic_log_nm AS log_nm
                 , dic_phy_nm AS phy_nm
                 , dic_phy_fll_nm AS fll_nm
                 , key_dom_nm
                 , dom_grp_nm
                 , data_type
                 , data_len
                 , data_scale
                 , dic_desc
                 , use_end_dt
                 , aval_st_dt
                 , aval_end_dt
              FROM(
                SELECT dic.std_area_id, dic.dic_id, dic.dic_log_nm, dic.dic_phy_nm, dic.dic_phy_fll_nm, dic.term_gbn_cd
                     , dic.dom_id, dic.use_end_dt, d.key_dom_nm, d.dom_nm, d.dom_type_cd, dg.dom_grp_id, dg.dom_grp_nm
                     , (SELECT cd_nm FROM ms_code WHERE up_cd_id = '0101' AND lang_cd = #{langCd} AND cd_id = d.data_type_cd) AS data_type
                     , d.data_len, d.data_scale, dic.aval_st_dt, dic.aval_end_dt, dic.dic_desc
                  FROM std_dic dic
                     , std_dom d
                     , std_dom_grp dg
                 WHERE dic.std_area_id = #{STD_AREA_ID}
                   AND dic.dic_gbn_cd = '0002'
                   AND dic.aval_st_dt <![CDATA[<=]]> #{DATE}
                   AND dic.aval_end_dt > #{DATE}
                   AND d.std_area_id(+) = dic.std_area_id
                   AND d.dom_id(+) = dic.dom_id
                   AND d.aval_st_dt(+) <![CDATA[<=]]> #{DATE}
                   AND d.aval_end_dt(+) > #{DATE}
                   AND dg.std_area_id(+) = d.std_area_id
                   AND dg.dom_grp_id(+) = d.dom_grp_id
                   AND dg.aval_st_dt(+) <![CDATA[<=]]> #{DATE}
                   AND dg.aval_end_dt(+) > #{DATE}
                   )
            </if>
            <!-- 도메인 -->
            <if test="DIC_GBN.DIC_GBN_CD == '0003' and DIC_GBN.DOM_TYPE_CD == '0003'">
            SELECT std_area_id
                 , dom_id as dic_id
                 , dom_id
                 , '0003' dic_gbn_cd
                 , '' term_gbn_cd
                 , dom_type_cd
                 , '' AS cd_gbn_cd
                 , key_dom_nm AS log_nm
                 , '' phy_nm
                 , '' fll_nm
                 , '' key_dom_nm
                 , dom_grp_nm
                 , data_type
                 , data_len
                 , data_scale
                 , dom_desc AS dic_desc
                 , use_end_dt AS use_end_dt
                 , aval_st_dt
                 , aval_end_dt
              FROM (
                   SELECT d.std_area_id, dom_id, key_dom_nm
                        , (SELECT cd_nm FROM ms_code WHERE up_cd_id = '0101' AND lang_cd = #{langCd} AND cd_id = d.data_type_cd) AS data_type
                        , dom_type_cd, data_len, data_scale, d.dom_grp_id, dg.dom_grp_nm, d.use_end_dt
                        , data_min, data_max, data_format, data_enum, data_default, d.aval_st_dt, d.aval_end_dt, d.dom_desc
                     FROM std_dom d
                        , std_dom_grp dg
                    WHERE d.std_area_id = #{STD_AREA_ID}
                      AND d.dom_type_cd = '0003'
                      AND d.aval_st_dt <![CDATA[<=]]> #{DATE}
                      AND d.aval_end_dt > #{DATE}
                      AND dg.std_area_id(+) = d.std_area_id
                      AND dg.dom_grp_id(+) = d.dom_grp_id
                      AND dg.aval_st_dt(+) <![CDATA[<=]]> #{DATE}
                      AND dg.aval_end_dt(+) > #{DATE}
              )
            </if>
            <!-- 코드 -->
            <if test="DIC_GBN.DIC_GBN_CD == '0003' and DIC_GBN.DOM_TYPE_CD == '0001'">
            SELECT std_area_id AS std_area_id
                 , dom_id AS dic_id
                 , dom_id AS dom_id
                 , '0003' dic_gbn_cd
                 , '' term_gbn_cd
                 , dom_type_cd
                 , cd_gbn_cd
                 , key_dom_nm AS log_nm
                 , '' phy_nm
                 , '' fll_nm
                 , '' key_dom_nm
                 , dom_grp_nm
                 , data_type
                 , data_len
                 , data_scale
                 , dom_desc AS dic_desc
                 , use_end_dt
                 , aval_st_dt
                 , aval_end_dt
              FROM (
                   SELECT d.std_area_id, d.dom_id, key_dom_nm, dom_type_cd, c.cd_gbn_cd
                        , (SELECT cd_nm FROM ms_code WHERE up_cd_id = '0101' AND lang_cd = #{langCd} AND cd_id = d.data_type_cd) AS data_type
                        , data_len, data_scale, d.dom_grp_id, a.cd_area_nm as dom_grp_nm, d.use_end_dt, data_min
                        , data_max, data_format, data_enum, data_default, d.aval_st_dt, d.aval_end_dt, d.dom_desc
                     FROM std_dom d
                        , std_code c
                        , std_cd_area a
                    WHERE d.std_area_id = #{STD_AREA_ID}
                      AND d.aval_st_dt <![CDATA[<=]]> #{DATE}
                      AND d.aval_end_dt > #{DATE}
                      AND d.dom_type_cd = '0001'
                      AND c.std_area_id = d.std_area_id
                      AND c.dom_id = d.dom_id
                      AND c.aval_st_dt <![CDATA[<=]]> #{DATE}
                      AND c.aval_end_dt > #{DATE}
                      AND a.std_area_id(+) = c.std_area_id
                      AND a.cd_area_id(+) = c.cd_area_id
                      AND a.aval_st_dt(+) <![CDATA[<=]]> #{DATE}
                      AND a.aval_end_dt(+) > #{DATE}
                   )
            </if>
           </foreach>
          </when>
          </choose>
          ORDER BY dic_gbn_cd, cd_gbn_cd, log_nm
          <include refid="pagingFooter"/>
    </select>

    <!-- 특정기간 표준 비교 -->
	<select id="getCompareStdList" parameterType="hashmap" resultType="encore.meta.mybatis.UpperKeyMap">
        /* mng.getCompareStdList */
        <include refid="pagingHeader"/>
        SELECT chg_type, std_area_id, dic_id, dom_id, dic_gbn_cd, term_gbn_cd, dom_type_cd, cd_gbn_cd
             , decode(chg_type, 'M', log_nm, ltrim(rtrim(log_nm ,' > '), ' > ')) as log_nm
             , decode(chg_type, 'M', phy_nm, ltrim(rtrim(phy_nm ,' > '), ' > ')) as phy_nm
             , decode(chg_type, 'M', fll_nm, ltrim(rtrim(fll_nm ,' > '), ' > ')) as fll_nm
             , decode(chg_type, 'M', key_dom_nm, ltrim(rtrim(key_dom_nm ,' > '), ' > ')) as key_dom_nm
             , decode(chg_type, 'M', dom_grp_nm, ltrim(rtrim(dom_grp_nm ,' > '), ' > ')) as dom_grp_nm
             , decode(chg_type, 'M', data_type, ltrim(rtrim(data_type ,' > '), ' > ')) as data_type
             , decode(chg_type, 'M', data_len, ltrim(rtrim(data_len ,' > '), ' > ')) as data_len
             , decode(chg_type, 'M', data_scale, ltrim(rtrim(data_scale ,' > '), ' > ')) as data_scale
             , decode(chg_type, 'M', dic_desc, ltrim(rtrim(dic_desc ,' > '), ' > ')) as dic_desc
             , a_use_end_dt
             , b_use_end_dt
             , aval_dt
             , COUNT(1) OVER() total_row_count
          FROM
          <choose>
          <when test="@Ognl@isNotEmpty(DIC_GBN_ARRAY)">
           <foreach collection="DIC_GBN_ARRAY" item="DIC_GBN" open="(" separator="UNION ALL" close=")">
            <!-- 단어 -->
            <if test="DIC_GBN.DIC_GBN_CD == '0001'">
            SELECT DECODE( a.std_area_id, null, 'N',
                     DECODE( b.std_area_id, null, 'D',
                       DECODE( a.dic_log_nm || a.dic_phy_nm || a.dic_phy_fll_nm || a.dic_desc || a.ent_clss_yn || a.attr_clss_yn || a.use_end_dt,
                               b.dic_log_nm || b.dic_phy_nm || b.dic_phy_fll_nm || b.dic_desc || b.ent_clss_yn || b.attr_clss_yn || b.use_end_dt,
                               '', 'M'))) chg_type
                 , NVL(a.std_area_id, b.std_area_id) AS std_area_id
                 , NVL(a.dic_id, b.dic_id) AS dic_id
                 , '' AS dom_id
                 , '0001' AS dic_gbn_cd
                 , '' AS term_gbn_cd
                 , '' AS dom_type_cd
                 , '' AS cd_gbn_cd
                 , DECODE(a.dic_log_nm, b.dic_log_nm, a.dic_log_nm, a.dic_log_nm ||' > '|| b.dic_log_nm) AS log_nm
                 , DECODE(a.dic_phy_nm, b.dic_phy_nm, a.dic_phy_nm, a.dic_phy_nm ||' > '|| b.dic_phy_nm) AS phy_nm
                 , DECODE(a.dic_phy_fll_nm, b.dic_phy_fll_nm, a.dic_phy_fll_nm, a.dic_phy_fll_nm ||' > '|| b.dic_phy_fll_nm) AS fll_nm
                 , '' AS key_dom_nm
                 , '' AS dom_grp_nm
                 , '' AS data_type
                 , '' AS data_len
                 , '' AS data_scale
                 , DECODE(a.dic_desc, b.dic_desc, a.dic_desc, a.dic_desc ||' > '|| b.dic_desc) AS dic_desc
                 , a.use_end_dt AS a_use_end_dt
                 , b.use_end_dt AS b_use_end_dt
                 , NVL(b.aval_st_dt, a.aval_end_dt) AS aval_dt
              FROM
              <foreach collection="SEARCH_RANGE" item="SEARCH_DATE" open="(" separator=") A FULL OUTER JOIN (" close=") B">
                SELECT std_area_id, dic_id, dic_log_nm, dic_phy_nm, dic_phy_fll_nm, dic_desc
                     , ent_clss_yn, attr_clss_yn, use_end_dt, aval_st_dt, aval_end_dt
                  FROM std_dic dic
                 WHERE dic.std_area_id = #{STD_AREA_ID}
                   AND dic.aval_st_dt <![CDATA[<=]]> #{SEARCH_DATE}
                   AND dic.aval_end_dt > #{SEARCH_DATE}
                   AND dic.dic_gbn_cd = '0001'
              </foreach>
                ON a.std_area_id = b.std_area_id
               AND a.dic_id = b.dic_id
            </if>
            <!-- 용어 -->
            <if test="DIC_GBN.DIC_GBN_CD == '0002'">
            SELECT DECODE( a.std_area_id, null, 'N',
                     DECODE( b.std_area_id, null, 'D',
                       DECODE( a.dic_log_nm || a.dic_phy_nm || a.dic_phy_fll_nm || a.dic_desc || a.dom_id || a.dom_nm || a.use_end_dt,
                               b.dic_log_nm || b.dic_phy_nm || b.dic_phy_fll_nm || b.dic_desc || b.dom_id || b.dom_nm || b.use_end_dt,
                               '', 'M'))) chg_type
                 , NVL(a.std_area_id, b.std_area_id) AS std_area_id
                 , NVL(a.dic_id, b.dic_id) AS dic_id
                 , NVL(a.dom_id, b.dom_id) AS dom_id
                 , '0002' AS dic_gbn_cd
                 , NVL(a.term_gbn_cd, b.term_gbn_cd) AS term_gbn_cd
                 , '' AS dom_type_cd
                 , '' AS cd_gbn_cd
                 , DECODE(a.dic_log_nm, b.dic_log_nm, a.dic_log_nm, a.dic_log_nm ||' > '|| b.dic_log_nm) AS log_nm
                 , DECODE(a.dic_phy_nm, b.dic_phy_nm, a.dic_phy_nm, a.dic_phy_nm ||' > '|| b.dic_phy_nm) AS phy_nm
                 , DECODE(a.dic_phy_fll_nm, b.dic_phy_fll_nm, a.dic_phy_fll_nm, a.dic_phy_fll_nm ||' > '|| b.dic_phy_fll_nm) AS fll_nm
                 , DECODE(a.key_dom_nm, b.key_dom_nm, a.key_dom_nm, a.key_dom_nm ||' > '|| b.key_dom_nm) AS key_dom_nm
                 , DECODE(a.dom_grp_nm, b.dom_grp_nm, a.dom_grp_nm, a.dom_grp_nm ||' > '|| b.dom_grp_nm) AS dom_grp_nm
                 , DECODE(a.data_type, b.data_type, a.data_type, a.data_type ||' > '|| b.data_type) AS data_type
                 , DECODE(a.data_len, b.data_len, TO_CHAR(a.data_len), a.data_len ||' > '|| b.data_len) AS data_len
                 , DECODE(a.data_scale, b.data_scale, TO_CHAR(a.data_scale), a.data_scale ||' > '|| b.data_scale) AS data_scale
                 , DECODE(a.dic_desc, b.dic_desc, a.dic_desc, a.dic_desc ||' > '|| b.dic_desc) AS dic_desc
                 , a.use_end_dt AS a_use_end_dt
                 , b.use_end_dt AS b_use_end_dt
                 , NVL(b.aval_st_dt, a.aval_end_dt) AS aval_dt
              FROM
              <foreach collection="SEARCH_RANGE" item="SEARCH_DATE" open="(" separator=") A FULL OUTER JOIN (" close=") B">
                SELECT dic.std_area_id, dic.dic_id, dic.dic_log_nm, dic.dic_phy_nm, dic.dic_phy_fll_nm, dic.term_gbn_cd
                     , dic.dom_id, dic.use_end_dt, d.key_dom_nm, d.dom_nm, d.dom_type_cd, dg.dom_grp_id, dg.dom_grp_nm
                     , (SELECT cd_nm FROM ms_code WHERE up_cd_id = '0101' AND lang_cd = #{langCd} AND cd_id = d.data_type_cd) AS data_type
                     , d.data_len, d.data_scale, dic.aval_st_dt, dic.aval_end_dt, dic.dic_desc
                  FROM std_dic dic
                     , std_dom d
                     , std_dom_grp dg
                 WHERE dic.std_area_id = #{STD_AREA_ID}
                   AND dic.dic_gbn_cd = '0002'
                   AND dic.aval_st_dt <![CDATA[<=]]> #{SEARCH_DATE}
                   AND dic.aval_end_dt > #{SEARCH_DATE}
                   AND d.std_area_id(+) = dic.std_area_id
                   AND d.dom_id(+) = dic.dom_id
                   AND d.aval_st_dt(+) <![CDATA[<=]]> #{SEARCH_DATE}
                   AND d.aval_end_dt(+) > #{SEARCH_DATE}
                   AND dg.std_area_id(+) = d.std_area_id
                   AND dg.dom_grp_id(+) = d.dom_grp_id
                   AND dg.aval_st_dt(+) <![CDATA[<=]]> #{SEARCH_DATE}
                   AND dg.aval_end_dt(+) > #{SEARCH_DATE}
              </foreach>
                ON a.std_area_id = b.std_area_id
               AND a.dic_id = b.dic_id
            </if>
            <!-- 도메인 -->
            <if test="DIC_GBN.DIC_GBN_CD == '0003' and DIC_GBN.DOM_TYPE_CD == '0003'">
            SELECT DECODE(a.std_area_id, null ,'N',
                     DECODE(b.std_area_id, null , 'D',
                       DECODE(a.key_dom_nm|| a.data_type|| a.data_len|| a.data_scale|| a.dom_grp_id|| a.use_end_dt|| a.data_min|| a.data_max|| a.data_format|| a.data_enum || a.data_default
                            , b.key_dom_nm|| b.data_type|| b.data_len|| b.data_scale|| b.dom_grp_id|| b.use_end_dt|| b.data_min|| b.data_max|| b.data_format|| b.data_enum || b.data_default
                            , '','M'))) AS chg_type
                 , NVL(a.std_area_id, b.std_area_id) AS std_area_id
                 , NVL(a.dom_id, b.dom_id) AS dic_id
                 , NVL(a.dom_id, b.dom_id) AS dom_id
                 , '0003' dic_gbn_cd
                 , '' term_gbn_cd
                 , NVL(a.dom_type_cd, b.dom_type_cd) AS dom_type_cd
                 , '' AS cd_gbn_cd
                 , DECODE(a.key_dom_nm, b.key_dom_nm, a.key_dom_nm, a.key_dom_nm ||' > '|| b.key_dom_nm) AS log_nm
                 , '' phy_nm
                 , '' fll_nm
                 , '' key_dom_nm
                 , DECODE(a.dom_grp_nm, b.dom_grp_nm, a.dom_grp_nm, a.dom_grp_nm ||' > '|| b.dom_grp_nm) as dom_grp_nm
                 , DECODE(a.data_type, b.data_type, a.data_type, a.data_type ||' > '|| b.data_type) as data_type
                 , DECODE(a.data_len, b.data_len, to_char(a.data_len), a.data_len ||' > '|| b.data_len) as data_len
                 , DECODE(a.data_scale, b.data_scale, to_char(a.data_scale), a.data_scale ||' > '|| b.data_scale) as data_scale
                 <!--, decode(a.data_min, b.data_min, a.data_min, ltrim(rtrim(a.data_min ||' > '|| b.data_min,' > '), ' > ')) as data_min
                 , decode(a.data_max, b.data_max, a.data_max, ltrim(rtrim(a.data_max ||' > '|| b.data_max,' > '), ' > ')) as data_max
                 , decode(a.data_format, b.data_format, a.data_format, ltrim(rtrim(a.data_format ||' > '|| b.data_format,' > '), ' > ')) as data_format
                 , decode(a.data_enum, b.data_enum, a.data_enum, ltrim(rtrim(a.data_enum ||' > '|| b.data_enum,' > '), ' > ')) as data_enum
                 , decode(a.data_default, b.data_default, a.data_default, ltrim(rtrim(a.data_default ||' > '|| b.data_default,' > '), ' > ')) as data_default -->
                 , DECODE(a.dom_desc, b.dom_desc, a.dom_desc, a.dom_desc ||' > '|| b.dom_desc) AS dic_desc
                 , a.use_end_dt AS a_use_end_dt
                 , b.use_end_dt AS b_use_end_dt
                 , NVL(b.aval_st_dt, a.aval_end_dt) AS aval_dt
              FROM
              <foreach collection="SEARCH_RANGE" item="SEARCH_DATE" open="(" separator=") A FULL OUTER JOIN (" close=") B">
                   SELECT d.std_area_id, dom_id, key_dom_nm
                        , (SELECT cd_nm FROM ms_code WHERE up_cd_id = '0101' AND lang_cd = #{langCd} AND cd_id = d.data_type_cd) AS data_type
                        , dom_type_cd, data_len, data_scale, d.dom_grp_id, dg.dom_grp_nm, d.use_end_dt
                        , data_min, data_max, data_format, data_enum, data_default, d.aval_st_dt, d.aval_end_dt, d.dom_desc
                     FROM std_dom d
                        , std_dom_grp dg
                    WHERE d.std_area_id = #{STD_AREA_ID}
                      AND d.dom_type_cd = '0003'
                      AND d.aval_st_dt <![CDATA[<=]]> #{SEARCH_DATE}
                      AND d.aval_end_dt > #{SEARCH_DATE}
                      AND dg.std_area_id(+) = d.std_area_id
                      AND dg.dom_grp_id(+) = d.dom_grp_id
                      AND dg.aval_st_dt(+) <![CDATA[<=]]> #{SEARCH_DATE}
                      AND dg.aval_end_dt(+) > #{SEARCH_DATE}
              </foreach>
                ON a.std_area_id = b.std_area_id
               AND a.dom_id = b.dom_id
            </if>
            <!-- 코드 -->
            <if test="DIC_GBN.DIC_GBN_CD == '0003' and DIC_GBN.DOM_TYPE_CD == '0001'">
            SELECT DECODE(a.std_area_id, null ,'N',
                     DECODE(b.std_area_id, null , 'D',
                       DECODE(a.key_dom_nm|| a.data_type|| a.data_len|| a.data_scale|| a.dom_grp_id|| a.use_end_dt
                            , b.key_dom_nm|| b.data_type|| b.data_len|| b.data_scale|| b.dom_grp_id|| b.use_end_dt
                            , '','M'))) AS chg_type
                 , NVL(a.std_area_id, b.std_area_id) AS std_area_id
                 , NVL(a.dom_id, b.dom_id) AS dic_id
                 , NVL(a.dom_id, b.dom_id) AS dom_id
                 , '0003' dic_gbn_cd
                 , '' term_gbn_cd
                 , NVL(a.dom_type_cd, b.dom_type_cd) AS dom_type_cd
                 , NVL(a.cd_gbn_cd, b.cd_gbn_cd) AS cd_gbn_cd
                 , DECODE(a.key_dom_nm, b.key_dom_nm, a.key_dom_nm, ltrim(rtrim(a.key_dom_nm ||' > '|| b.key_dom_nm,' > '), ' > ')) AS log_nm
                 , '' phy_nm, '' fll_nm
                 , '' key_dom_nm
                 , DECODE(a.dom_grp_nm, b.dom_grp_nm, a.dom_grp_nm, a.dom_grp_nm ||' > '|| b.dom_grp_nm) as dom_grp_nm
                 , DECODE(a.data_type, b.data_type, a.data_type, a.data_type ||' > '|| b.data_type) as data_type
                 , DECODE(a.data_len, b.data_len, to_char(a.data_len), a.data_len ||' > '|| b.data_len) as data_len
                 , DECODE(a.data_scale, b.data_scale, to_char(a.data_scale), a.data_scale ||' > '|| b.data_scale) as data_scale
                 , DECODE(a.dom_desc, b.dom_desc, a.dom_desc, a.dom_desc ||' > '|| b.dom_desc) AS dic_desc
                 , a.use_end_dt AS a_use_end_dt
                 , b.use_end_dt AS b_use_end_dt
                 , NVL(b.aval_st_dt, a.aval_end_dt ) AS aval_dt
              FROM
              <foreach collection="SEARCH_RANGE" item="SEARCH_DATE" open="(" separator=") A FULL OUTER JOIN (" close=") B">
                   SELECT d.std_area_id, d.dom_id, key_dom_nm, dom_type_cd, c.cd_gbn_cd
                        , (SELECT cd_nm FROM ms_code WHERE up_cd_id = '0101' AND lang_cd = #{langCd} AND cd_id = d.data_type_cd) AS data_type
                        , data_len, data_scale, d.dom_grp_id, a.cd_area_nm as dom_grp_nm, d.use_end_dt, data_min
                        , data_max, data_format, data_enum, data_default, d.aval_st_dt, d.aval_end_dt, d.dom_desc
                     FROM std_dom d
                        , std_code c
                        , std_cd_area a
                    WHERE d.std_area_id = #{STD_AREA_ID}
                      AND d.aval_st_dt <![CDATA[<=]]> #{SEARCH_DATE}
                      AND d.aval_end_dt > #{SEARCH_DATE}
                      AND d.dom_type_cd = '0001'
                      AND c.std_area_id = d.std_area_id
                      AND c.dom_id = d.dom_id
                      AND c.aval_st_dt <![CDATA[<=]]> #{SEARCH_DATE}
                      AND c.aval_end_dt > #{SEARCH_DATE}
                      AND a.std_area_id(+) = c.std_area_id
                      AND a.cd_area_id(+) = c.cd_area_id
                      AND a.aval_st_dt(+) <![CDATA[<=]]> #{SEARCH_DATE}
                      AND a.aval_end_dt(+) > #{SEARCH_DATE}
              </foreach>
                ON a.std_area_id = b.std_area_id
               AND a.dom_id = b.dom_id
            </if>
           </foreach>
          </when>
          </choose>
        WHERE chg_type IS NOT NULL
        ORDER BY aval_dt
        <include refid="pagingFooter"/>
    </select>

    <!-- 스키마별 데이터 수집 시간 -->
	<select id="getCollectDtList" parameterType="hashmap" resultType="encore.meta.mybatis.UpperKeyMap">
        /* mng.getCollectDtList */
        SELECT TO_CHAR(job_st_dt, 'YYYYMMDDHH24MISS') AS chg_dt, TO_CHAR(job_st_dt, 'YYYYMMDDHH24MISS') AS fmt_chg_dt
          FROM md_job j, md_job_hist h
         WHERE j.job_id = h.job_id
           AND h.run_rslt = 'SUCCESS'
           AND j.svr_id = #{SVR_ID}
           AND j.inst_id = #{INST_ID}
           AND j.db_id = #{DB_ID}
           AND EXISTS ( SELECT 1
                          FROM md_mng_obj
                         WHERE job_id = j.job_id
                     <choose>
                        <when test="DB_TYPE == '0004' || DB_TYPE == '0005'">
                           AND acct_id = 'ALL'
                        </when>
                        <otherwise>
                           AND acct_id = #{ACCT_ID}
                        </otherwise>
                     </choose>
                     )
         ORDER BY job_st_dt DESC
    </select>

    <!-- 수집 내역 비교 -->
	<select id="getCompareCollectList" parameterType="hashmap" resultType="encore.meta.mybatis.UpperKeyMap">
        /* mng.getCompareCollectList */
        <include refid="pagingHeader"/>
        SELECT A.* , COUNT(1) OVER() total_row_count
          FROM (
            <!-- table -->
            <if test="OBJ_TYPE == '' || OBJ_TYPE == '0002'">
            SELECT '0002' obj_type, DECODE(chg_type, '' , c.diff , chg_type) AS chg_type, t.obj_id, t.obj_nm, '' tab_nm, '' stat1, '' stat2
              FROM (
                SELECT DECODE(a.seg_id, null, 'N',
                         DECODE(b.seg_id, null , 'D',
                            DECODE( a.seg_nm|| a.ts_id|| a.init_ext|| a.next_ext|| a.pct_incr|| a.min_ext|| a.max_ext|| a.pct_free|| a.pct_used
                                  , b.seg_nm|| b.ts_id|| b.init_ext|| b.next_ext|| b.pct_incr|| b.min_ext|| b.max_ext|| b.pct_free|| b.pct_used, '' , 'M' ))) chg_type
                     , nvl(a.seg_id, b.seg_id) AS obj_id, nvl(a.seg_nm, b.seg_nm) AS obj_nm
                  FROM(
                    SELECT *
                      FROM md_seg
                     WHERE seg_type = '0002'
                       AND aval_st_dt <![CDATA[<]]> #{DATE1}
                       AND aval_end_dt <![CDATA[>=]]> #{DATE1}
                       AND svr_id = #{SVR_ID}
                       AND inst_id = #{INST_ID}
                       AND db_id = #{DB_ID}
                       AND acct_id = #{ACCT_ID}) A FULL OUTER JOIN (
                    SELECT *
                      FROM md_seg
                     WHERE seg_type = '0002'
                       AND aval_st_dt <![CDATA[<]]> #{DATE2}
                       AND aval_end_dt <![CDATA[>=]]> #{DATE2}
                       AND svr_id = #{SVR_ID}
                       AND inst_id = #{INST_ID}
                       AND db_id = #{DB_ID}
                       AND acct_id = #{ACCT_ID})B
                   ON a.seg_id = b.seg_id
            ) t,
            (
            SELECT obj_id, 'M' AS diff
              FROM (
                SELECT DISTINCT NVL(a.obj_id, b.obj_id) obj_id
                     , DECODE(a.obj_Id , null, 'N',
                         DECODE(b.obj_id, null , 'D',
                            DECODE( a.col_pstn || a.col_nm || a.data_type_nm || a.data_type_id || a.data_type_len || a.data_type_prec || a.data_type_scal || a.null_yn || a.dflt_val || a.col_cmnt || a.del_yn || a.user_desc
                                  , b.col_pstn || b.col_nm || b.data_type_nm || b.data_type_id || b.data_type_len || b.data_type_prec || b.data_type_scal || b.null_yn || b.dflt_val || b.col_cmnt || b.del_yn || b.user_desc , '', 'M'))) AS diff
                  FROM ( SELECT *
                           FROM md_col b
                          WHERE aval_st_dt <![CDATA[<]]> #{DATE1}
                            AND aval_end_dt <![CDATA[>=]]> #{DATE1}
                            AND svr_id = #{SVR_ID}
                            AND inst_id = #{INST_ID}
                            AND db_id = #{DB_ID}
                            AND acct_id = #{ACCT_ID} ) A full outer join
                       ( SELECT *
                           FROM md_col b
                          WHERE aval_st_dt <![CDATA[<]]> #{DATE2}
                            AND aval_end_dt <![CDATA[>=]]> #{DATE2}
                            AND svr_id = #{SVR_ID}
                            AND inst_id = #{INST_ID}
                            AND db_id = #{DB_ID}
                            AND acct_id = #{ACCT_ID} ) B
                    ON a.obj_id = b.obj_id
                   AND a.col_id = b.col_id
              )
             WHERE diff IS NOT NULL
            ) c
            WHERE t.obj_id = c.obj_id(+)
            </if>
            <if test="@Ognl@isEmpty(OBJ_TYPE)">
            UNION ALL
            </if>
            <if test="OBJ_TYPE == '' ||OBJ_TYPE == '0001'">
            <!-- index -->
            SELECT '0001' obj_type, NVL(chg_type, diff) AS chg_type, i.obj_id, i.obj_nm, i.tab_nm, '' stat1, '' stat2
              FROM (
                SELECT '0001' AS obj_type
                     , DECODE( a.seg_id, null, 'N'
                        , DECODE( b.seg_id, null, 'D'
                            , DECODE( a.seg_nm || a.ts_id || a.init_ext || a.next_ext || a.pct_incr || a.min_ext || a.max_ext || a.pct_free || a.pct_used,
                                      b.seg_nm || b.ts_id || b.init_ext || b.next_ext || b.pct_incr || b.min_ext || b.max_ext || b.pct_free || b.pct_used, '', 'M' ))) chg_type
                        , nvl( a.seg_id, b.seg_id ) AS obj_id
                        , nvl( a.seg_nm, b.seg_nm ) AS obj_nm
                        , nvl( a.tab_nm, b.tab_nm ) AS tab_nm
                  FROM ( SELECT a.*, (SELECT obj_nm FROM md_obj WHERE obj_id = o.bas_tab_id) AS tab_nm
                           FROM md_obj o, md_seg a
                          WHERE o.obj_id = a.seg_id
                            AND a.seg_type = '0001'
                            AND a.aval_st_dt <![CDATA[<]]> #{DATE1}
                            AND a.aval_end_dt <![CDATA[>=]]> #{DATE1}
                            AND a.svr_id = #{SVR_ID}
                            AND a.inst_id = #{INST_ID}
                            AND a.db_id = #{DB_ID}
                            AND a.acct_id = #{ACCT_ID} ) A FULL OUTER JOIN (
                         SELECT a.*, (SELECT obj_nm FROM md_obj WHERE obj_id = o.bas_tab_id) AS tab_nm
                           FROM md_obj o, md_seg a
                          WHERE o.obj_id = a.seg_id
                            AND a.seg_type = '0001'
                            AND a.aval_st_dt <![CDATA[<]]> #{DATE2}
                            AND a.aval_end_dt <![CDATA[>=]]> #{DATE2}
                            AND a.svr_id = #{SVR_ID}
                            AND a.inst_id = #{INST_ID}
                            AND a.db_id = #{DB_ID}
                            AND a.acct_id = #{ACCT_ID} ) B ON a.seg_id = b.seg_id
                ) i ,
               (select obj_id, diff
                  from ( SELECT DISTINCT NVL(a.obj_id, b.obj_id) obj_id
                              , DECODE( a.obj_Id, null, 'N'
                                 , DECODE( b.obj_id, null, 'D'
                                    , DECODE( a.col_nm || a.col_pstn || a.data_type_nm || a.data_type_len || a.null_yn || a.col_cmnt
                                            , b.col_nm || b.col_pstn || b.data_type_nm || b.data_type_len || b.null_yn || b.col_cmnt,'', 'M' ))) diff
                         FROM ( SELECT mc.obj_id, mc.col_id, mc.col_nm,
                                       mcc.col_pstn, mc.data_type_nm, mc.data_type_len,
                                       mc.null_yn, mc.col_cmnt
                                FROM md_col_comp mcc, md_col mc
                                WHERE mcc.obj_id = mc.obj_id
                                  AND mcc.col_id = mc.col_id
                                  AND mcc.aval_st_dt  <![CDATA[<]]> #{DATE1}
                                  AND mcc.aval_end_dt <![CDATA[>=]]> #{DATE1}
                                  AND mc.aval_st_dt  <![CDATA[<]]> #{DATE1}
                                  AND mc.aval_end_dt <![CDATA[>=]]> #{DATE1}
                                  AND mcc.svr_id = #{SVR_ID}
                                  AND mcc.inst_id = #{INST_ID}
                                  AND mcc.db_id = #{DB_ID}
                                  AND mcc.acct_id = #{ACCT_ID} ) A full outer join (
                               SELECT mc.obj_id, mc.col_id, mc.col_nm,
                                       mcc.col_pstn, mc.data_type_nm, mc.data_type_len,
                                       mc.null_yn, mc.col_cmnt
                                 FROM md_col_comp mcc, md_col mc
                                WHERE mcc.obj_id = mc.obj_id
                                  AND mcc.col_id = mc.col_id
                                  AND mcc.aval_st_dt <![CDATA[<]]> #{DATE2}
                                  AND mcc.aval_end_dt <![CDATA[>=]]> #{DATE2}
                                  AND mc.aval_st_dt <![CDATA[<]]> #{DATE2}
                                  AND mc.aval_end_dt <![CDATA[>=]]> #{DATE2}
                                  AND mcc.svr_id = #{SVR_ID}
                                  AND mcc.inst_id = #{INST_ID}
                                  AND mcc.db_id = #{DB_ID}
                                  AND mcc.acct_id = #{ACCT_ID} ) B
                                ON a.obj_id = b.obj_id
                           AND a.col_id = b.col_id )
                  WHERE diff IS NOT NULL
                ) c
                where i.obj_id = c.obj_id(+)
            </if>
            <if test="@Ognl@isEmpty(OBJ_TYPE)">
            UNION ALL
            </if>
            <if test="OBJ_TYPE == '' ||OBJ_TYPE == '0004'">
            <!-- view -->
            SELECT '0004' obj_type, DECODE(chg_type, '' , diff, chg_type) chg_type, v.obj_id, obj_nm, '' tab_nm, stat1, stat2
              FROM (
                SELECT DECODE(a.view_id, null , 'N', DECODE(b.view_id , null , 'D' , DECODE( a.view_id|| a.view_nm || a.view_stat, b.view_id|| b.view_nm || b.view_stat, '', 'M'))) chg_type
                     , NVL(a.view_id, b.view_id) AS obj_id
                     , NVL(a.view_nm, b.view_nm) AS obj_nm
                     , a.view_stat AS stat1, b.view_stat AS stat2
                  FROM ( SELECT *
                           FROM md_view
                          WHERE aval_st_dt <![CDATA[<]]> #{DATE1}
                            AND aval_end_dt <![CDATA[>=]]> #{DATE1}
                            AND svr_id = #{SVR_ID}
                            AND inst_id = #{INST_ID}
                            AND db_id = #{DB_ID}
                            AND acct_id = #{ACCT_ID} ) A full outer join
                        ( select *
                           from md_view
                          where aval_st_dt <![CDATA[<]]> #{DATE2}
                            AND aval_end_dt <![CDATA[>=]]> #{DATE2}
                            AND svr_id = #{SVR_ID}
                            AND inst_id = #{INST_ID}
                            AND db_id = #{DB_ID}
                            AND acct_id = #{ACCT_ID} ) B
                         on a.view_id = b.view_id
                ) v ,
                (SELECT *
                   FROM(
                    SELECT distinct nvl( a.obj_id, b.obj_id ) as obj_id, decode(a.obj_src, a.obj_src, '', 'M') diff
                      FROM (SELECT obj_id, obj_src, line_seq
                              FROM md_src
                             WHERE aval_st_dt <![CDATA[<]]> #{DATE1}
                               AND aval_end_dt <![CDATA[>=]]> #{DATE1}
                               AND obj_type = '0004'
                               AND svr_id = #{SVR_ID}
                               AND inst_id = #{INST_ID}
                               AND db_id = #{DB_ID}
                               AND acct_id = #{ACCT_ID} ) A FULL OUTER JOIN
                           (SELECT obj_id, obj_src, line_seq
                              FROM md_src
                             WHERE aval_st_dt <![CDATA[<]]> #{DATE2}
                               AND aval_end_dt <![CDATA[>=]]> #{DATE2}
                               AND obj_type = '0004'
                               AND svr_id = #{SVR_ID}
                               AND inst_id = #{INST_ID}
                               AND db_id = #{DB_ID}
                               AND acct_id = #{ACCT_ID} ) B ON a.obj_id = b.obj_id
                               AND a.line_seq = b.line_seq
                         )
                  WHERE diff is not null
                )s
             WHERE v.obj_id = s.obj_id(+)
            </if>
            <if test="@Ognl@isEmpty(OBJ_TYPE)">
            UNION ALL
            </if>
            <if test="OBJ_TYPE == '' ||OBJ_TYPE == '0020'">
            <!-- sequence -->
            SELECT '0020' obj_type
                 , DECODE(a.seq_id, null, 'N'
                    , DECODE(b.seq_id, null, 'D'
                        , DECODE(a.seq_nm|| a.seq_stat|| a.max_val|| a.min_val||a.incrmt_by|| a.cycl_yn|| a.ordr_yn|| a.cach_size,
                                 b.seq_nm|| b.seq_stat|| b.max_val|| b.min_val||b.incrmt_by|| b.cycl_yn|| b.ordr_yn|| b.cach_size, '', 'M'))) AS chg_type
                 , nvl(a.seq_id, b.seq_id) AS obj_id
                 , nvl(a.seq_nm, b.seq_nm) AS obj_nm
                 , '' tab_nm
                 , a.seq_stat stat1, b.seq_stat stat2
              FROM(
                select *
                  from md_seq
                 where aval_st_dt <![CDATA[<]]> #{DATE1}
                   AND aval_end_dt <![CDATA[>=]]> #{DATE1}
                   AND svr_id = #{SVR_ID}
                   AND inst_id = #{INST_ID}
                   AND db_id = #{DB_ID}
                   AND acct_id = #{ACCT_ID} ) A FULL OUTER JOIN
                (SELECT *
                  FROM md_seq
                 WHERE aval_st_dt <![CDATA[<]]> #{DATE2}
                   AND aval_end_dt <![CDATA[>=]]> #{DATE2}
                   AND svr_id = #{SVR_ID}
                   AND inst_id = #{INST_ID}
                   AND db_id = #{DB_ID}
                   AND acct_id = #{ACCT_ID} )B
                ON a.seq_id = b.seq_id
           </if>
           <if test="@Ognl@isEmpty(OBJ_TYPE)">
            UNION ALL
           </if>
           <if test="OBJ_TYPE == '' ||OBJ_TYPE == '0005'">
           <!-- procedure -->
           SELECT obj_type, nvl(chg_type, diff) as chg_type, p.obj_id, obj_nm, '' tab_nm, stat1, stat2
             FROM(
                SELECT NVL(a.obj_type, b.obj_type) AS obj_type
                     , DECODE(a.obj_id, null, 'N'
                        , DECODE(b.obj_id, null, 'D'
                           , DECODE(a.obj_nm|| a.obj_stat, b.obj_nm|| b.obj_stat , '', 'M'))) AS chg_type
                     , NVL(a.obj_id, b.obj_id) AS obj_id
                     , NVL(a.obj_nm, b.obj_nm) AS obj_nm
                     , a.obj_stat stat1, b.obj_stat stat2
                  FROM(
                     SELECT obj_type
                          , obj_id
                          , DECODE( obj_type, '0007', obj_nm || '.' || mmbr_obj_nm, obj_nm ) obj_nm, mmbr_obj_nm
                          , obj_stat
                       FROM md_proc
                      WHERE svr_id = #{SVR_ID}
                        AND inst_id = #{INST_ID}
                        AND db_id = #{DB_ID}
                        AND acct_id = #{ACCT_ID}
                        AND aval_st_dt <![CDATA[<]]> #{DATE1}
                        AND aval_end_dt <![CDATA[>=]]> #{DATE1}
                        ) A FULL OUTER JOIN (
                     SELECT obj_type
                          , obj_id
                          , DECODE( obj_type, '0007', obj_nm || '.' || mmbr_obj_nm, obj_nm ) obj_nm, mmbr_obj_nm
                          , obj_stat
                       FROM md_proc
                      WHERE svr_id = #{SVR_ID}
                        AND inst_id = #{INST_ID}
                        AND db_id = #{DB_ID}
                        AND acct_id = #{ACCT_ID}
                        AND aval_st_dt <![CDATA[<]]> #{DATE2}
                        AND aval_end_dt <![CDATA[>=]]> #{DATE2} )B
                  ON a.obj_id = b.obj_id
                 AND a.obj_nm = b.obj_nm
                 AND a.mmbr_obj_nm = b.mmbr_obj_nm
               ) p,
              ( SELECT *
                  FROM (SELECT DISTINCT NVL( a.obj_id, b.obj_id ) AS obj_id, decode(a.obj_src, b.obj_src, '', 'M') diff
                          FROM ( SELECT obj_id, obj_src, line_seq
                                  FROM md_src
                                 WHERE obj_type in ('0005','0006','0007','0008')
                                   AND svr_id = #{SVR_ID}
                                   AND inst_id = #{INST_ID}
                                   AND db_id = #{DB_ID}
                                   AND acct_id = #{ACCT_ID}
                                   AND aval_st_dt <![CDATA[<]]> #{DATE1}
                                   AND aval_end_dt <![CDATA[>=]]> #{DATE1}) A FULL OUTER JOIN
                               ( SELECT obj_id, obj_src, line_seq
                                  FROM md_src
                                 WHERE obj_type in ('0005','0006','0007','0008')
                                   AND svr_id = #{SVR_ID}
                                   AND inst_id = #{INST_ID}
                                   AND db_id = #{DB_ID}
                                   AND acct_id = #{ACCT_ID}
                                   AND aval_st_dt <![CDATA[<]]> #{DATE2}
                                   AND aval_end_dt <![CDATA[>=]]> #{DATE2} ) B
                                 ON a.obj_id = b.obj_id
                                AND a.line_seq = b.line_seq
                         )
                  WHERE  diff is not null
              )s
            WHERE p.obj_id = s.obj_id(+)
           </if>
           <if test="@Ognl@isEmpty(OBJ_TYPE)">
            UNION ALL
           </if>
           <if test="OBJ_TYPE == '' ||OBJ_TYPE == '0009'">
           <!-- trigger -->
           SELECT obj_type, NVL(chg_type, diff) as chg_type, t.obj_id, obj_nm, '' tab_nm, stat1, stat2
             FROM(
                SELECT '0009' AS obj_type
                     , DECODE(a.trg_id, null, 'N'
                        , DECODE(b.trg_id, null, 'D'
                           , DECODE(a.trg_nm|| a.trg_stat|| a.trg_type|| a.trgng_evt
                                  , b.trg_nm|| b.trg_stat|| b.trg_type|| b.trgng_evt , '', 'M'))) AS chg_type
                     , NVL(a.trg_id, b.trg_id) AS obj_id
                     , NVL(a.trg_nm, b.trg_nm) AS obj_nm
                     , a.trg_stat stat1, b.trg_stat stat2
                  FROM (
                    SELECT *
                      FROM md_trg
                     WHERE svr_id = #{SVR_ID}
                           AND inst_id = #{INST_ID}
                           AND db_id = #{DB_ID}
                           AND acct_id = #{ACCT_ID}
                           AND aval_st_dt <![CDATA[<]]> #{DATE1}
                           AND aval_end_dt <![CDATA[>=]]> #{DATE1} ) a FULL OUTER JOIN
                    (SELECT *
                      FROM md_trg
                     WHERE svr_id = #{SVR_ID}
                           AND inst_id = #{INST_ID}
                           AND db_id = #{DB_ID}
                           AND acct_id = #{ACCT_ID}
                           AND aval_st_dt <![CDATA[<]]> #{DATE2}
                           AND aval_end_dt <![CDATA[>=]]> #{DATE2} ) b
                    ON a.trg_id = b.trg_id
                )t,
              (SELECT *
                 FROM (
                    SELECT DISTINCT NVL( a.obj_id, b.obj_id ) AS obj_id, decode(a.obj_src, b.obj_src, '', 'M') diff
                      FROM ( SELECT obj_id, obj_src, line_seq
                             FROM md_src
                             WHERE obj_type = '0009'
                               AND svr_id = #{SVR_ID}
                               AND inst_id = #{INST_ID}
                               AND db_id = #{DB_ID}
                               AND acct_id = #{ACCT_ID}
                               AND aval_st_dt <![CDATA[<]]> #{DATE1}
                               AND aval_end_dt <![CDATA[>=]]> #{DATE1}) A FULL OUTER JOIN
                           ( SELECT obj_id, obj_src, line_seq
                             FROM md_src
                             WHERE obj_type = '0009'
                               AND svr_id = #{SVR_ID}
                               AND inst_id = #{INST_ID}
                               AND db_id = #{DB_ID}
                               AND acct_id = #{ACCT_ID}
                               AND aval_st_dt <![CDATA[<]]> #{DATE2}
                               AND aval_end_dt <![CDATA[>=]]> #{DATE2} ) B ON a.obj_id = b.obj_id
                    AND a.line_seq = b.line_seq
                    )
                WHERE diff is not null
                )s
            WHERE t.obj_id = s.obj_id(+)
           </if>
           <if test="@Ognl@isEmpty(OBJ_TYPE)">
            UNION ALL
           </if>
           <if test="OBJ_TYPE == '' ||OBJ_TYPE == '0021'">
           <!-- database link -->
           SELECT '0021' AS obj_type
                 , DECODE(a.link_id, null, 'N'
                    , DECODE(b.link_id, null , 'D'
                       , DECODE (a.link_nm || a.host_nm , b.link_nm || b.host_nm, '', 'M'))) AS chg_type
                 , NVL(a.link_id, b.link_id) AS obj_id
                 , NVL(a.link_nm, b.link_nm) AS obj_nm
                 , '' tab_nm , '' stat1 , '' stat2
             FROM(
                SELECT *
                  FROM md_link
                 WHERE svr_id = #{SVR_ID}
                           AND inst_id = #{INST_ID}
                           AND db_id = #{DB_ID}
                           AND acct_id = #{ACCT_ID}
                           AND aval_st_dt <![CDATA[<]]> #{DATE1}
                           AND aval_end_dt <![CDATA[>=]]> #{DATE1} )A FULL OUTER JOIN
              ( SELECT *
                  FROM md_link
                 WHERE svr_id = #{SVR_ID}
                           AND inst_id = #{INST_ID}
                           AND db_id = #{DB_ID}
                           AND acct_id = #{ACCT_ID}
                           AND aval_st_dt <![CDATA[<]]> #{DATE2}
                           AND aval_end_dt <![CDATA[>=]]> #{DATE2} )B
                 ON a.link_id = b.link_id
           </if>
           <if test="@Ognl@isEmpty(OBJ_TYPE)">
            UNION ALL
           </if>
           <if test="OBJ_TYPE == '' ||OBJ_TYPE == '0014'">
           <!-- mview -->
           SELECT obj_type, NVL(chg_type, diff) as chg_type, t.obj_id, obj_nm, '' tab_nm, stat1, stat2
             FROM(
                SELECT '0014' AS obj_type
                     , DECODE(a.mview_id, null, 'N'
                        , DECODE(b.mview_id, null, 'D'
                           , DECODE(a.mview_nm|| a.mview_stat|| a.qury_len|| a.rewrt_enabl_yn|| a.rfsh_mode|| a.fast_rfsh
                                  , b.mview_nm|| b.mview_stat|| b.qury_len|| b.rewrt_enabl_yn|| a.rfsh_mode|| a.fast_rfsh , '', 'M'))) AS chg_type
                     , NVL(a.mview_id, b.mview_id) AS obj_id
                     , NVL(a.mview_nm, b.mview_nm) AS obj_nm
                     , a.mview_stat stat1, b.mview_stat stat2
                  FROM (
                    SELECT *
                      FROM md_mview
                     WHERE svr_id = #{SVR_ID}
                           AND inst_id = #{INST_ID}
                           AND db_id = #{DB_ID}
                           AND acct_id = #{ACCT_ID}
                           AND aval_st_dt <![CDATA[<]]> #{DATE1}
                           AND aval_end_dt <![CDATA[>=]]> #{DATE1}) a FULL OUTER JOIN
                    (SELECT *
                      FROM md_mview
                     WHERE svr_id = #{SVR_ID}
                           AND inst_id = #{INST_ID}
                           AND db_id = #{DB_ID}
                           AND acct_id = #{ACCT_ID}
                           AND aval_st_dt <![CDATA[<]]> #{DATE2}
                           AND aval_end_dt <![CDATA[>=]]> #{DATE2}) b
                    ON a.mview_id = b.mview_id
                )t,
              ( SELECT *
                  FROM(
                    SELECT DISTINCT NVL( a.obj_id, b.obj_id ) AS obj_id, decode(a.obj_src, b.obj_src, '', 'M') diff
                      FROM ( SELECT obj_id, obj_src, line_seq
                             FROM md_src
                             WHERE obj_type = '0014'
                               AND svr_id = #{SVR_ID}
                               AND inst_id = #{INST_ID}
                               AND db_id = #{DB_ID}
                               AND acct_id = #{ACCT_ID}
                               AND aval_st_dt <![CDATA[<]]> #{DATE1}
                               AND aval_end_dt <![CDATA[>=]]> #{DATE1} ) A FULL OUTER JOIN
                           ( SELECT obj_id, obj_src, line_seq
                             FROM md_src
                             WHERE obj_type = '0014'
                               AND svr_id = #{SVR_ID}
                               AND inst_id = #{INST_ID}
                               AND db_id = #{DB_ID}
                               AND acct_id = #{ACCT_ID}
                               AND aval_st_dt <![CDATA[<]]> #{DATE2}
                               AND aval_end_dt <![CDATA[>=]]> #{DATE2} ) B ON a.obj_id = b.obj_id
                    AND a.line_seq = b.line_seq
                  )
                WHERE diff is not null
                )mv
            WHERE t.obj_id = mv.obj_id(+)
            </if>
           <if test="@Ognl@isEmpty(OBJ_TYPE)">
            UNION ALL
           </if>
           <if test="OBJ_TYPE == '' ||OBJ_TYPE == '0023'">
            <!-- synonym -->
            SELECT '0023' AS obj_type
                 , DECODE(a.synm_id, null, 'N'
                     , DECODE(b.synm_id, null, 'D'
                          ,DECODE(a.synm_nm|| a.synm_stat|| a.ref_obj_id|| a.link_nm|| a.ref_obj_ownr_nm|| a.ref_obj_nm
                                , b.synm_nm|| b.synm_stat|| b.ref_obj_id|| b.link_nm|| b.ref_obj_ownr_nm|| b.ref_obj_nm ,'' ,'M'))) AS chg_type
                 , NVL(a.synm_id, b.synm_id) AS obj_id
                 , NVL(a.synm_nm, b.synm_nm) AS obj_nm
                 , '' tab_nm
                 , a.synm_stat stat1, b.synm_stat stat2
              FROM (
                SELECT *
                  FROM md_synm a LEFT OUTER JOIN md_obj b ON a.ref_obj_id = b.obj_id
                 WHERE a.aval_st_dt <![CDATA[<]]> #{DATE1}
                   AND a.aval_end_dt <![CDATA[>=]]> #{DATE1}
                   AND a.svr_id = #{SVR_ID}
                   AND a.inst_id = #{INST_ID}
                   AND a.db_id = #{DB_ID}
                   AND a.acct_id = #{ACCT_ID}
                   AND b.obj_type IN ( '0002', '0004', '0005', '0006', '0007', '0014' )
                  ) A FULL OUTER JOIN (
                SELECT *
                  FROM md_synm a LEFT OUTER JOIN md_obj b ON a.ref_obj_id = b.obj_id
                 WHERE a.aval_st_dt <![CDATA[<]]> #{DATE2}
                   AND a.aval_end_dt <![CDATA[>=]]> #{DATE2}
                   AND a.svr_id = #{SVR_ID}
                   AND a.inst_id = #{INST_ID}
                   AND a.db_id = #{DB_ID}
                   AND a.acct_id = #{ACCT_ID}
                   AND b.obj_type IN ( '0002', '0004', '0005', '0006', '0007', '0014' ))B
                ON a.synm_id = b.synm_id
         </if>
         ) A
         WHERE chg_type IS NOT NULL
        <if test="@Ognl@isNotEmpty(sortParams)">
         <foreach item="item" collection="sortParams" open="ORDER BY" separator=",">
            ${item.property} ${item.direction}
         </foreach>
        </if>
        <include refid="pagingFooter"/>
    </select>

	<select id="getViewInfo" parameterType="hashmap" resultType="encore.meta.mybatis.UpperKeyMap">
        /* mng.getViewInfo */
        SELECT view_id obj_id
             , view_nm obj_nm
             , (SELECT cd_nm
                  FROM ms_code
                 WHERE up_cd_id = '0027'
                   AND lang_cd = #{langCd}
                   AND cd_id = view_stat) obj_stat
          FROM md_view
         WHERE view_id = #{OBJ_ID}
        <if test="@Ognl@isNotEmpty(DATE)">
           AND aval_end_dt = '99991231235959'
        </if>
        <if test="@Ognl@isNotEmpty(DATE)">
           AND aval_st_dt &lt; #{DATE}
           AND aval_end_dt &gt;= #{DATE}
        </if>
    </select>

	<select id="getProcedureInfo" parameterType="hashmap" resultType="encore.meta.mybatis.UpperKeyMap">
        /* mng.getProcedureInfo */
        SELECT DISTINCT obj_nm
             , (SELECT cd_nm
                  FROM ms_code
                 WHERE up_cd_id = '0027'
                   AND lang_cd = #{langCd}
                   AND cd_id = obj_stat) obj_stat
          FROM md_proc
         WHERE obj_id = #{OBJ_ID}
           AND aval_end_dt = '99991231235959'
    </select>

	<select id="getSequenceInfo" parameterType="hashmap" resultType="encore.meta.mybatis.UpperKeyMap">
         /* mng.getSequenceInfo */
        SELECT seq_id obj_id
             , seq_nm obj_nm
             , (SELECT cd_nm
                  FROM ms_code
                 WHERE up_cd_id = '0027'
                   AND lang_cd = #{langCd}
                   AND cd_id = seq_stat) obj_stat
             , min_val, TO_CHAR(max_val) max_val, incrmt_by, cycl_yn, ordr_yn, cach_size, last_no
          FROM md_seq
         WHERE seq_id = #{OBJ_ID}
        <if test="@Ognl@isEmpty(DATE)">
           AND aval_end_dt = '99991231235959'
        </if>
        <if test="@Ognl@isNotEmpty(DATE)">
           AND aval_st_dt <![CDATA[<]]> #{DATE}
           AND aval_end_dt <![CDATA[>=]]> #{DATE}
        </if>
    </select>

	<select id="getTriggerInfo" parameterType="hashmap" resultType="encore.meta.mybatis.UpperKeyMap">
        /* mng.getTriggerInfo */
		 select
			c.trg_id as obj_id,
			c.trg_nm as obj_nm ,
			(
			select
				cd_nm
			from
				ms_code
			where
				up_cd_id = '0027'
				and lang_cd = #{langCd}
				and cd_id = c.trg_stat ) obj_stat,
			c.trg_type,
			c.trgng_evt,
			d.obj_nm base_table_nm
		from
			md_trg c
		left outer join md_obj d on
			(c.bas_tab_id = d.obj_id
			and 'N' = d.del_yn)
		where
			c.trg_id = #{OBJ_ID}
			and c.aval_st_dt <![CDATA[<]]> #{DATE}
			and c.aval_end_dt <![CDATA[>=]]> #{DATE}

    </select>

	<select id="getDblinkInfo" parameterType="hashmap" resultType="encore.meta.mybatis.UpperKeyMap">
        /* mng.getDblinkInfo */
        SELECT link_id obj_id
             , link_nm obj_nm
             , host_nm
          FROM md_link
         WHERE link_id = #{OBJ_ID}
        <if test="@Ognl@isEmpty(DATE)">
           AND aval_end_dt = '99991231235959'
        </if>
        <if test="@Ognl@isNotEmpty(DATE)">
           AND aval_st_dt <![CDATA[<]]> #{DATE}
           AND aval_end_dt <![CDATA[>=]]> #{DATE}
        </if>
    </select>

	<select id="getMViewInfo" parameterType="hashmap" resultType="encore.meta.mybatis.UpperKeyMap">
        /* mng.getMViewInfo */
        SELECT mview_id obj_id
              ,mview_nm obj_nm
              ,(SELECT cd_nm FROM ms_code WHERE up_cd_id = '0027' AND cd_id = mview_stat AND lang_cd = #{langCd}) obj_stat
              ,qury_len
              ,rewrt_enabl_yn
              ,rfsh_mode
              ,fast_rfsh
          FROM md_mview
         WHERE mview_id = #{OBJ_ID}
           AND aval_st_dt <![CDATA[<]]> #{DATE}
           AND aval_end_dt <![CDATA[>=]]> #{DATE}
    </select>

	<select id="getSynonymInfo" parameterType="hashmap" resultType="encore.meta.mybatis.UpperKeyMap">
        /* mng.getSynonymInfo */
        SELECT a.acct_id
             , a.synm_id
             , a.synm_nm
             , a.ref_obj_id
             , NVL(b.obj_nm, ref_obj_nm) ref_obj_nm
             , b.obj_type ref_obj_type
             , (SELECT cd_nm
                  FROM ms_code
                 WHERE up_cd_id = '0014'
                   AND cd_id = b.obj_type
                   AND lang_cd = #{langCd}) ref_obj_type_nm
             , b.obj_cmnt ref_obj_cmnt
             , a.ref_obj_ownr_nm
             , a.link_nm
             , (SELECT cd_nm
                  FROM ms_code
                 WHERE cd_id = b.obj_stat
                   AND up_cd_id = '0027'
                   AND lang_cd = #{langCd}) obj_stat
             , del_yn
          FROM md_synm a
          LEFT OUTER JOIN md_obj b
            ON a.ref_obj_id = b.obj_id
         WHERE a.synm_id = #{OBJ_ID}
        <if test="@Ognl@isEmpty(DATE)">
           AND a.aval_end_dt = '99991231235959'
        </if>
        <if test="@Ognl@isNotEmpty(DATE)">
           AND a.aval_st_dt <![CDATA[<]]> #{DATE}
           AND a.aval_end_dt <![CDATA[>=]]> #{DATE}
        </if>
           AND b.obj_type IN ('0002', '0004', '0005', '0006', '0007', '0014')
    </select>

	<select id="getTableInfo" parameterType="hashmap" resultType="encore.meta.mybatis.UpperKeyMap">
        /* mng.getTableInfo */
        SELECT seg_id
             , seg_nm
             , (SELECT cd_nm
                  FROM ms_code
                 WHERE cd_id = s.seg_stat
                   AND up_cd_id = '0027'
                   AND lang_cd = #{langCd}) seg_stat
             , 'TABLE' seg_type
             , clstr_idx_yn, lcl_idx_yn, pct_free, del_yn
             , ts_id, init_ext, next_ext, min_ext, max_ext, pct_incr, logng_yn, pct_used
          FROM md_seg s
         WHERE seg_type = '0002'
           AND seg_id = #{OBJ_ID}
        <if test="@Ognl@isNotEmpty(DATE)">
           AND aval_st_dt &lt; #{DATE}
           AND aval_end_dt &gt;= #{DATE}
        </if>
    </select>

	<select id="getCompareColumnInfo" parameterType="hashmap" resultType="encore.meta.mybatis.UpperKeyMap">
        /* mng.getCompareColumnInfo */
        select *
          from (
            SELECT  CASE  WHEN a.obj_Id  IS NULL THEN  'N' ELSE 
                      CASE  WHEN b.obj_id IS NULL THEN  'D' ELSE 
                         CASE  WHEN  a.COL_PSTN || a.COL_NM || a.DATA_TYPE_NM || a.DATA_TYPE_ID || a.DATA_TYPE_LEN || a.DATA_TYPE_PREC || a.DATA_TYPE_SCAL || a.NULL_YN || a.DFLT_VAL || a.COL_CMNT || a.DEL_YN
                               IS NULL THEN  '' ELSE  'M' END  END  END  chg_type,
                            CASE  WHEN a.col_pstn =  b.col_pstn THEN  a.col_pstn::varchar ELSE  a.col_pstn || ' > ' || b.col_pstn END  as col_pstn,
                            CASE  WHEN a.col_nm =  b.col_nm THEN  a.col_nm ELSE  a.col_nm || ' > ' || b.col_nm END  as col_nm,
                            CASE  WHEN a.data_type_nm =  b.data_type_nm THEN  a.data_type_nm ELSE  a.data_type_nm || ' > ' || b.data_type_nm END  as data_type_nm,
                            CASE  WHEN a.data_type_id =  b.data_type_id THEN  a.data_type_id ELSE  a.data_type_id || ' > ' || b.data_type_id END  as data_type_id,
                            CASE  WHEN a.data_type_len =  b.data_type_len THEN  a.data_type_len::varchar ELSE  a.data_type_len || ' > ' || b.data_type_len END  as data_type_len,
                            CASE  WHEN a.data_type_prec =  b.data_type_prec THEN  a.data_type_prec::varchar ELSE  a.data_type_prec || ' > ' || b.data_type_prec END  as data_type_prec,
                            CASE  WHEN a.data_type_scal =  b.data_type_scal THEN  a.data_type_scal::varchar ELSE  a.data_type_scal || ' > ' || b.data_type_scal END  as data_type_scal,
                            CASE  WHEN a.null_yn IS NULL THEN  a.null_yn ELSE  a.null_yn || ' > ' || b.null_yn END  as null_yn,
                            CASE  WHEN a.dflt_val =  b.dflt_val THEN  a.dflt_val::varchar ELSE  a.dflt_val || ' > ' || b.dflt_val END  as dflt_val,
                            CASE  WHEN a.col_cmnt =  b.col_cmnt THEN  a.col_cmnt ELSE  a.col_cmnt || ' > ' || b.col_cmnt END  as col_cmnt,
                            CASE  WHEN a.del_yn =  b.del_yn THEN  a.del_yn ELSE  a.del_yn || ' > ' || b.del_yn END  as del_yn,
                           a.col_pstn as ord1, b.col_pstn as ord2
              FROM ( SELECT b.*,
                         ( SELECT t1.*
                           FROM (SELECT 'Y') t1
                           WHERE EXISTS ( SELECT 1
                                  FROM md_col_comp y
                                  WHERE y.comp_obj_id IN ( SELECT COALESCE( x.const_id, '' )
                                         FROM md_const x
                                         WHERE x.obj_id = b.obj_id
                                           AND x.const_type = '0001'
                                           AND x.aval_st_dt <![CDATA[<]]> #{DATE1}
                                           AND x.aval_end_dt <![CDATA[>=]]> #{DATE1} )
                                    AND y.aval_st_dt <![CDATA[<]]> #{DATE1}
                                    AND y.aval_end_dt <![CDATA[>=]]> #{DATE1}
                                    AND y.obj_id = b.obj_id
                                    AND y.col_id = b.col_id )) pk,
                         ( SELECT t1.*
                           FROM (SELECT 'Y') t1
                           WHERE EXISTS ( SELECT 1
                                  FROM md_col_comp y
                                  WHERE y.comp_obj_id IN ( SELECT COALESCE( x.const_id, '' )
                                         FROM md_const x
                                         WHERE x.obj_id = b.obj_id
                                           AND x.const_type = '0004'
                                           AND x.aval_st_dt <![CDATA[<]]> #{DATE1}
                                           AND x.aval_end_dt <![CDATA[>=]]> #{DATE1} )
                                    AND y.aval_st_dt <![CDATA[<]]> #{DATE1}
                                    AND y.aval_end_dt <![CDATA[>=]]> #{DATE1}
                                    AND y.obj_id = b.obj_id
                                    AND y.col_id = b.col_id )) fk
                      FROM md_col b
                     WHERE b.obj_id = #{OBJ_ID}
                       AND aval_st_dt <![CDATA[<]]> #{DATE1}
                       AND aval_end_dt <![CDATA[>=]]> #{DATE1}) A full outer join
                   ( SELECT b.*,
                         ( SELECT t1.*
                           FROM (SELECT 'Y') t1
                           WHERE EXISTS ( SELECT 1
                                  FROM md_col_comp y
                                  WHERE y.comp_obj_id IN ( SELECT COALESCE( x.const_id, '' )
                                         FROM md_const x
                                         WHERE x.obj_id = b.obj_id
                                           AND x.const_type = '0001'
                                           AND x.aval_st_dt <![CDATA[<]]> #{DATE2}
                                           AND x.aval_end_dt <![CDATA[>=]]> #{DATE2} )
                                    AND y.aval_st_dt <![CDATA[<]]> #{DATE2}
                                    AND y.aval_end_dt <![CDATA[>=]]> #{DATE2}
                                    AND y.obj_id = b.obj_id
                                    AND y.col_id = b.col_id )) pk,
                         ( SELECT t1.*
                           FROM (SELECT 'Y') t1
                           WHERE EXISTS ( SELECT 1
                                  FROM md_col_comp y
                                  WHERE y.comp_obj_id IN ( SELECT COALESCE( x.const_id, '' )
                                         FROM md_const x
                                         WHERE x.obj_id = b.obj_id
                                           AND x.const_type = '0004'
                                           AND x.aval_st_dt <![CDATA[<]]> #{DATE2}
                                           AND x.aval_end_dt <![CDATA[>=]]> #{DATE2} )
                                    AND y.aval_st_dt <![CDATA[<]]> #{DATE2}
                                    AND y.aval_end_dt <![CDATA[>=]]> #{DATE2}
                                    AND y.obj_id = b.obj_id
                                    AND y.col_id = b.col_id )) fk
                       FROM md_col b
                      WHERE b.obj_id = #{OBJ_ID}
                        AND aval_st_dt <![CDATA[<]]> #{DATE2}
                        AND aval_end_dt <![CDATA[>=]]> #{DATE2} ) B
                   ON a.obj_id = b.obj_id
                  AND a.col_id = b.col_id
         ) t1
         WHERE chg_type IS NOT NULL
         ORDER BY case when chg_type = 'N' then ord2 
         			   when chg_type = 'D' then ord1 
         			   else ord2 end
	</select>

	<select id="getColumnInfo" parameterType="hashmap" resultType="encore.meta.mybatis.UpperKeyMap">
        select col_pstn,
               col_nm,
               data_type_nm
               data_type_id,
               data_type_len,
               data_type_prec,
               data_type_scal,
               null_yn,
               dflt_val,
               col_cmnt,
               del_yn
          FROM ( SELECT b.*,
                     ( SELECT t1.*
                           FROM (SELECT 'Y') t1
                       WHERE EXISTS ( SELECT 1
                              FROM md_col_comp y
                              WHERE y.comp_obj_id IN ( SELECT COALESCE( x.const_id, '' )
                                     FROM md_const x
                                     WHERE x.obj_id = b.obj_id
                                       AND x.const_type = '0001'
                                       AND x.aval_st_dt <![CDATA[<]]> #{DATE}
                                       AND x.aval_end_dt <![CDATA[>=]]> #{DATE} )
                                AND y.aval_st_dt <![CDATA[<]]> #{DATE}
                                AND y.aval_end_dt <![CDATA[>=]]> #{DATE}
                                AND y.obj_id = b.obj_id
                                AND y.col_id = b.col_id )) pk,
                     ( SELECT t1.*
                           FROM (SELECT 'Y') t1
                       WHERE EXISTS ( SELECT 1
                              FROM md_col_comp y
                              WHERE y.comp_obj_id IN ( SELECT COALESCE( x.const_id, '' )
                                     FROM md_const x
                                     WHERE x.obj_id = b.obj_id
                                       AND x.const_type = '0004'
                                       AND x.aval_st_dt <![CDATA[<]]> #{DATE}
                                       AND x.aval_end_dt <![CDATA[>=]]> #{DATE} )
                                AND y.aval_st_dt <![CDATA[<]]> #{DATE}
                                AND y.aval_end_dt <![CDATA[>=]]> #{DATE}
                                AND y.obj_id = b.obj_id
                                AND y.col_id = b.col_id )) fk
                  FROM md_col b
                 WHERE b.obj_id = #{OBJ_ID}
                   AND aval_st_dt <![CDATA[<]]> #{DATE}
                   AND aval_end_dt <![CDATA[>=]]> #{DATE}
         ) t1
         ORDER BY col_pstn
    </select>

	<select id="getIndexInfo" parameterType="hashmap" resultType="encore.meta.mybatis.UpperKeyMap">
        /* mng.getIndexInfo */
        SELECT seg_id
             , seg_nm
             ,(SELECT cd_nm
                 FROM ms_code
                WHERE cd_id = s.seg_stat
                  AND up_cd_id = '0027'
                  AND lang_cd = #{langCd}) seg_stat
             , 'INDEX' seg_type, clstr_idx_yn, lcl_idx_yn, pct_free, del_yn
             , ts_id, init_ext, next_ext, min_ext, max_ext, pct_incr, logng_yn, pct_used
          FROM md_seg s
         WHERE seg_type = '0001'
        <if test="@Ognl@isNotEmpty(DATE)">
           AND aval_st_dt &lt; #{DATE}
           AND aval_end_dt &gt;= #{DATE}
        </if>
           AND seg_id = #{OBJ_ID}
    </select>

	<select id="getCompareIndexColumnInfo" parameterType="hashmap" resultType="encore.meta.mybatis.UpperKeyMap">
        /* mng.getCompareIndexColumnInfo */
             select *
          from (
            SELECT  CASE  WHEN a.obj_Id  IS NULL THEN  'N' ELSE 
                      CASE  WHEN b.obj_id IS NULL THEN  'D' ELSE 
                         CASE  WHEN  a.col_nm || a.col_pstn || a.data_type_nm || a.data_type_len || a.null_yn || a.col_cmnt
                               IS NULL THEN  '' ELSE  'M' END  END  END  chg_type,
                            CASE  WHEN a.col_pstn =  b.col_pstn THEN  a.col_pstn::varchar ELSE  a.col_pstn || ' > ' || b.col_pstn END  as col_pstn,
                            CASE  WHEN a.col_nm =  b.col_nm THEN  a.col_nm ELSE  a.col_nm || ' > ' || b.col_nm END  as col_nm,
                            CASE  WHEN a.data_type_nm =  b.data_type_nm THEN  a.data_type_nm ELSE  a.data_type_nm || ' > ' || b.data_type_nm END  as data_type_nm,
                            CASE  WHEN a.data_type_len =  b.data_type_len THEN  a.data_type_len::varchar ELSE  a.data_type_len || ' > ' || b.data_type_len END  as data_type_len,
                            CASE  WHEN a.null_yn IS NULL THEN  a.null_yn ELSE  a.null_yn || ' > ' || b.null_yn END  as null_yn,
                            CASE  WHEN a.col_cmnt =  b.col_cmnt THEN  a.col_cmnt ELSE  a.col_cmnt || ' > ' || b.col_cmnt END  as col_cmnt,
                           a.col_pstn as ord1, b.col_pstn as ord2
              FROM ( SELECT mc.obj_id, mc.col_id, mc.col_nm, mcc.col_pstn, mc.data_type_nm, mc.data_type_len, mc.null_yn, mc.col_cmnt
                       FROM md_col_comp mcc, md_col mc
                      WHERE mcc.obj_id = mc.obj_id
                        AND mcc.col_id = mc.col_id
                        AND mcc.aval_st_dt <![CDATA[<]]> #{DATE1}
                        AND mcc.aval_end_dt <![CDATA[>=]]> #{DATE1}
                        AND mc.aval_st_dt <![CDATA[<]]> #{DATE1}
                        AND mc.aval_end_dt <![CDATA[>=]]> #{DATE1}
                        AND mcc.comp_obj_id = #{OBJ_ID}) A full outer join
                   ( SELECT mc.obj_id, mc.col_id, mc.col_nm, mcc.col_pstn, mc.data_type_nm,mc.data_type_len, mc.null_yn, mc.col_cmnt
                       FROM md_col_comp mcc, md_col mc
                      WHERE mcc.obj_id = mc.obj_id
                        AND mcc.col_id = mc.col_id
                        AND mcc.aval_st_dt <![CDATA[<]]> #{DATE2}
                        AND mcc.aval_end_dt <![CDATA[>=]]> #{DATE2}
                        AND mc.aval_st_dt <![CDATA[<]]> #{DATE2}
                        AND mc.aval_end_dt <![CDATA[>=]]> #{DATE2}
                        AND mcc.comp_obj_id = #{OBJ_ID} ) B
                   ON a.obj_id = b.obj_id
                  AND a.col_id = b.col_id
         ) t1
         WHERE chg_type IS NOT NULL
         ORDER BY case when chg_type = 'N' then ord2
         			   when chg_type = 'D' then ord1
         			   else ord2 end
    </select>

    <!-- 특정시점 인덱스 조회-->
	<select id="getIndexColumnInfo2" parameterType="hashmap" resultType="encore.meta.mybatis.UpperKeyMap">
        /* mng.getIndexColumnInfo */
        SELECT col_pstn,
               col_nm,
               data_type_nm,
               data_type_len,
               null_yn,
               col_cmnt
          FROM ( SELECT mc.obj_id, mc.col_id, mc.col_nm, mcc.col_pstn, mc.data_type_nm, mc.data_type_len, mc.null_yn, mc.col_cmnt
                   FROM md_col_comp mcc, md_col mc
                  WHERE mcc.obj_id = mc.obj_id
                    AND mcc.col_id = mc.col_id
                    AND mcc.aval_st_dt <![CDATA[<]]> #{DATE}
                    AND mcc.aval_end_dt <![CDATA[>=]]> #{DATE}
                    AND mc.aval_st_dt <![CDATA[<]]> #{DATE}
                    AND mc.aval_end_dt <![CDATA[>=]]> #{DATE}
                    AND mcc.comp_obj_id = #{OBJ_ID}
         ) t1
         ORDER BY col_pstn
    </select>

    <!-- 특점시점 승인모델 테이블 현황 -->
	<select id="getAprvModelTableList" parameterType="hashmap" resultType="encore.meta.mybatis.UpperKeyMap">
        SELECT r.mdl_aprv_req_id, r.chg_dt, ent_tab_id
               , ent_tab_name, tabname, altnentname, synonyminfo, partgubun, part_type
               , CASE TRIM(TO_CHAR(BITAND(mdl_stdoption, TO_NUMBER('F00','XXX')),'XXX'))
                         WHEN '0' THEN '0'
                         WHEN '100' THEN '1'
                         WHEN '200' THEN '2' END AS mdl_stdoption
               , ent_stdoption, init_yn , export_yn, tab_gbn, store_period
               , del_period, aply_hope_dt, req_rsn
               , PKG_STD.FN_SORT_COMP_IDS( dbowner_info, ';' ) dbowner_info
               , PKG_STD.FN_SORT_COMP_IDS( dbacct_info, ';' ) dbacct_info
         FROM md_mdl_aprv_req r, md_mdl_aprv_req_enttab t
        WHERE r.log_a_uid = #{A_UID}
          AND r.mdl_aprv_stat_Cd = '0004'
          AND r.mdl_aprv_req_id = t.mdl_aprv_req_id
          AND t.ent_Tab_Type = '0007'
          AND r.chg_dt = (SELECT max( chg_dt )
                            FROM md_mdl_aprv_req
                           WHERE mdl_aprv_stat_Cd = '0004'
                             AND log_a_uid = #{A_UID}
                             AND log_reg_dt <![CDATA[<=]]> #{DATE}
                          )
    </select>

	<select id="getAprvModelTableListDa5" parameterType="hashmap" resultType="encore.meta.mybatis.UpperKeyMap">
        /*mng.getAprvModelTableListDa5*/
        SELECT r.mdl_aprv_req_id, r.chg_dt, t.ent_id ent_tab_id
               , t.prop2 ent_tab_name, t.prop1 tabname
               , t.prop14 mdl_stdoption
               , t.prop15 ent_stdoption
         FROM md_mdl_aprv_req r, md_gap_obj_property t
        WHERE r.log_a_uid = #{A_UID}
          AND r.mdl_aprv_stat_Cd = '0004'
          AND r.mdl_aprv_req_id = t.mdl_aprv_req_id
          AND t.clss_id = '2'
          AND r.chg_dt = (SELECT max( chg_dt )
                            FROM md_mdl_aprv_req
                           WHERE mdl_aprv_stat_Cd = '0004'
                             AND log_a_uid = #{A_UID}
                             AND log_reg_dt <![CDATA[<=]]> #{DATE}
                          )
    </select>

    <!-- 특점시점 승인모델 컬럼 현황 -->
	<select id="getAprvModelColumnList" parameterType="hashmap" resultType="encore.meta.mybatis.UpperKeyMap">
  	SELECT r.mdl_aprv_req_id, r.chg_dt, ent_tab_id, ent_tab_name, tabname, attr_col_id,
               ref_attr_nm, attr_col_name, CASE WHEN  bprimary='1' THEN  'Y'  ELSE '' END
               AS bprimary, CASE WHEN  bnull=0 THEN  'N'  ELSE '' END  AS bnull, seq, coltype,
               collen
          FROM md_mdl_aprv_req r, md_mdl_aprv_req_enttab t, md_mdl_aprv_req_atrcol c
         WHERE r.log_a_uid = :A_UID/*#{A_UID}*/

           AND r.mdl_aprv_stat_cd = '0004'
           AND r.mdl_aprv_req_id = t.mdl_aprv_req_id
           AND t.mdl_aprv_req_id = c.mdl_aprv_req_id
           AND t.ent_tab_id = #{ENT_TAB_ID}
           AND t.ent_tab_type = '0007'
           AND c.attr_col_type = '0008'
           AND t.ent_tab_id = c.ref_ent_tab_id
           AND mastentid = 'ROOT'
           AND r.chg_dt = ( SELECT max( chg_dt )
                FROM md_mdl_aprv_req
                WHERE mdl_aprv_stat_Cd = '0004'
                  AND log_a_uid = #{A_UID}
                  AND log_reg_dt <![CDATA[<=]]> #{DATE} )
         ORDER BY seq
    </select>

    <!-- 특점시점 수집 현황 -->
	<select id="getCollectList" parameterType="hashmap" resultType="encore.meta.mybatis.UpperKeyMap">
        /* mng.getCollectList */
        <include refid="pagingHeader"/>
        SELECT A.* , COUNT(1) OVER() total_row_count
          FROM (
            <!-- table -->
            <if test="OBJ_TYPE == '' || OBJ_TYPE == '0002'">
            SELECT '0002' obj_type, seg_id AS obj_id, seg_nm AS obj_nm, '' tab_nm, '' stat
              FROM md_seg
             WHERE seg_type = '0002'
               AND aval_st_dt <![CDATA[<]]> #{DATE}
               AND aval_end_dt <![CDATA[>=]]> #{DATE}
               AND svr_id = #{SVR_ID}
               AND inst_id = #{INST_ID}
               AND db_id = #{DB_ID}
               AND acct_id = #{ACCT_ID}
            </if>
            <if test="@Ognl@isEmpty(OBJ_TYPE)">
            UNION ALL
            </if>
            <if test="OBJ_TYPE == '' ||OBJ_TYPE == '0001'">
            <!-- index -->
            SELECT '0001' AS obj_type
                 , seg_id AS obj_id
                 , seg_nm AS obj_nm
                 ,(SELECT obj_nm FROM md_obj WHERE obj_id = o.bas_tab_id) AS tab_nm
                 , '' stat
              FROM md_obj o, md_seg a
             WHERE o.obj_id = a.seg_id
               AND a.seg_type = '0001'
               AND a.aval_st_dt <![CDATA[<]]> #{DATE}
               AND a.aval_end_dt <![CDATA[>=]]> #{DATE}
               AND a.svr_id = #{SVR_ID}
               AND a.inst_id = #{INST_ID}
               AND a.db_id = #{DB_ID}
               AND a.acct_id = #{ACCT_ID}
            </if>
            <if test="@Ognl@isEmpty(OBJ_TYPE)">
            UNION ALL
            </if>
            <if test="OBJ_TYPE == '' ||OBJ_TYPE == '0004'">
            <!-- view -->
            SELECT '0004' obj_type
                 , view_id AS obj_id
                 , view_nm AS obj_nm
                 , '' tab_nm
                 , view_stat AS stat
              FROM md_view
             WHERE aval_st_dt <![CDATA[<]]> #{DATE}
               AND aval_end_dt <![CDATA[>=]]> #{DATE}
               AND svr_id = #{SVR_ID}
               AND inst_id = #{INST_ID}
               AND db_id = #{DB_ID}
               AND acct_id = #{ACCT_ID}
            </if>
            <if test="@Ognl@isEmpty(OBJ_TYPE)">
            UNION ALL
            </if>
            <if test="OBJ_TYPE == '' ||OBJ_TYPE == '0020'">
            <!-- sequence -->
            SELECT '0020' obj_type
                 , seq_id AS obj_id
                 , seq_nm AS obj_nm
                 , '' tab_nm
                 , seq_stat stat
              FROM md_seq
             where aval_st_dt <![CDATA[<]]> #{DATE}
               AND aval_end_dt <![CDATA[>=]]> #{DATE}
               AND svr_id = #{SVR_ID}
               AND inst_id = #{INST_ID}
               AND db_id = #{DB_ID}
               AND acct_id = #{ACCT_ID}
           </if>
           <if test="@Ognl@isEmpty(OBJ_TYPE)">
            UNION ALL
           </if>
           <if test="OBJ_TYPE == '' ||OBJ_TYPE == '0005'">
           <!-- procedure -->
            SELECT obj_type AS obj_type
                 , obj_id
                 , DECODE( obj_type, '0007', obj_nm || '.' || mmbr_obj_nm, obj_nm ) obj_nm
                 , '' tab_nm
                 , obj_stat AS stat
              FROM md_proc
             WHERE svr_id = #{SVR_ID}
               AND inst_id = #{INST_ID}
               AND db_id = #{DB_ID}
               AND acct_id = #{ACCT_ID}
               AND aval_st_dt <![CDATA[<]]> #{DATE}
               AND aval_end_dt <![CDATA[>=]]> #{DATE}
           </if>
           <if test="@Ognl@isEmpty(OBJ_TYPE)">
            UNION ALL
           </if>
           <if test="OBJ_TYPE == '' ||OBJ_TYPE == '0009'">
           <!-- trigger -->
            SELECT '0009' AS obj_type
                 , trg_id AS obj_id
                 , trg_nm AS obj_nm
                 , '' tab_nm
                 , trg_stat stat
              FROM md_trg
             WHERE svr_id = #{SVR_ID}
               AND inst_id = #{INST_ID}
               AND db_id = #{DB_ID}
               AND acct_id = #{ACCT_ID}
               AND aval_st_dt <![CDATA[<]]> #{DATE}
               AND aval_end_dt <![CDATA[>=]]> #{DATE}
           </if>
           <if test="@Ognl@isEmpty(OBJ_TYPE)">
            UNION ALL
           </if>
           <if test="OBJ_TYPE == '' ||OBJ_TYPE == '0021'">
           <!-- database link -->
           SELECT '0021' AS obj_type
                 , link_id AS obj_id
                 , link_nm AS obj_nm
                 , '' tab_nm
                 , '' stat
             FROM md_link
            WHERE svr_id = #{SVR_ID}
              AND inst_id = #{INST_ID}
              AND db_id = #{DB_ID}
              AND acct_id = #{ACCT_ID}
              AND aval_st_dt <![CDATA[<]]> #{DATE}
              AND aval_end_dt <![CDATA[>=]]> #{DATE}
           </if>
           <if test="@Ognl@isEmpty(OBJ_TYPE)">
            UNION ALL
           </if>
           <if test="OBJ_TYPE == '' ||OBJ_TYPE == '0014'">
           <!-- mview -->
            SELECT '0014' AS obj_type
                 , mview_id AS obj_id
                 , mview_nm AS obj_nm
                 , '' tab_nm
                 , mview_stat stat
             FROM md_mview
            WHERE svr_id = #{SVR_ID}
              AND inst_id = #{INST_ID}
              AND db_id = #{DB_ID}
              AND acct_id = #{ACCT_ID}
              AND aval_st_dt <![CDATA[<]]> #{DATE}
              AND aval_end_dt <![CDATA[>=]]> #{DATE}
            </if>
           <if test="@Ognl@isEmpty(OBJ_TYPE)">
            UNION ALL
           </if>
           <if test="OBJ_TYPE == '' ||OBJ_TYPE == '0023'">
            <!-- synonym -->
            SELECT '0023' AS obj_type
                 , synm_id AS obj_id
                 , synm_nm AS obj_nm
                 , '' tab_nm
                 , synm_stat stat
              FROM md_synm a LEFT OUTER JOIN md_obj b ON a.ref_obj_id = b.obj_id
             WHERE a.aval_st_dt <![CDATA[<]]> #{DATE}
               AND a.aval_end_dt <![CDATA[>=]]> #{DATE}
               AND a.svr_id = #{SVR_ID}
               AND a.inst_id = #{INST_ID}
               AND a.db_id = #{DB_ID}
               AND a.acct_id = #{ACCT_ID}
               AND b.obj_type IN ( '0002', '0004', '0005', '0006', '0007', '0014' )
         </if>
         ) A
        <if test="@Ognl@isNotEmpty(sortParams)">
         <foreach item="item" collection="sortParams" open="ORDER BY" separator=",">
            ${item.property} ${item.direction}
         </foreach>
        </if>
        <include refid="pagingFooter"/>
    </select>

    <!-- 모델 승인시간 리스트 -->
	<select id="getAprvModelDateList" parameterType="hashmap" resultType="encore.meta.mybatis.UpperKeyMap">
        /* mng.getAprvModelDateList */
        SELECT mdl.log_a_uid, mdl.log_reg_dt, mdl.mdl_req_dt, mdl.apr_dt, ver.mno, ver.version
              ,ver.createdate, ver.creator, TO_CHAR( ver.createbasedate, 'YYYYMMDDHH24MISS' ) AS createbasedate
              ,ver.description
          FROM (
            SELECT aprv.log_a_uid
                   , aprv.log_reg_dt, aprv.mdl_req_dt, r.apr_dt
                   , nvl(to_char(to_date(lead(aprv.log_reg_dt) over (partition by aprv.log_a_uid order by aprv.log_reg_dt),'yyyymmddhh24miss')-1/(24*60*60),'yyyymmddhh24miss'),to_char(sysdate,'yyyymmddhh24miss')) next_log_reg_dt
              FROM md_mdl_aprv_req aprv, req_doc_info r
             WHERE aprv.mdl_aprv_stat_cd = '0004'
               AND aprv.log_a_uid = #{A_UID}
               AND aprv.req_doc_id = r.req_doc_id) mdl
              LEFT OUTER JOIN da_modelversion ver
                ON ( mdl.log_a_uid = ver.a_uid
                     AND to_char( ver.createbasedate(+), 'YYYYMMDDHH24MISS' ) BETWEEN mdl.log_reg_dt AND mdl.next_log_reg_dt)
         ORDER BY mdl.log_reg_dt DESC
    </select>

    <select id="getSubjectAreaAuth" parameterType="hashmap" resultType="string">
        /* mng.getSubjectAreaAuth */
        SELECT NVL(SUBSTR(MIN(prv_gbn),INSTR(MIN(prv_gbn),'_')+1),'') AS prv_gbn
          FROM (
              SELECT LEVEL, foldername, DECODE( a.prv_gbn, null, null, level || '_' || a.prv_gbn ) prv_gbn
                FROM da_modelstru m, v_usr_alloc a
               WHERE a.alloc_gbn_cd = '0004'
                 AND a.user_id = #{requestUserId}
                 AND a.end_dt = '99991231'
                 AND a.alloc_id(+) = m.a_uid
                 AND m.expireddate = '99999999999999'
               START WITH m.a_uid = #{A_UID}
                 AND m.expireddate = '99999999999999'
               CONNECT BY m.a_uid = PRIOR m.p_uid )
    </select>

    <insert id="createVersion" parameterType="hashmap">
        /* mng.createVersion */
        INSERT INTO da_modelversion
           (a_uid, mno, version, createdate, creator, createbasedate, arrange, description, modeltype)
        VALUES
           (#{A_UID}, RAWTOHEX(SYS_GUID()), #{VERSION}, TO_CHAR(SYSDATE, 'YYYYMMDDHH24MISS')
           , (SELECT login_id FROM usr_user WHERE user_id = #{requestUserId})
           , TO_DATE(#{CREATEBASEDATE},'YYYYMMDDHH24MISS'), 0, #{DESCRIPTION, jdbcType=VARCHAR}, 2)
    </insert>

    <update id="updateVersion" parameterType="hashmap">
        /* mng.updateVersion */
        UPDATE da_modelversion
           SET version =  #{VERSION}
             , description = #{DESCRIPTION, jdbcType=VARCHAR}
         WHERE a_uid = #{A_UID}
           AND mno = #{MNO}
    </update>

    <delete id="deleteVersion" parameterType="hashmap">
        /* mng.deleteVersion */
        DELETE da_modelversion
        WHERE a_uid = #{A_UID}
          AND mno = #{MNO}
    </delete>

	<select id="getVersionList" parameterType="hashmap" resultType="encore.meta.mybatis.UpperKeyMap">
        /* mng.getVersionList */
        SELECT version, TO_CHAR(createbasedate,'YYYYMMDDHH24MISS') AS createbasedate
          FROM da_modelversion
         WHERE a_uid = #{A_UID}
         ORDER BY createbasedate DESC
    </select>

    <!-- 해당 user의 코드반영권한유무 -->
    <select id="getUserAlloc" parameterType="hashmap" resultType="int">
        SELECT COUNT(*) cnt
          FROM v_usr_alloc
         WHERE 1 = 1
         <if test="@Ognl@isNotEmpty(userId)">
           AND user_id = #{userId}
         </if>
         <if test="@Ognl@isEmpty(userId)">
           AND user_id = #{requestUserId}
         </if>
           AND alloc_id = #{allocId}
           AND end_dt = '99991231'
           AND alloc_gbn_cd = '0003'
    </select>

    <!-- 컨피그 옵션 가져오기 -->
	<select id="getConfigClass" parameterType="hashmap" resultType="encore.meta.mybatis.UpperKeyMap">
         /* mng.getConfigClass */
        SELECT CFG.cfg_cls_id, MIN(CFG.cfg_cls_nm) CFG_CLS_NM
             , MIN(CFG.cfg_cls_typ) CFG_CLS_TYP
             , MIN(CFG.cfg_cls_use_gbn) CFG_CLS_USE_GBN
             , MIN(CFG.order_no) ORDER_NO
             , MIN(CFG.up_cfg_cls_id) UP_CFG_CLS_ID
             , MIN(CFG.cfg_cls_desc) CFG_CLS_DESC
             , LISTAGG(LST.lst_val, ',') WITHIN GROUP (ORDER BY LST.lst_id) LST_VAL
             , LISTAGG(LST.disp_yn, ',') WITHIN GROUP (ORDER BY LST.lst_id) DISP_YN
             , LISTAGG(LST.lst_val_desc, ',') WITHIN GROUP (ORDER BY LST.lst_id) LST_VAL_DESC
          FROM ms_cfg_cls CFG
             , ms_cfg_lst_val LST
         WHERE CFG.cfg_cls_use_gbn = #{CFG_CLS_USE_GBN}
           AND CFG.met_obj_typ = #{MET_OBJ_TYP}
           AND CFG.use_yn = 'Y'
           AND CFG.cfg_cls_id = LST.cfg_cls_id(+)
         GROUP BY CFG.cfg_cls_id
         ORDER BY order_no
    </select>

	<select id="getStdConfigData" parameterType="hashmap" resultType="encore.meta.mybatis.UpperKeyMap">
        /* mng.getStdConfigData */
        SELECT met_obj_id, std_area_id, cfg_cls_id, met_obj_typ, cfg_cls_nm, cfg_val
          FROM ms_std_config
         WHERE met_obj_typ = #{MET_OBJ_TYP}
           AND std_area_id = #{STD_AREA_ID}
         <if test="MET_OBJ_TYP == 'STD_AREA'">
           AND met_obj_id = 'ROOT'
         </if>
         <if test="MET_OBJ_TYP == 'DOM_GRP'">
            AND met_obj_id = #{DOM_GRP_ID}
         </if>
         <if test="MET_OBJ_TYP == 'CD_AREA'">
            AND met_obj_id = #{CD_AREA_ID}
         </if>
    </select>

	<select id="getDbConfigData" parameterType="hashmap" resultType="encore.meta.mybatis.UpperKeyMap">
        /* mng.getDbConfigData */
        SELECT cfg_cls_id, svr_id, inst_id,<!-- db_id, acct_id,--> met_obj_typ, cfg_cls_nm, cfg_val
          FROM ms_db_config
         WHERE met_obj_typ = #{MET_OBJ_TYP}
           AND svr_id = #{SVR_ID}
           AND inst_id = #{INST_ID}
           <!--AND db_id = #{DB_ID}
           AND acct_Id = #{ACCT_ID}-->
    </select>

	<select id="getMdlConfigData" parameterType="hashmap" resultType="encore.meta.mybatis.UpperKeyMap">
        /* mng.getMdlConfigData */
        <if test="repositoryVer == 'da4'">
        SELECT area_id, cfg_cls_id, met_obj_typ, cfg_cls_nm, cfg_val
          FROM ms_mdl_config
         WHERE met_obj_typ = #{MET_OBJ_TYP}
           AND area_id = #{AREA_ID}
        </if>
        <if test="repositoryVer == 'da5'">
        SELECT area_id, cfg_cls_id, met_obj_typ, cfg_cls_nm, cfg_val
          FROM ms_mdl_config
         WHERE met_obj_typ = #{MET_OBJ_TYP}
           AND area_id = #{AREA_ID}
        </if>
    </select>

    <delete id="deleteStdConfigData" parameterType="hashmap">
        /* mng.deleteStdConfigData */
        DELETE FROM ms_std_config
         WHERE met_obj_typ = #{MET_OBJ_TYP}
           AND std_area_id = #{STD_AREA_ID}
           AND met_obj_id = #{MET_OBJ_ID}
    </delete>

    <insert id="insertStdConfigData" parameterType="hashmap">
        /* mng.insertStdConfigData */
        INSERT INTO ms_std_config(met_obj_id, std_area_id, cfg_cls_id, met_obj_typ, cfg_cls_nm, cfg_val)
        VALUES (#{MET_OBJ_ID}, #{STD_AREA_ID}, #{CFG_CLS_ID}, #{MET_OBJ_TYP}, #{CFG_CLS_NM}, #{CFG_VAL, jdbcType=VARCHAR})
    </insert>

    <delete id="deleteDbConfigData" parameterType="hashmap">
        /* mng.deleteDbConfigData */
        DELETE FROM ms_db_config
         WHERE met_obj_typ = #{MET_OBJ_TYP}
           AND svr_id = #{SVR_ID}
           AND inst_Id = #{INST_ID}
           <!--AND db_id = #{DB_ID}
           AND acct_Id = #{ACCT_ID}-->
    </delete>

    <insert id="insertDbConfigData" parameterType="hashmap">
        /* mng.insertDbConfigData */
        INSERT INTO ms_db_config (cfg_cls_id, svr_id, inst_id, <!--db_id, acct_id,--> met_obj_typ, cfg_cls_nm, cfg_val)
        VALUES (#{CFG_CLS_ID}, #{SVR_ID}, #{INST_ID}, <!--#{DB_ID}, #{ACCT_ID},--> #{MET_OBJ_TYP}, #{CFG_CLS_NM}, #{CFG_VAL})
    </insert>

    <delete id="deleteMdlConfigData" parameterType="hashmap">
        /* mng.deleteMdlConfigData */
        DELETE FROM ms_mdl_config
         WHERE met_obj_typ = #{MET_OBJ_TYP}
           AND area_id = #{AREA_ID}
    </delete>

    <insert id="insertMdlConfigData" parameterType="hashmap">
        /* mng.insertMdlConfigData */
        INSERT INTO ms_mdl_config (area_id, cfg_cls_id, met_obj_typ, cfg_cls_nm, cfg_val)
        VALUES (#{AREA_ID}, #{CFG_CLS_ID}, #{MET_OBJ_TYP}, #{CFG_CLS_NM}, #{CFG_VAL})
    </insert>

    <!--MCS관리-->
	<select id="getMCSCollectSql" parameterType="hashmap" resultType="encore.meta.mybatis.UpperKeyMap" >
        /* getMCSCollectSql */
        SELECT dbms_type_cd
             , version
             , exe_gbn_cd
             , trgt_seq
             , use_yn
             , trgt_table_name
             , select_sql
             , insert_sql
             , er_mdl_cllct_yn
             , dbms_cllct_yn
             , strg_cllct_yn
             , prmt_cllct_yn
          FROM mcs_cllct_sql
         WHERE 1 = 1
         <if test="@Ognl@isNotEmpty(DBMS_TYPE_CD)">
           AND dbms_type_cd = #{DBMS_TYPE_CD}
         </if>
         <if test="@Ognl@isNotEmpty(VERSION)">
           AND version = #{VERSION}
         </if>
         <if test="@Ognl@isNotEmpty(EXE_GBN_CD)">
           AND exe_gbn_cd = #{EXE_GBN_CD}
         </if>
         <if test="@Ognl@isNotEmpty(USE_YN)">
           AND use_yn = #{USE_YN}
         </if>
         <if test="@Ognl@isNotEmpty(TRGT_TABLE_NAME)">
           AND trgt_table_name LIKE #{TRGT_TABLE_NAME}
         </if>
         <if test="@Ognl@isNotEmpty(JOB_GBN_ARRAY)">
           AND (
            <foreach item="item" collection="JOB_GBN_ARRAY" separator="OR">
                ${item.JOB_TYPE} = #{item.VALUE}
            </foreach>
            )
         </if>
         ORDER BY dbms_type_cd, version, trgt_seq
    </select>

    <insert id="insertMCSResource" parameterType="hashmap">
        /* mng.insertMCSResource */
        INSERT INTO mcs_cllct_sql
            (dbms_type_cd, version, exe_gbn_cd, trgt_seq, use_yn, trgt_table_name,
             select_sql, insert_sql,
             er_mdl_cllct_yn, dbms_cllct_yn, strg_cllct_yn, prmt_cllct_yn)
        VALUES
            (#{DBMS_TYPE_CD}, #{VERSION}, #{EXE_GBN_CD}, #{TRGT_SEQ}, #{USE_YN}, #{TRGT_TABLE_NAME},
             #{SELECT_SQL}, #{INSERT_SQL},
             #{ER_MDL_CLLCT_YN, jdbcType=VARCHAR}, #{DBMS_CLLCT_YN, jdbcType=VARCHAR}, #{STRG_CLLCT_YN, jdbcType=VARCHAR}, #{PRMT_CLLCT_YN, jdbcType=VARCHAR})
    </insert>

    <delete id="deleteMCSResourceAll" parameterType="hashmap">
        /* mng.deleteMCSResourceAll */
        TRUNCATE TABLE mcs_cllct_sql
    </delete>

    <delete id="deleteMCSResource" parameterType="hashmap">
        /* mng.deleteMCSResource */
        DELETE FROM mcs_cllct_sql
        WHERE (dbms_type_cd||'.'||version||'.'||exe_gbn_cd||'.'||trgt_seq) IN
        <foreach item="item" collection="DELETE_RECORDS" open="(" separator="," close=")">
           #{item}
        </foreach>
    </delete>

    <update id="updateMCSResource" parameterType="hashmap">
        /* mng.updateMCSResource */
        UPDATE mcs_cllct_sql
           SET exe_gbn_cd = #{EXE_GBN_CD}
             , trgt_seq = #{TRGT_SEQ}
             , use_yn = #{USE_YN}
             , er_mdl_cllct_yn = #{ER_MDL_CLLCT_YN, jdbcType=VARCHAR}
             , dbms_cllct_yn = #{DBMS_CLLCT_YN, jdbcType=VARCHAR}
             , strg_cllct_yn = #{STRG_CLLCT_YN, jdbcType=VARCHAR}
             , prmt_cllct_yn = #{PRMT_CLLCT_YN, jdbcType=VARCHAR}
             , select_sql = #{SELECT_SQL, jdbcType=VARCHAR}
             , insert_sql = #{INSERT_SQL, jdbcType=VARCHAR}
         WHERE dbms_type_cd = #{DBMS_TYPE_CD}
           AND version = #{VERSION}
           AND exe_gbn_cd = #{EXE_GBN_CD}
           AND trgt_table_name = #{TRGT_TABLE_NAME}
    </update>

	<select id="getAprStatusInfo" parameterType="hashmap" resultType="encore.meta.mybatis.UpperKeyMap">
        /* mng.getAprStatusInfo */
		select
			rslt.sign_seq ,
			case
				when rslt.signer_gbn = 'U' then u.user_nm
				when rslt.signer_gbn = 'G' then d.dept_nm
				when rslt.signer_gbn = 'R' then r.role_nm
			end || ':' || rslt.sign_seq as user_nm
		from
			msg_sign_rslt rslt
		left outer join usr_user u on
			u.user_id = rslt.signer_id
		left outer join usr_dept d on
			d.dept_id = rslt.signer_id
		left outer join usr_role r on
			r.role_id = rslt.signer_id
		where
			rslt.req_doc_id = #{REQ_DOC_ID}
			and rslt.sign_step_gbn_cd != '0001'
			and rslt.aval_end_dt = '99991231235959'
		order by
			rslt.sign_seq
    </select>

	<select id="getAprStatusInfoDetail" parameterType="hashmap" resultType="encore.meta.mybatis.UpperKeyMap">
      /* mng.getAprStatusInfoDetail */
      <include refid="pagingHeader"/>
        WITH SIGN_DTL AS(
            SELECT sign_seq
                 , req_doc_id
                 , tgt_item_id
                 , sign_prc_gbn_cd
                 , sign_cmmt
              FROM msg_sign_rslt_dtl
             WHERE req_doc_id = #{REQ_DOC_ID}
             ORDER BY sign_seq, tgt_item_id
        )
        , SIGN_INFO AS (
            SELECT dtl.sign_seq
                 , dtl.req_doc_id
                 , dtl.tgt_item_id
                 , dtl.sign_prc_gbn_cd
                 , dtl.sign_cmmt
                 , req.cntnts_nm req_nm
              FROM SIGN_DTL dtl
             INNER JOIN std_req_contents req
                ON req.std_req_id = dtl.req_doc_id
               AND req.tgt_item_id = dtl.tgt_item_id
            UNION ALL
            SELECT dtl.sign_seq
                 , dtl.req_doc_id
                 , dtl.tgt_item_id
                 , dtl.sign_prc_gbn_cd
                 , dtl.sign_cmmt
                 , req.table_nm req_nm
              FROM SIGN_DTL dtl
             INNER JOIN md_mdl_chg_req_tbl req
                ON req.req_doc_id = dtl.req_doc_id
               AND req.tgt_item_id = dtl.tgt_item_id
           <if test='repositoryVer =="da5"'>
              <!-- 모델권한 신청 -->
            UNION ALL
            SELECT dtl.sign_seq
                 , dtl.req_doc_id
                 , dtl.tgt_item_id
                 , dtl.sign_prc_gbn_cd
                 , dtl.sign_cmmt
                 , req.cntnts_nm req_nm
              FROM SIGN_DTL dtl
             INNER JOIN mdl_auth_req_contents req
                ON req.req_doc_id = dtl.req_doc_id
               AND req.tgt_item_id = dtl.tgt_item_id
           </if>
            UNION ALL
            SELECT dtl.sign_seq
                 , dtl.req_doc_id
                 , dtl.tgt_item_id
                 , dtl.sign_prc_gbn_cd
                 , dtl.sign_cmmt
                 , req.req_nm req_nm
              FROM SIGN_DTL dtl
             INNER JOIN mdq_br_req req
                ON req.req_doc_id = dtl.req_doc_id
               AND req.tgt_item_id = dtl.tgt_item_id
            UNION ALL
            SELECT dtl.sign_seq
                 , dtl.req_doc_id
                 , dtl.tgt_item_id
                 , dtl.sign_prc_gbn_cd
                 , dtl.sign_cmmt
                 , req.job_nm req_nm
              FROM SIGN_DTL dtl
             INNER JOIN mdb_job_req req
                ON req.req_doc_id = dtl.req_doc_id
               AND req.job_req_id = dtl.tgt_item_id
            UNION ALL
            SELECT dtl.sign_seq
                 , dtl.req_doc_id
                 , dtl.tgt_item_id
                 , dtl.sign_prc_gbn_cd
                 , dtl.sign_cmmt
                 , req.obj_nm req_nm
              FROM SIGN_DTL dtl
             INNER JOIN md_udp_req_contents req
                ON req.req_doc_id = dtl.req_doc_id
               AND req.tgt_item_id = dtl.tgt_item_id
            UNION ALL
            SELECT dtl.sign_seq
                 , dtl.req_doc_id
                 , dtl.tgt_item_id
                 , dtl.sign_prc_gbn_cd
                 , dtl.sign_cmmt
                 , (SELECT cd_nm
                      FROM std_code c
                     WHERE c.std_area_id = req.std_area_id
                       AND c.cd_area_id = req.cd_area_id
                       AND c.cd_id = req.cd_id
                       AND req.cd_apr_dt = CASE WHEN req.req_gbn_cd = '0003' THEN c.aval_end_dt ELSE c.aval_st_dt END) req_nm
              FROM SIGN_DTL dtl
             INNER JOIN std_code_dist_req req
                ON req.req_doc_id = dtl.req_doc_id
               AND req.tgt_item_id = dtl.tgt_item_id
             )
        SELECT *
          FROM ( SELECT tgt_item_id
                      , req_nm
                <foreach collection="STATUS_INFO" item="item">
                      , MAX(DECODE( sign_seq, ${item.SIGN_SEQ}, sign_prc_gbn_cd, '')) AS "${item.USER_NM}"
                      , MAX(DECODE( sign_seq, ${item.SIGN_SEQ}, sign_cmmt, '')) as cmmt${item.SIGN_SEQ}
                </foreach>
                <choose>
                    <when test="_databaseId eq 'oracle10'">
                      , SUBSTR (XMLAGG (XMLELEMENT (sign_prc_gbn_cd, ',', sign_prc_gbn_cd) ORDER BY sign_prc_gbn_cd).EXTRACT ('//text()'), 2) status_info
                    </when>
                    <otherwise>
                      , LISTAGG(sign_prc_gbn_cd, ', ') WITHIN GROUP (ORDER BY sign_prc_gbn_cd) status_info
                    </otherwise>
                </choose>
                      , COUNT(1) OVER() total_row_count
                   FROM SIGN_INFO
                  GROUP BY(tgt_item_id,req_nm)
                  ORDER BY tgt_item_id, req_nm )
         WHERE 1=1
         <if test="@Ognl@isNotEmpty(SEARCH_REJECT) and SEARCH_REJECT == 'true'">
           AND status_info LIKE '%0003'
         </if>
         <if test="@Ognl@isNotEmpty(SEARCH_WORD)">
           AND req_nm like #{SEARCH_WORD}
         </if>
         <include refid="pagingFooter"/>
    </select>

	<select id="getDDLScriptResourceList" parameterType="hashmap" resultType="encore.meta.mybatis.UpperKeyMap">
        /* mng.getDDLScriptResourceList */
        SELECT dbms_type_cd
             , ddl_type_cd
             , obj_type_cd
             , prttp_ddl
             , COUNT(1) OVER() total_row_count
          FROM mdb_prttp_ddl_inf
         WHERE 1=1
         <if test="@Ognl@isNotEmpty(DBMS_TYPE_CD)">
           AND dbms_type_cd = #{DBMS_TYPE_CD}
         </if>
         <if test="@Ognl@isNotEmpty(DDL_TYPE_CD)">
           AND ddl_type_cd = #{DDL_TYPE_CD}
         </if>
         <if test="@Ognl@isNotEmpty(OBJ_TYPE_CD)">
           AND obj_type_cd = #{OBJ_TYPE_CD}
         </if>
         <if test="@Ognl@isNotEmpty(SEARCH_WORD)">
           AND prttp_ddl like #{SEARCH_WORD}
         </if>
         ORDER BY dbms_type_cd asc, ddl_type_cd desc, obj_type_cd asc
    </select>

    <insert id="insertMdbPrttpDdlInf" parameterType="hashmap">
        /* mng.insertMdbPrttpDdlInf */
        INSERT INTO mdb_prttp_ddl_inf
            (dbms_type_cd, ddl_type_cd, obj_type_cd, prttp_ddl)
        VALUES
            (#{DBMS_TYPE_CD}, #{DDL_TYPE_CD}, #{OBJ_TYPE_CD}, #{PRTTP_DDL, jdbcType=VARCHAR})
    </insert>

    <update id="updateMdbPrttpDdlInf" parameterType="hashmap">
        /* mng.updateMdbPrttpDdlInf */
        UPDATE mdb_prttp_ddl_inf
           SET prttp_ddl = #{PRTTP_DDL}
         WHERE dbms_type_cd = #{DBMS_TYPE_CD}
           AND ddl_type_cd = #{DDL_TYPE_CD}
           AND obj_type_cd = #{OBJ_TYPE_CD}
    </update>

    <delete id="deleteMdbPrttpDdlInfAll" parameterType="hashmap">
        /* mng.deleteMdbPrttpDdlInfAll */
        TRUNCATE TABLE mdb_prttp_ddl_inf
    </delete>

    <delete id="deleteMdbPrttpDdlInf" parameterType="hashmap">
        /* mng.deleteMdbPrttpDdlInf */
        DELETE FROM mdb_prttp_ddl_inf
        WHERE (dbms_type_cd||'.'||ddl_type_cd||'.'||obj_type_cd) IN
        <foreach item="item" collection="DELETE_RECORDS" open="(" separator="," close=")">
           #{item}
        </foreach>
    </delete>

    <!-- 외부망여부 조회 -->
	<select id="getExternalNetworkYn" parameterType="hashmap" resultType="int">
        /* mng.getExternalNetworkYn */
       SELECT external_yn
         FROM md_inst
        WHERE svr_id = #{svrId, jdbcType=VARCHAR}
          AND inst_id = #{instId, jdbcType=VARCHAR}
    </select>

    <!-- 외부망 관련 쿼리 생성-->
    <!--
	<select id="getInsertSqlForExtenalSvrInst" parameterType="hashmap" resultType="encore.meta.mybatis.UpperKeyMap">
        /* mng.getInsertSqlForExtenalSvrInst */
        SELECT
              ' INSERT ALL
                  INTO md_svr (svr_id, svr_nm, cpu_cnt, cpu_spec, mem_size, svr_desc, creat_dt, creat_user_id, last_alter_dt, last_alter_user_id)
                VALUES (inst_id, inst_nm, cpu_cnt, cpu_spec, mem_size, inst_desc, creat_dt, user_id, creat_dt, user_id)
                  INTO md_svr_ip (svr_id, seq, ip, ip_desc, main_yn, creat_dt, creat_user_id, last_alter_dt, last_alter_user_id)
                VALUES (inst_id, seq, ip, ip_desc, ''y'', creat_dt, user_id, creat_dt, user_id)
                  INTO md_inst (svr_id, inst_id, inst_nm, sys_id, db_type, comp_type, inst_os_acct_nm, dflt_home_path, biz_area
                               ,biz_area_sub, meta_conn_acct_id, meta_conn_acct_pwd, mjr_mngr_id, sub_mngr_id, creat_dt
                               ,creat_user_id, last_alter_dt, last_alter_user_id, lsnc_desc, conn_alias_nm, jdbc_url_tp, external_yn)
                VALUES (inst_id, inst_id, inst_nm, sys_id, db_type, '''', '''', '''', '''', '''', meta_conn_acct_id,  meta_conn_acct_pwd, user_id, user_id, creat_dt, user_id, creat_dt, user_id, inst_desc, conn_alias_nm, jdbc_url_tp, external_yn)
                  INTO md_lsnr (svr_id, inst_id, lsnr_id, lsnr_nm, lsnr_ip, lsnr_prt, svc_nm, pwd_mng_yn, meta_conn_yn, mngr_id , creat_dt, creat_user_id, last_alter_dt, last_alter_user_id)
                VALUES (inst_id, inst_id, inst_id, inst_nm, ip, port, '''', ''Y'', ''Y'', user_id , creat_dt, user_id, creat_dt, user_id)
                    SELECT ' || '''${INST_ID}''' || ' inst_id , '|| '''${INST_NM}''' || ' inst_nm, 1 cpu_cnt, '''' cpu_spec
                         , 1 mem_size, ' ||'''${INST_DESC}''' || ' inst_desc, SYSDATE creat_dt, ' || '''${requestUserId}''' || ' user_id
                         , 1 seq, ' || '''${HOST_NM}''' || ' ip, '''' ip_desc, ' || '''${SYS_ID}''' || ' sys_id, '
                    || '''${DB_TYPE}''' || ' db_type, ' || '''${USERNAME}''' || ' meta_conn_acct_id
                         , META_CRYPT.CRYPT(' || '''${PASSWORD}'''|| ', ' || '''encore5868'') meta_conn_acct_pwd, '
                    || '''${PORT}''' || ' port, '|| '''${JDBC_URL_TP}''' || ' AS jdbc_url_tp, '
                    || '''${CONN_ALIAS_NM}''' || ' AS conn_alias_nm, '|| '''${EXTERNAL_YN}''' || ' AS external_yn
                      FROM DUAL
                     WHERE ROWNUM = 1' AS INSERT_MD_DB_INST
             , ' INSERT INTO md_db(svr_id, inst_id, db_id, db_nm, meta_mng_yn,del_yn, creat_dt, creat_user_id, last_alter_dt, last_alter_user_id)
                    SELECT '|| '''${SVR_ID}''' || ' svr_id, ' || '''${INST_ID}''' || ' inst_id, ' || '''${DB_ID}''' || ' db_id, '|| '''${INST_NM}''' || ' inst_nm
                         , ''Y'' META_MNG_YN, ''N'' del_yn, SYSDATE creat_dt, ' || '''${requestUserId}''' || ' creat_user_id
                         , SYSDATE last_alter_dt, ' || '''${requestUserId}''' || ' last_alter_user_id
                      FROM DUAL A' AS INSERT_MD_DB


    </select>

	<select id="getUpdateSqlForExtenalSvrInst" parameterType="hashmap" resultType="encore.meta.mybatis.UpperKeyMap">
        /*mng.getUpdateSqlForExtenalSvrInst*/
        SELECT
               'UPDATE md_svr SET svr_nm = ' || '''${INST_NM}''' || ', svr_desc = ' || '''${INST_DESC}'''
                    || ', last_alter_dt = SYSDATE, last_alter_user_id = ' || '''${requestUserId}'''
                    || ' WHERE svr_id = ' || '''${SVR_ID}''' AS UPDATE_MD_SVR
             , 'UPDATE md_svr_ip SET ip = '|| '''${HOST_NM}''' || ', ip_desc = ' || '''${INST_DESC}'''
                    || ', last_alter_dt = SYSDATE, last_alter_user_id = ' || '''${requestUserId}'''
                    || ' WHERE svr_id = ' || '''${SVR_ID}''' AS UPDATE_MD_SVR_IP
             , 'UPDATE md_inst SET inst_nm = '|| '''${INST_NM}''' || ', sys_id = '|| '''${SYS_ID}''' || ', db_type = ' || '''${DB_TYPE}'''
                    || ', meta_conn_acct_id = ' || '''${USERNAME}'''
             <if test="@Ognl@isNotEmpty(PASSWORD)">
                    || ', meta_conn_acct_pwd = META_CRYPT.CRYPT(' || '''${PASSWORD}''' || ','|| '''encore5868'''||')'
             </if>
                    || ', last_alter_dt = SYSDATE, last_alter_user_id = ' || '''${requestUserId}'''|| ', lsnc_desc = ' || '''${INST_DESC, jdbcType=VARCHAR}'''
                    || ', jdbc_url_tp = ' || '''${JDBC_URL_TP}'''
                    || ', conn_alias_nm ='|| '''${CONN_ALIAS_NM}''' || ', external_yn = '|| '''${EXTERNAL_YN}'''
                    || ' WHERE svr_id = ' || '''${SVR_ID}''' || ' AND inst_id = ' || '''${INST_ID}''' AS UPDATE_MD_INST
             , 'UPDATE md_lsnr SET lsnr_nm = ' || '''${INST_NM}''' || ', lsnr_ip = ' || '''${HOST_NM}''' || ', lsnr_prt = ' || '''${PORT}'''
                    || ', last_alter_dt = SYSDATE, last_alter_user_id =' || '''${requestUserId}'''
                    || ' WHERE svr_id = ' || '''${SVR_ID}''' || ' AND inst_id = ' || '''${INST_ID}''' || ' AND lsnr_id = ' || '''${LSNR_ID}''' AS UPDATE_MD_LSNR
             , 'UPDATE md_db SET db_nm = ' || '''${INST_NM}''' || ', last_alter_dt = SYSDATE, last_alter_user_id = ' || '''${requestUserId}'''
                    || ' WHERE svr_id = ' || '''${SVR_ID}''' ||' AND inst_id = ' || '''${INST_ID}''' || ' AND db_id = ' || '''${DB_ID}''' AS UPDATE_MD_DB
    </select>

	<select id="getDeleteSqlForExtenalSvrInst" parameterType="hashmap" resultType="encore.meta.mybatis.UpperKeyMap">
        /*mng.getDeleteSqlForExtenalSvrInst*/
        SELECT
               ' DELETE FROM md_db '
             || ' WHERE svr_id = ' || '''${SVR_ID}''' || ' AND inst_id = ' || '''${INST_ID}''' || ' AND db_id = ' || '''${DB_ID}''' as delete_md_db
             , ' DELETE FROM md_lsnr '
             || ' WHERE svr_id = ' || '''${SVR_ID}''' || ' AND inst_id = ' || '''${INST_ID}''' || ' AND lsnr_id = ' || '''${LSNR_ID}''' as delete_md_lsnr
             , ' DELETE FROM md_inst '
             || ' WHERE svr_id = ' || '''${SVR_ID}''' || ' AND inst_id = ' || '''${INST_ID}''' as delete_md_inst
             , ' DELETE FROM md_svr_ip '
             || ' WHERE svr_id = ' || '''${SVR_ID}''' as delete_md_svr_ip
             , ' DELETE FROM md_svr '
             || ' WHERE svr_id = ' || '''${SVR_ID}''' as delete_md_svr
             , 'DECLARE
                BEGIN
                    UPDATE md_job
                       SET use_yn =''N''
                     WHERE svr_id = ' || '''${SVR_ID}'''
                  || ' AND inst_id = ' || '''${INST_ID}'''
            <if test="@Ognl@isNotEmpty(DB_ID)">
                  || 'AND DB_ID = ' || '''${DB_ID}'''
            </if>
                ||';
                    UPDATE md_job_schd
                       SET use_yn =''N''
                     WHERE job_id IN ( SELECT job_id FROM md_job
                                        WHERE svr_id = ' || '''${SVR_ID}'''
                                     || ' AND inst_id = ' || '''${INST_ID}'''
                                <if test="@Ognl@isNotEmpty(DB_ID)">
                                     || ' AND DB_ID = ' || '''${DB_ID}'''
                                </if>
                                    ||');
                    UPDATE md_mng_obj
                       SET mng_yn = ''N''
                     WHERE svr_id = ' || '''${SVR_ID}'''
                  || ' AND inst_id = ' || '''${INST_ID}'''
                <if test="@Ognl@isNotEmpty(DB_ID)">
                  || ' AND DB_ID = ' || '''${DB_ID}'''
                </if>
                || ';
            END;
            ' AS DELETE_MD_JOB
    </select>

	<select id="getDeleteSqlForMdMngObj" parameterType="hashmap" resultType="encore.meta.mybatis.UpperKeyMap">
        /*mng.getDeleteSqlForMdMngObj*/
          SELECT
               ' DELETE FROM md_mng_obj
                 WHERE job_id = ' || '''${JOB_ID}'''
        <if test="@Ognl@isNotEmpty(SVR_ID)">
              || 'AND svr_id = '|| '''${SVR_ID}'''
        </if>
        <if test="@Ognl@isNotEmpty(INST_ID)">
              || 'AND inst_id = ' || '''${INST_ID}'''
        </if>
        <if test="@Ognl@isNotEmpty(DB_ID)">
              || 'AND db_id = ' || '''${DB_ID}'''
        </if> AS SQL
    </select>

	<select id="getinsertSqlForMdMngObj" parameterType="hashmap" resultType="encore.meta.mybatis.UpperKeyMap">
        SELECT
            'INSERT INTO md_mng_obj
                (job_id, obj_type, svr_id, inst_id, db_id,acct_id, lock_id, mng_yn, creat_dt, creat_user_id,last_alter_dt, last_alter_user_id)
            SELECT ' || '''${JOB_ID}''' || ' job_id, obj_type, svr_id, inst_id, db_id, acct_id, lock_id, mng_yn, creat_dt, creat_user_id, last_alter_dt, last_alter_user_id
              FROM (
                    SELECT ''ALL'' obj_type, '
                        || '''${SVR_ID}''' || ' svr_id, ' || '''${INST_ID}''' || ' inst_id, ' || '''${DB_ID}''' || ' db_id, '
                        || '''${SCHEMA_NAME}''' || ' acct_id, NULL lock_id, ' || '''${SELECT_YN}'''|| ' mng_yn, SYSDATE creat_dt, ' || '''${requestUserId}''' || ' creat_user_id, SYSDATE last_alter_dt, '
                        || '''${requestUserId}''' || ' last_alter_user_id
                      FROM dual
                     WHERE ' || '''${DB_TYPE}''' || ' = ' || '''0010''
                 UNION ALL
                    SELECT LPAD(no, 4, ''0'') obj_type, '
                        || '''${SVR_ID}''' || ' svr_id, ' || '''${INST_ID}''' || ' inst_id, ' || '''${DB_ID}''' || ' db_id, '
                        || '''${SCHEMA_NAME}''' || ' acct_id, NULL lock_id, ' || '''${SELECT_YN}''' || ' mng_yn, SYSDATE creat_dt, ' || '''${requestUserId}'''|| 'creat_user_id , SYSDATE last_alter_dt, '
                        || '''${requestUserId}''' || ' last_alter_user_id
                      FROM copy_t
                     WHERE ' || '''${DB_TYPE}''' || '!='  || '''0010''
                       AND no IN (1, 2, 4, 5, 6, 7, 9, 10, 11, 12, 13, 14, 20, 21, 23, 24, 99)
                       AND LPAD(' || '''${JOB_CAT_CD}''' || ', 4, ''0'') = ''0001''
                 UNION ALL
                    SELECT LPAD(no, 4,''0'') obj_type, ' || '''${SVR_ID}'''||' svr_id, ' || '''${INST_ID}''' || ' inst_id, '
                        || '''${DB_ID}''' || ' db_id, ' || '''${SCHEMA_NAME}''' || ' acct_id, NULL lock_id, '
                        || '''${SELECT_YN}''' || ' mng_yn, SYSDATE creat_dt, ' || '''${requestUserId}''' || ' creat_user_id, SYSDATE last_alter_dt, '
                        || '''${requestUserId}''' || ' last_alter_user_id
                      FROM copy_t
                     WHERE ' || '''${DB_TYPE}''' || ' != ''0010''
                       AND no IN (1, 2, 10, 11, 12, 13, 99)
                       AND LPAD(' || '''${JOB_CAT_CD}'''|| ', 4, ''0'') = ''0002''
                 UNION ALL
                    SELECT ''0098'' obj_type, '
                        || '''${SVR_ID}''' || ' svr_id, ' || '''${INST_ID}''' || ' inst_id, ' || '''${DB_ID}''' || ' db_id, '
                        || '''${SCHEMA_NAME}''' || ' acct_id, NULL lock_id, ' || '''${SELECT_YN}''' || ' mng_yn, SYSDATE creat_dt, '
                        || '''${requestUserId}''' || ' creat_user_id, SYSDATE last_alter_dt, ' || '''${requestUserId}''' || 'last_alter_user_id
                      FROM dual
                     WHERE LPAD(' || '''${JOB_CAT_CD}'''|| ' , 4, ''0'') = ''0003''
                 UNION ALL
                    SELECT ''ALL'' obj_type, '
                        || '''${SVR_ID}''' || ' svr_id, ' || '''${INST_ID}''' || ' inst_id, ' || '''${DB_ID}''' || ' db_id, '
                        || '''${SCHEMA_NAME}''' || ' acct_id, NULL lock_id, ' || '''${SELECT_YN}''' || ' mng_yn, SYSDATE creat_dt, '
                        || '''${requestUserId}''' || ' creat_user_id, SYSDATE last_alter_dt, ' || '''${requestUserId}''' || ' last_alter_user_id
                      FROM dual
                     WHERE ' || '''${DB_TYPE}''' || '!=' || '''0010''
                       AND LPAD(' || '''${JOB_CAT_CD}''' || ', 4, ''0'') = ''0100'')' AS INSERT_MNG_OBJ_SQL
            FROM DUAL
    </select>

	<select id="getUpdateSqlForJob" parameterType="hashmap" resultType="encore.meta.mybatis.UpperKeyMap">
        /* mng.getUpdateSqlForJob */
        SELECT
            'UPDATE md_job
                SET job_nm =' || '''${JOB_NM}''' || ', use_yn = ''Y'', job_cat_cd = LPAD(' || '''${JOB_CAT_CD}'''|| ', 4, ''0''), conn_acct_id = ' || '''${CONN_USER_NM}'''
                    || ', conn_acct_pwd = META_CRYPT.CRYPT(' || '''${CONN_USER_PWD}''' || ', ''encore5868''), svr_id= ' || '''${SVR_ID}'''
                    || ', inst_id= ' || '''${INST_ID}''' || ', db_id = '
             <choose>
                <when test="JOB_CAT_CD == &quot;0011&quot;">
                    || '''${DB_ID}'''||'.'||'''${ACCT_ID}'''
                </when>
                <otherwise> || '''${DB_ID}'''</otherwise>
             </choose>
                    || ', job_run_dt = NULL, elps_tm = NULL, job_desc= ' || '''${JOB_DESC}''' || ', job_char_desc = NULL, job_effct = NULL, job_obj_desc = NULL, job_goal = NULL'
                    || ', job_mngr_id = NULL, job_scpt_dir = NULL, sub_mngr_id = ' || '''${requestUserId}''' || ', mjr_mngr_id = ' || '''${requestUserId}'''
                    || ', creat_dt = SYSDATE, creat_user_id = ' || '''${requestUserId}''' || ', last_alter_dt = NULL, last_alter_user_id = null '
                    || ', conn_alias_nm = ' || '''${CONN_ALIAS}''' || ', acct_nm = ' || '''${ACCT_NM}'''
           || ' WHERE JOB_ID = ' || '''${JOB_ID}''' AS UPDATE_MD_JOB
    </select>

	<select id="getInsertSqlForJob" parameterType="hashmap" resultType="encore.meta.mybatis.UpperKeyMap">
        /* mng.getInsertSqlForJob */
        SELECT
            'INSERT INTO md_job
                (job_id, job_nm, use_yn, job_cat_cd, conn_acct_id
                ,conn_acct_pwd, svr_id, inst_id, job_run_dt, elps_tm
                ,job_desc, job_char_desc, job_effct, job_obj_desc, job_goal
                ,job_mngr_id, job_scpt_dir, sub_mngr_id, mjr_mngr_id, creat_dt
                ,creat_user_id, last_alter_dt, last_alter_user_id, conn_alias_nm, acct_nm, db_id)
             VALUES('
                || '''${JOB_ID}''' || ',' || '''${JOB_NM}'''|| ', ''Y'', LPAD(' || '''${JOB_CAT_CD}''' || ', 4, ''0''), ' || '''${CONN_USER_NM}'''
                || ', META_CRYPT.CRYPT(' || '''${CONN_USER_PWD}''' || ', ''encore5868''), ' || '''${SVR_ID}''' || ', ' || '''${INST_ID}'''
                || ', NULL, NULL, '
                || '''${JOB_DESC}'''|| ', NULL, NULL, NULL, NULL, NULL, NULL, ' || '''${requestUserId}'''|| ', ' || '''${requestUserId}''' || ', SYSDATE, '
                || '''${requestUserId}''' || ', NULL, NULL, ' || '''${CONN_ALIAS}''' || ', ' || '''${ACCT_NM}''' || ', '
        <choose>
            <when test="JOB_CAT_CD == &quot;0011&quot;">
                || '''${DB_ID}'''||'.'||'''${ACCT_ID}'''
            </when>
            <otherwise>
                || '''${DB_ID}'''
            </otherwise>
        </choose>
           || ')' AS INSERT_JOB
            , 'INSERT INTO md_job_schd(schl_id, job_id, schl_nm, use_yn, freq_type
                    ,freq_rcrr_intrv, freq_intrv, freq_rltv_intrv, next_run_dt, aval_st_dt
                    ,aval_end_dt,freq_day_type, freq_day_intrv, actv_st_tm, actv_end_tm, creat_dt
                    ,creat_user_id, last_alter_dt, last_alter_user_id)
                VALUES ('||'''${SCHL_ID}''' || ', ' || '''${JOB_ID}'''|| ', ' || '''${SCHL_NM}'''|| ', ''Y'', LPAD(' || '''${FREQ_TYPE}''' || ', 4, ''0''), '
                || '''${FREQ_RCRR_INTRV}'''|| ', ' || '''${FREQ_INTRV}''' || ', ' || '''${FREQ_RLTV_INTRV}''' || ', '
                || '''${NEXT_RUN_DT}''' || ', ' || '''${AVAL_ST_DT}''' || ', DECODE(' || '''${FREQ_TYPE}'''
                || ', 0, TO_CHAR(TO_DATE(' || '''${AVAL_ST_DT}''' || ', ''YYYYMMDDHH24MISS'') + 2, ''YYYYMMDDHH24MISS''), ' || '''${AVAL_END_DT}''' || '), NULL, NULL, '
                || '''${ACTV_ST_TM}''' || ', NULL, SYSDATE, ' || '''${CREATE_USER_ID}''' || ', NULL ,NULL)' AS INSERT_SCHD
    </select>

	<select id="getUpdateSqlForJobSchd" parameterType="hashmap" resultType="encore.meta.mybatis.UpperKeyMap">
        /*getUpdateSqlForJobSchd*/
        SELECT
            'UPDATE md_job_schd
                SET schl_nm = ' || '''${SCHL_NM}'''
                || ', use_yn = ''Y'', freq_type = LPAD(' || '''${FREQ_TYPE}''' || ', 4, ''0'')
                    , freq_rcrr_intrv = ' || '''${FREQ_RCRR_INTRV}''' || ', freq_intrv = ' || '''${FREQ_INTRV}'''|| '
                    , freq_rltv_intrv = ' || '''${FREQ_RLTV_INTRV}''' || '
                    , next_run_dt = ' || '''${NEXT_RUN_DT}'''
                || ', aval_st_dt = TO_CHAR(TO_DATE(' || '''${AVAL_ST_DT}'''|| ', ''YYYY-MM-DD HH24:MI:SS''), ''YYYYMMDDHH24MISS'')
                    , aval_end_dt = DECODE(' || '''${FREQ_TYPE}''' || ', 0, TO_CHAR(TO_DATE(' || '''${AVAL_ST_DT}'''|| ', ''YYYY-MM-DD HH24:MI:SS'') + 2, ''YYYYMMDDHH24MISS'')
                    , TO_CHAR(TO_DATE(' || '''${AVAL_END_DT}''' || ', ''YYYY-MM-DD HH24:MI:SS''), ''YYYYMMDDHH24MISS''))
                    , freq_day_type = NULL, freq_day_intrv = NULL, actv_st_tm = ' || '''${ACTV_ST_TM}'''
                || ', actv_end_tm = NULL, last_alter_dt = SYSDATE, last_alter_user_id = ' || '''${requestUserId}'''
                || ' WHERE JOB_ID = ' || '''${JOB_ID}'''
                || ' AND SCHL_ID = ' || '''${SCHL_ID}''' AS UPDATE_SCHD
    </select>

	<select id="getDeleteSqlForJob" parameterType="hashmap" resultType="encore.meta.mybatis.UpperKeyMap">
        /*getDeleteSqlForJob*/
        SELECT
               'DELETE FROM md_job WHERE job_id = ' || '''${JOB_ID}''' AS DELETE_JOB
             , 'DELETE FROM md_job_schd WHERE job_id = ' || '''${JOB_ID}''' AS DELETE_JOB_SCHD
             , 'DELETE FROM md_mng_obj WHERE job_id = ' || '''${JOB_ID}''' AS DELETE_MD_MNG_OBJ
    </select>
    -->

	<select id="getInsertSqlForInstantJob" parameterType="hashmap" resultType="encore.meta.mybatis.UpperKeyMap">
        /*getInsertSqlForInstantJob*/
        SELECT
            ' INSERT INTO MD_JOB_SCHD (job_id, schl_id, schl_nm, use_yn, freq_type, freq_rcrr_intrv, freq_intrv, freq_rltv_intrv
            , next_run_dt, aval_st_dt,aval_end_dt,freq_day_type, freq_day_intrv, actv_st_tm, actv_end_tm, creat_dt, creat_user_id
            , last_alter_dt, last_alter_user_id)
             VALUES ( ' || '''${JOB_ID}''' || ', ' || '''${SCHL_ID}''' || ', ' || '''${SCHL_NM}''' || ', ''Y'' , LPAD(' || '''${FREQ_TYPE}''' || ', 4, ''0''), '
                    || '''${FREQ_RCRR_INTRV}'''|| ', ' || '''${FREQ_INTRV}''' || ', ' || '''${FREQ_RLTV_INTRV}''' || ', ' || '''${NEXT_RUN_DT}'''
                    || ', ' || '''${AVAL_ST_DT}''' || ' , DECODE(' ||'''${FREQ_TYPE}''' || ', 0, TO_CHAR(TO_DATE(' || '''${AVAL_ST_DT}'''|| ', ''YYYYMMDDHH24MISS'') + 2, ''YYYYMMDDHH24MISS''), '|| '''${AVAL_END_DT}''' || ') ,
                    NULL, NULL, ' || '''${ACTV_ST_TM}''' || ', NULL, SYSDATE, ' || '''${CREATE_USER_ID}''' || ', NULL, NULL )' AS INSERT_SCHD
 
    </select>

    <!-- 외부망 관련 쿼리 생성 END-->
	<select id="getDbmsList" parameterType="hashmap" resultType="encore.meta.mybatis.UpperKeyMap">
        /* mng.getDbmsList */
        SELECT DISTINCT c.cd_id dbms_type_cd
             , c.cd_nm dbms_nm
             , c.show_ord
          FROM mcs_jdbc_map m
             , ms_code c
         WHERE c.up_cd_id = '0001'
           AND c.lang_cd = #{langCd}
           AND m.dbms_type_cd = c.cd_id
           AND m.use_yn = 'Y'
         ORDER BY c.cd_id
    </select>

	<select id="getJdbcUrl" parameterType="hashmap" resultType="encore.meta.mybatis.UpperKeyMap">
        /* mng.getJdbcUrl */
        SELECT c.cd_id dbms_type_cd
             , m.jdbc_driver
             , m.jdbc_url_tp
             , m.jdbc_url_tmpl
          FROM mcs_jdbc_map m
             , ms_code c
         WHERE c.up_cd_id = '0001'
           AND c.lang_cd = #{langCd}
           AND m.dbms_type_cd = c.cd_id
           AND m.use_yn = 'Y'
         ORDER BY c.cd_id
    </select>

    <select id="getJdbcDriver" parameterType="hashmap" resultType="string">
        /* mng.getJdbcDriver */
        SELECT m.jdbc_driver
          FROM mcs_jdbc_map m
             , ms_code c
         WHERE c.up_cd_id = '0001'
           AND c.lang_cd = #{langCd}
           AND m.dbms_type_cd = c.cd_id
           AND m.dbms_type_cd = #{DB_TYPE}
           AND m.jdbc_url_tp = #{JDBC_URL_TP}
           AND m.use_yn = 'Y'
    </select>


    <select id="getNextRunDate" parameterType="hashmap" resultType="string">
        /* mng.getNextRunDate */
        SELECT CASE #{FREQ_TYPE} WHEN '0001' THEN TO_CHAR(TO_DATE(#{AVAL_ST_DT}, 'yyyymmdd') + (${FREQ_RCRR_INTRV} + CASE WHEN #{AVAL_ST_DT}||#{ACTV_ST_TM} > TO_CHAR(sysdate, 'yyyymmddhh24miss') THEN 0 ELSE 1 END), 'yyyymmdd') || #{ACTV_ST_TM}
                                 WHEN '0002' THEN TO_CHAR(TO_DATE(#{AVAL_ST_DT}, 'yyyymmdd') + (${FREQ_RCRR_INTRV} + CASE WHEN (${FREQ_INTRV} + 1) &gt; TO_CHAR(TO_DATE(#{AVAL_ST_DT}, 'yyyymmdd'), 'd') THEN 0 ELSE 1 END) * 7
                                                     + (${FREQ_INTRV} + 1) - TO_CHAR(TO_DATE(#{AVAL_ST_DT},'yyyymmdd'),'d'),'yyyymmdd') || #{ACTV_ST_TM}
                                 WHEN '0003' THEN TO_CHAR(CASE WHEN TO_DATE(#{AVAL_ST_DT}, 'yyyymmdd') &lt; TRUNC(TO_DATE(#{AVAL_ST_DT}, 'yyyymmdd'), 'mm') + (${FREQ_INTRV} - 1)
                                                                   THEN TRUNC(TO_DATE(#{AVAL_ST_DT},'yyyymmdd'),'mm') + (${FREQ_INTRV}-1)
                                                               ELSE ADD_MONTHS(TRUNC(TO_DATE(#{AVAL_ST_DT},'yyyymmdd'),'mm'), ${FREQ_RCRR_INTRV} + 1) + (${FREQ_INTRV} - 1)
                                                           END, 'yyyymmdd') || #{ACTV_ST_TM}
                                 WHEN '0004' THEN TO_CHAR(NEXT_DAY(ADD_MONTHS(TRUNC(TO_DATE(#{AVAL_ST_DT}, 'yyyymmdd'), 'mm')
                                                                            , CASE WHEN TO_CHAR(TO_DATE(#{AVAL_ST_DT}, 'yyyymmdd'), 'w') &lt; ${FREQ_RLTV_INTRV} + 1 AND ${FREQ_RCRR_INTRV} + 1 = 1
                                                                                       THEN 0
                                                                                   WHEN TO_CHAR(TO_DATE(#{AVAL_ST_DT}, 'yyyymmdd'), 'w') = ${FREQ_RLTV_INTRV} + 1 AND TO_CHAR(TO_DATE(#{AVAL_ST_DT}, 'yyyymmdd'), 'D') &lt; (${FREQ_INTRV} + 1)
                                                                                       THEN 0
                                                                                   ELSE TO_NUMBER(${FREQ_RCRR_INTRV} + 1)
                                                                               END ) -1
                                                                 , (${FREQ_INTRV} + 1))
                                                + ((${FREQ_RLTV_INTRV} + 1 - 1 + CASE WHEN TO_CHAR(LAST_DAY(ADD_MONTHS(TO_DATE(#{AVAL_ST_DT},'yyyymmdd')
                                                                                                                     , CASE WHEN TO_CHAR(TO_DATE(#{AVAL_ST_DT},'yyyymmdd'), 'w') &lt; ${FREQ_RLTV_INTRV} + 1 AND ${FREQ_RCRR_INTRV} + 1 = 1 THEN 0
                                                                                                                            WHEN TO_CHAR(TO_DATE(#{AVAL_ST_DT},'yyyymmdd'), 'w') = ${FREQ_RLTV_INTRV} + 1 AND TO_CHAR(TO_DATE(#{AVAL_ST_DT},'yyyymmdd'), 'D') &lt; (${FREQ_INTRV} + 1) THEN 0
                                                                                                                            ELSE TO_NUMBER(${FREQ_RCRR_INTRV} + 1)
                                                                                                                        END)),'w') &lt; ${FREQ_RLTV_INTRV} + 1 THEN -1
                                                                                      ELSE 0
                                                                                  END
                                                + CASE WHEN LAST_DAY(ADD_MONTHS(TO_DATE(#{AVAL_ST_DT},'yyyymmdd')
                                                                              , CASE WHEN TO_CHAR(TO_DATE(#{AVAL_ST_DT},'yyyymmdd'), 'w') &lt; ${FREQ_RLTV_INTRV} + 1 AND ${FREQ_RCRR_INTRV} + 1 = 1 THEN 0
                                                                                     WHEN TO_CHAR(TO_DATE(#{AVAL_ST_DT},'yyyymmdd'), 'w') = ${FREQ_RLTV_INTRV} + 1 AND TO_CHAR(TO_DATE(#{AVAL_ST_DT},'yyyymmdd'), 'D') &lt; (${FREQ_INTRV} + 1) THEN 0
                                                                                     ELSE TO_NUMBER(${FREQ_RCRR_INTRV} + 1)
                                                                                 END)) &lt; NEXT_DAY(ADD_MONTHS(TRUNC(TO_DATE(#{AVAL_ST_DT},'yyyymmdd'),'mm')
                                                                                                              , CASE WHEN TO_CHAR(TO_DATE(#{AVAL_ST_DT},'yyyymmdd'), 'w') &lt; ${FREQ_RLTV_INTRV} + 1 AND ${FREQ_RCRR_INTRV} + 1 = 1 THEN 0
                                                                                                                     WHEN TO_CHAR(TO_DATE(#{AVAL_ST_DT},'yyyymmdd'), 'w') = ${FREQ_RLTV_INTRV} + 1 AND TO_CHAR(TO_DATE(#{AVAL_ST_DT},'yyyymmdd'), 'D') &lt; (${FREQ_INTRV} + 1) THEN 0
                                                                                                                     ELSE TO_NUMBER(${FREQ_RCRR_INTRV} + 1)
                                                                                                                 END ) -1
                                                                                                   , (${FREQ_INTRV} + 1))
                                                                                            + ((${FREQ_RLTV_INTRV} + 1 - 1  + CASE WHEN TO_CHAR(LAST_DAY(ADD_MONTHS(TO_DATE(#{AVAL_ST_DT},'yyyymmdd')
                                                                                                                                                                  , CASE WHEN TO_CHAR(TO_DATE(#{AVAL_ST_DT},'yyyymmdd'), 'w') &lt; ${FREQ_RLTV_INTRV} + 1 AND ${FREQ_RCRR_INTRV} = 0 then 0
                                                                                                                                                                         WHEN TO_CHAR(TO_DATE(#{AVAL_ST_DT},'yyyymmdd'), 'w') = ${FREQ_RLTV_INTRV} + 1 AND TO_CHAR(TO_DATE(#{AVAL_ST_DT},'yyyymmdd'), 'D') &lt; (${FREQ_INTRV} + 1) THEN 0
                                                                                                                                                                         ELSE TO_NUMBER(${FREQ_RCRR_INTRV} + 1)
                                                                                                                                                                     END )),'w') &lt; ${FREQ_RLTV_INTRV} + 1 THEN -1
                                                                                                                                   ELSE 0
                                                                                                                               END ) * 7) THEN -1
                                                       ELSE 0
                                                  END ) * 7), 'yyyymmdd') || #{ACTV_ST_TM}
                END
          FROM DUAL
    </select>

    <!-- 사용자 동기화 프로시져 -->
    <select id="callUserSync" statementType="CALLABLE" parameterType="hashmap">
        {call SP_USER_SYNC(#{RET, mode=OUT, javaType=String, jdbcType=VARCHAR})}
    </select>


	<select id="getClassDefList" parameterType="hashmap" resultType="encore.meta.mybatis.UpperKeyMap">
        /* mng.getClassDefList */
        <include refid="pagingHeader"/>
        SELECT c.clss_id
             , c.gap_gbn
             , c.clss_obj_cd
             , c.clss_nm
             , c.clss_desc
             , c.trgt_gbn
             , c.prod_gbn
             , c.ins_sql
              , (SELECT string_agg(dbms_type_cd, ',' ORDER BY dbms_type_cd) val
                  FROM md_gap_class_dbms
                 WHERE clss_id = c.clss_id) as rel_dbms_type
             , COUNT(1) OVER() total_row_count
          FROM md_gap_class c
         WHERE 1=1
         <if test="@Ognl@isNotEmpty(GAP_GBN)">
           AND c.gap_gbn = #{GAP_GBN}
         </if>
         <if test="@Ognl@isNotEmpty(CLSS_OBJ_CD)">
           AND c.clss_obj_cd = #{CLSS_OBJ_CD}
         </if>
         <if test="@Ognl@isNotEmpty(PROD_GBN)">
           AND c.prod_gbn = #{PROD_GBN}
         </if>
         <if test="@Ognl@isNotEmpty(TRGT_GBN)">
           AND c.trgt_gbn = #{TRGT_GBN}
         </if>
         <if test="@Ognl@isNotEmpty(SEARCH_WORD)">
           AND (UPPER(c.clss_nm) LIKE UPPER(#{SEARCH_WORD}) OR UPPER(c.clss_desc) LIKE UPPER(#{SEARCH_WORD}))
         </if>
         <if test="@Ognl@isNotEmpty(sortParams)">
             <foreach item="item" collection="sortParams" open="ORDER BY" separator=",">
                ${item.property} ${item.direction}
             </foreach>
         </if>
         <if test="@Ognl@isEmpty(sortParams)">
             ORDER BY c.clss_id, c.gap_gbn
         </if>
         <include refid="pagingFooter"/>
    </select>


    <select id="getClassDefList2" parameterType="hashmap" resultType="encore.meta.mybatis.UpperKeyMap">
        /* mng.getClassDefList2 */
        <include refid="pagingHeader"/>
        SELECT c.clss_id
             , c.gap_gbn
             , c.clss_obj_cd
             , c.clss_nm
             , c.clss_desc
             , c.prod_gbn
             , c.ins_sql
             , (
				SELECT string_agg(dbms_type_cd, ',' ORDER BY dbms_type_cd) val
			      FROM md_gap_class_dbms
			      WHERE clss_id = c.clss_id
			   ) as rel_dbms_type
             , COUNT(1) OVER() total_row_count
          FROM mdb_gap_class c
         WHERE 1=1
         <if test="@Ognl@isNotEmpty(GAP_GBN)">
           AND c.gap_gbn = #{GAP_GBN}
         </if>
         <if test="@Ognl@isNotEmpty(CLSS_OBJ_CD)">
           AND c.clss_obj_cd = #{CLSS_OBJ_CD}
         </if>
         <if test="@Ognl@isNotEmpty(PROD_GBN)">
           AND c.prod_gbn = #{PROD_GBN}
         </if>
         <if test="@Ognl@isNotEmpty(SEARCH_WORD)">
           AND (UPPER(c.clss_nm) LIKE UPPER(#{SEARCH_WORD}) OR UPPER(c.clss_desc) LIKE UPPER(#{SEARCH_WORD}))
         </if>
         <if test="@Ognl@isNotEmpty(sortParams)">
             <foreach item="item" collection="sortParams" open="ORDER BY" separator=",">
                ${item.property} ${item.direction}
             </foreach>
         </if>
         <if test="@Ognl@isEmpty(sortParams)">
             ORDER BY c.clss_id, c.gap_gbn
         </if>
         <include refid="pagingFooter"/>
    </select>

    <!-- md_gap_class 저장 2019.02.26 -->
    <insert id="insertGapClassDefinition_MD" parameterType="hashmap">
        /* mng.insertGapClassDefinition_MD */
        INSERT INTO md_gap_class
            (clss_id, clss_obj_cd, clss_nm, clss_desc, prod_gbn, gap_gbn, trgt_gbn, ins_sql)
        VALUES
            (#{CLSS_ID}, #{CLSS_OBJ_CD}, #{CLSS_NM}, #{CLSS_DESC, jdbcType=VARCHAR}, #{PROD_GBN}, #{GAP_GBN}, #{TRGT_GBN}, #{INSERT_SQL})
    </insert>

    <!-- mdb_gap_class 저장 2019.02.26 -->
    <insert id="insertGapClassDefinition" parameterType="hashmap">
        /* mng.insertGapClassDefinition */
        INSERT INTO mdb_gap_class
            (clss_id, clss_obj_cd, clss_nm, clss_desc, prod_gbn, gap_gbn, ins_sql)
        VALUES
            (#{CLSS_ID}, #{CLSS_OBJ_CD}, #{CLSS_NM}, #{CLSS_DESC, jdbcType=VARCHAR}, #{PROD_GBN}, #{GAP_GBN}, #{INSERT_SQL})
    </insert>

    <insert id="insertGapClassDbms" parameterType="hashmap">
        /* mng.insertGapClassDbms */
        INSERT INTO md_gap_class_dbms (clss_id, dbms_type_cd) VALUES (#{CLSS_ID}, #{CD_ID})
    </insert>

    <delete id="updateGapClassDbms" parameterType="hashmap">
        /* mng.updateGapClassDbms */
        DELETE from md_gap_class_dbms WHERE clss_id = #{CLSS_ID}
    </delete>
    <!-- md_gap_class 저장 2019.02.26 -->
    <update id="updateGapClassDefinition_MD" parameterType="hashmap">
        /* mng.updateGapClassDefinition_MD */
        UPDATE md_gap_class
        <set>
            clss_desc = #{CLSS_DESC, jdbcType=VARCHAR}
            <if test="@Ognl@isNotEmpty(CLSS_OBJ_CD)">,clss_obj_cd = #{CLSS_OBJ_CD}</if>
            <if test="@Ognl@isNotEmpty(CLSS_NM)">,clss_nm = #{CLSS_NM}</if>
            <if test="@Ognl@isNotEmpty(PROD_GBN)">,prod_gbn = #{PROD_GBN}</if>
            <if test="@Ognl@isNotEmpty(GAP_GBN)">,gap_gbn = #{GAP_GBN}</if>
            <if test="@Ognl@isNotEmpty(TRGT_GBN)">,trgt_gbn = #{TRGT_GBN, jdbcType=VARCHAR}</if>
            <if test="@Ognl@isNotEmpty(INSERT_SQL)">,ins_sql = #{INSERT_SQL}</if>
        </set>
         WHERE clss_id = #{CLSS_ID}
    </update>
    <!-- mdb_gap_class 저장 2019.02.26 -->
    <update id="updateGapClassDefinition" parameterType="hashmap">
        /* mng.updateGapClassDefinition */
        UPDATE mdb_gap_class
        <set>
            clss_desc = #{CLSS_DESC, jdbcType=VARCHAR}
            <if test="@Ognl@isNotEmpty(CLSS_OBJ_CD)">,clss_obj_cd = #{CLSS_OBJ_CD}</if>
            <if test="@Ognl@isNotEmpty(CLSS_NM)">,clss_nm = #{CLSS_NM}</if>
            <if test="@Ognl@isNotEmpty(PROD_GBN)">,prod_gbn = #{PROD_GBN}</if>
            <if test="@Ognl@isNotEmpty(GAP_GBN)">,gap_gbn = #{GAP_GBN}</if>
            <if test="@Ognl@isNotEmpty(INSERT_SQL)">,ins_sql = #{INSERT_SQL}</if>
        </set>
         WHERE clss_id = #{CLSS_ID}
    </update>

	<select id="getClassPropertyList" parameterType="hashmap" resultType="encore.meta.mybatis.UpperKeyMap">
        /* mng.getClassPropertyList */
        SELECT clss_id
             , ordr_no
             , prop_nm
             , prop_phy_nm
             , prop_desc
             , gap_anl_yn
          FROM md_gap_class_property
         WHERE clss_id = #{CLSS_ID}
         ORDER BY ordr_no
    </select>

    <select id="getCheckMdGapClssId" parameterType="hashmap" resultType="int">
        /* mng.getCheckMdGapClssId */
        SELECT count(1)
          FROM mdb_gap_class
         WHERE clss_id = #{CLSS_ID}
    </select>

    <delete id="deleteGapClass" parameterType="hashmap">
        /* mng.deleteGapClass */
        DELETE FROM mdb_gap_class
        WHERE (clss_id) IN
        <foreach item="item" collection="DELETE_RECORDS" open="(" separator="," close=")">
           #{item}
        </foreach>
    </delete>

    <!-- 2019.03.06 -->
    <delete id="deleteMDGapClass" parameterType="hashmap">
        /* mng.deleteMDGapClass */
        DELETE FROM md_gap_class
        WHERE (clss_id) IN
        <foreach item="item" collection="DELETE_RECORDS" open="(" separator="," close=")">
           #{item}
        </foreach>
    </delete>

    <delete id="deleteGapClassDbms" parameterType="hashmap">
        /* mng.deleteGapClassDbms */
        DELETE FROM md_gap_class_dbms
        WHERE (clss_id) IN
        <foreach item="item" collection="DELETE_RECORDS" open="(" separator="," close=")">
           #{item}
        </foreach>
    </delete>

    <!-- 2019.03.06-->
    <delete id="deleteMDGapClassAll" parameterType="hashmap">
        /* mng.deleteMDGapClassAll */
        TRUNCATE TABLE md_gap_class
    </delete>

    <delete id="deleteGapClassAll" parameterType="hashmap">
        /* mng.deleteGapClassAll */
        TRUNCATE TABLE mdb_gap_class
    </delete>

    <delete id="deleteGapClassDbmsAll" parameterType="hashmap">
        /* mng.deleteGapClassDbmsAll */
        TRUNCATE TABLE md_gap_class_dbms
    </delete>

    <insert id="insertClassProperty" parameterType="hashmap">
        /* mng.insertClassProperty */
        INSERT INTO md_gap_class_property
            (clss_id, ordr_no, prop_nm, prop_phy_nm, prop_desc, gap_anl_yn)
        VALUES
            (#{CLSS_ID}, #{ORDR_NO}, #{PROP_NM}, #{PROP_PHY_NM}, #{PROP_DESC, jdbcType=VARCHAR}, #{GAP_ANL_YN})
    </insert>

    <update id="updateClassProperty" parameterType="hashmap">
        /* mng.updateClassProperty */
        UPDATE md_gap_class_property
        <set>
            prop_desc = #{PROP_DESC, jdbcType=VARCHAR},
            ordr_no = #{ORDR_NO},
            prop_nm = #{PROP_NM},
            prop_phy_nm = #{PROP_PHY_NM},
            gap_anl_yn = #{GAP_ANL_YN}
        </set>
         WHERE clss_id = #{CLSS_ID}
    </update>

    <delete id="deleteMdGapClassProperty" parameterType="hashmap">
        /* mng.deleteMdGapClassProperty */
        DELETE FROM md_gap_class_property
        WHERE (clss_id||'.'||ordr_no) IN
        <foreach item="item" collection="DELETE_RECORDS" open="(" separator="," close=")">
           #{item}
        </foreach>
    </delete>

    <delete id="deleteMdGapClassPropertyAll" parameterType="hashmap">
        /* mng.deleteMdGapClassPropertyAll */
        DELETE FROM md_gap_class_property
        WHERE clss_id = #{CLSS_ID}
    </delete>

    <!--DDL 문법  정의 -->
	<select id="getDDLSyntxList" parameterType="hashmap" resultType="encore.meta.mybatis.UpperKeyMap">
        /* mng.getDDLSyntxList */
        <include refid="pagingHeader"/>
        SELECT d.*
             , COUNT(1) OVER() total_row_count
          FROM (
            SELECT s.syntx_id
                 , s.syntx_nm
                 , s.syntx_desc
                 , s.ddl_type_cd
                 , s.obj_type_cd
                 , s.use_yn
                 , s.ddl_condition
                 , (SELECT string_agg(dbms_type_cd, ',' ORDER BY dbms_type_cd) val
                      FROM mdb_ddl_syntx_dbms
                     WHERE syntx_id = s.syntx_id) as rel_dbms_type
              FROM mdb_ddl_syntx s
          ) d
         WHERE 1=1
         <if test="@Ognl@isNotEmpty(DDL_TYPE_CD)">
            AND ddl_type_cd = #{DDL_TYPE_CD}
         </if>
         <if test="@Ognl@isNotEmpty(OBJ_TYPE_CD)">
            AND obj_type_cd = #{OBJ_TYPE_CD}
         </if>
         <if test="@Ognl@isNotEmpty(USE_YN)">
            AND use_yn = #{USE_YN}
         </if>
         <if test="@Ognl@isNotEmpty(SEARCH_WORD)">
           AND (UPPER(syntx_nm) LIKE UPPER(#{SEARCH_WORD}) OR UPPER(syntx_desc) LIKE UPPER(#{SEARCH_WORD}))
         </if>
         <if test="@Ognl@isNotEmpty(DBMS_TYPE_CD)">
           AND rel_dbms_type LIKE '%'||#{DBMS_TYPE_CD}||'%'
         </if>
         ORDER BY syntx_id
         <include refid="pagingFooter"/>
    </select>

	<select id="getDDLStruInfo" parameterType="hashmap" resultType="encore.meta.mybatis.UpperKeyMap">
        /* mng.getDDLStruInfo */
		WITH RECURSIVE cte AS (
			SELECT 1 lvl,a.*,ARRAY[ row_number() OVER (ORDER BY  a.ordr) ] as hierarchy
				FROM ( SELECT syntx_id
		              , syntx_node_no::varchar syntx_node_no
					,case
						when coalesce(up_syntx_node_no::text, '') = '' then 'ROOT'
						else up_syntx_node_no::text
					end p_node_no
		              , up_syntx_node_no
		              , syntx_node_nm
		              , syntx_node_desc
		              , syntx_node_gbn
		              , ordr
		              , repeat_yn
		              , var_id
		              , syntx_node_ordr_gbn
		           FROM mdb_ddl_stru
		          WHERE syntx_id = #{SYNTX_ID}
				) a WHERE a.p_node_no = 'ROOT'
			  UNION ALL
			SELECT (c.lvl+1) lvl, t1.*, array_append(c.hierarchy, row_number() OVER (ORDER BY  t1.ordr))  as hierarchy
		      FROM ( SELECT syntx_id
		                  , syntx_node_no::varchar syntx_node_no
		                  , CASE WHEN coalesce(up_syntx_node_no::text, '') = '' THEN  'ROOT'  ELSE up_syntx_node_no::text END  p_node_no
		                  , up_syntx_node_no
		                  , syntx_node_nm
		                  , syntx_node_desc
		                  , syntx_node_gbn
		                  , ordr
		                  , repeat_yn
		                  , var_id
		                  , syntx_node_ordr_gbn
		               FROM mdb_ddl_stru
		              WHERE syntx_id = :SYNTX_ID/*#{SYNTX_ID}*/
			) t1 JOIN cte c ON (c.syntx_node_no = t1.p_node_no)
		) SELECT * FROM cte ORDER BY hierarchy;
    </select>

	<select id="getVariableList" parameterType="hashmap" resultType="encore.meta.mybatis.UpperKeyMap">
        /* mng.getVariableList */
        <if test="@Ognl@isEmpty(noPaging)">
            <include refid="pagingHeader"/>
        </if>
            SELECT var_id
             , var_nm
             , var_desc
             , bind_sql
             , (var_id)::numeric  "no"
             , COUNT(1) OVER () total_row_count
          FROM mdb_ddl_var
         WHERE 1=1

         <if test="@Ognl@isNotEmpty(VAR_ID)">
            AND var_id = #{VAR_ID, jdbcType=VARCHAR}
         </if>
         <if test="@Ognl@isNotEmpty(SEARCH_WORD)">
           AND (UPPER(var_nm) LIKE UPPER(#{SEARCH_WORD}) OR UPPER(var_desc) LIKE UPPER(#{SEARCH_WORD}) OR UPPER(bind_sql) LIKE UPPER(#{SEARCH_WORD}))
         </if>
          ORDER BY no
          <if test="@Ognl@isEmpty(noPaging)">
              <include refid="pagingFooter"/>
          </if>
    </select>

    <insert id="insertDDLSyntx" parameterType="hashmap">
        /* mng.insertDDLSyntx */

        <selectKey keyProperty="SYNTX_ID" resultType="string" order="BEFORE">
		select
			lpad((coalesce((max(SYNTX_ID))::numeric , 0) + 1)::text, 4, '0') max_syntx_id
		from
			mdb_ddl_syntx
        </selectKey>
        INSERT INTO mdb_ddl_syntx
            (syntx_id, syntx_nm, syntx_desc, ddl_type_cd, obj_type_cd, use_yn, ddl_condition)
        VALUES
            (#{SYNTX_ID}, #{SYNTX_NM, jdbcType=VARCHAR}, #{SYNTX_DESC, jdbcType=VARCHAR}, #{DDL_TYPE_CD}, #{OBJ_TYPE_CD}, #{USE_YN}, #{DDL_CONDITION, jdbcType=VARCHAR})
    </insert>

    <insert id="insertDDLSyntxDbms" parameterType="hashmap">
        /* mng.insertDDLSyntxDbms */
        INSERT INTO mdb_ddl_syntx_dbms (syntx_id, dbms_type_cd) VALUES (#{SYNTX_ID}, #{CD_ID})
    </insert>

    <update id="updateDDLSyntx" parameterType="hashmap">
        /* mng.updateDDLSyntx */
        UPDATE mdb_ddl_syntx
        <set>
            syntx_nm = #{SYNTX_NM, jdbcType=VARCHAR},
            syntx_desc = #{SYNTX_DESC, jdbcType=VARCHAR},
            ddl_type_cd = #{DDL_TYPE_CD},
            obj_type_cd = #{OBJ_TYPE_CD},
            use_yn = #{USE_YN},
            ddl_condition = #{DDL_CONDITION, jdbcType=VARCHAR}
        </set>
         WHERE syntx_id = #{SYNTX_ID}
    </update>

    <delete id="deleteDDLSyntxDbms" parameterType="hashmap">
        /* mng.deleteDDLSyntxDbms */
        delete from mdb_ddl_syntx_dbms WHERE syntx_id = #{SYNTX_ID}
    </delete>

    <delete id="deleteDDLInfo" parameterType="hashmap">
        /* mng.deleteDDLInfo */
        DECLARE
        BEGIN

            DELETE FROM mdb_ddl_syntx
             WHERE syntx_id in
             <foreach item="item" collection="DELETE_RECORDS" open="(" separator="," close=")">
                #{item}
             </foreach>
             ;

            DELETE FROM mdb_ddl_stru
             WHERE syntx_id IN
             <foreach item="item" collection="DELETE_RECORDS" open="(" separator="," close=")">
                #{item}
             </foreach>
             ;

            DELETE FROM mdb_ddl_syntx_dbms
             WHERE syntx_id IN
             <foreach item="item" collection="DELETE_RECORDS" open="(" separator="," close=")">
                #{item}
             </foreach>
             ;
        END;
    </delete>

    <insert id="insertDDLStru" parameterType="hashmap">
        /* mng.insertDDLStru */
        INSERT INTO mdb_ddl_stru
            (SYNTX_ID, SYNTX_NODE_NO, UP_SYNTX_NODE_NO, SYNTX_NODE_NM, SYNTX_NODE_DESC, SYNTX_NODE_GBN, ORDR, REPEAT_YN, VAR_ID, SYNTX_NODE_ORDR_GBN)
        VALUES
            (#{SYNTX_ID}, ${SYNTX_NODE_NO}, #{UP_SYNTX_NODE_NO, jdbcType=VARCHAR}, #{SYNTX_NODE_NM}, #{SYNTX_NODE_DESC, jdbcType=VARCHAR}
            , #{SYNTX_NODE_GBN}, ${ORDR}, #{REPEAT_YN, jdbcType=VARCHAR}, #{VAR_ID, jdbcType=VARCHAR}, #{SYNTX_NODE_ORDR_GBN, jdbcType=VARCHAR})
    </insert>

    <update id="updateDDLStru" parameterType="hashmap">
        /* mng.updateDDLStru */
        UPDATE mdb_ddl_stru
        <set>
            up_syntx_node_no = #{UP_SYNTX_NODE_NO, jdbcType=VARCHAR},
            syntx_node_nm = #{SYNTX_NODE_NM},
            syntx_node_desc = #{SYNTX_NODE_DESC, jdbcType=VARCHAR},
            syntx_node_gbn = #{SYNTX_NODE_GBN},
            ordr = ${ORDR},
            repeat_yn = #{REPEAT_YN, jdbcType=VARCHAR},
            var_id = #{VAR_ID},
            syntx_node_ordr_gbn = #{SYNTX_NODE_ORDR_GBN, jdbcType=VARCHAR}
        </set>
         WHERE syntx_id = #{SYNTX_ID}
           AND syntx_node_no = #{SYNTX_NODE_NO}
    </update>

    <delete id="deleteDDLStru" parameterType="hashmap">
        /* mng.deleteDDLStru */
        DELETE FROM mdb_ddl_stru
         WHERE syntx_id = #{SYNTX_ID}
           AND syntx_node_no IN ( SELECT syntx_node_no FROM mdb_ddl_stru
                                   WHERE syntx_id = #{SYNTX_ID}
                                     AND syntx_node_no = #{SYNTX_NODE_NO}
                                   UNION ALL
                                  SELECT syntx_node_no FROM mdb_ddl_stru
                                   WHERE syntx_id = #{SYNTX_ID}
                                     AND up_syntx_node_no = #{SYNTX_NODE_NO})
    </delete>

    <insert id="insertDDLVar" parameterType="hashmap">
        /* mng.insertDDLVar */
        <selectKey keyProperty="VAR_ID" resultType="string" order="BEFORE">
            SELECT NVL(MAX(TO_NUMBER(var_id)), 0) + 1 max_var_id FROM mdb_ddl_var
        </selectKey>
        INSERT INTO mdb_ddl_var (var_id, var_nm, var_desc, bind_sql)
        VALUES (#{VAR_ID}, #{VAR_NM, jdbcType=VARCHAR}, #{VAR_DESC, jdbcType=VARCHAR}, #{BIND_SQL, jdbcType=VARCHAR})
    </insert>

    <update id="updateDDLVar" parameterType="hashmap">
        /* mng.updateDDLVar */
        UPDATE mdb_ddl_var
        <set>
            var_nm = #{VAR_NM, jdbcType=VARCHAR},
            var_desc = #{VAR_DESC, jdbcType=VARCHAR},
            bind_sql = #{BIND_SQL, jdbcType=VARCHAR}
        </set>
         WHERE var_id = #{VAR_ID}
    </update>

    <delete id="deleteDDLVar" parameterType="hashmap">
        /* mng.deleteDDLVar */
        DELETE FROM mdb_ddl_var
         WHERE var_id IN
        <foreach item="item" collection="RECORDS" open="(" separator="," close=")">
            #{item}
        </foreach>
    </delete>

	<select id="getCheckMappingVariable" parameterType="hashmap" resultType="encore.meta.mybatis.UpperKeyMap">
        /* mng.getCheckMappingVariable */
        SELECT var_id, count(1) cnt
          FROM mdb_ddl_stru
         WHERE var_id IN
         <foreach item="item" collection="RECORDS" open="(" separator="," close=")">
            #{item}
         </foreach>
         GROUP BY var_id
         ORDER BY var_id
    </select>

	<select id="getGapDataTypeList" parameterType="hashmap" resultType="encore.meta.mybatis.UpperKeyMap">
     /* mng.getGapDataTypeList */
         <include refid="pagingHeader"/>
         SELECT map.dbms_type_cd
              , db.cd_nm as dbms_type_nm
              , map.data_type_cd
              , log.cd_nm as logic_data_type_nm
              , map.data_type_nm as physic_data_type_nm
              , map.len_yn
              , map.dflt_precision
              , map.dflt_scale
              , map.dflt_len
              , map.char_yn
              , COUNT(1) OVER() total_row_count
           FROM ms_code log
              , ms_code db
              , mdb_gap_data_type_rule_base map
          WHERE log.lang_cd = #{langCd}
            AND log.up_cd_id = '0101'
            AND map.data_type_cd(+) = log.cd_id
            AND db.cd_id(+) = map.dbms_type_cd
            AND db.lang_cd(+) = #{langCd}
            AND db.up_cd_id(+) = '0001'
        <if test="@Ognl@isNotEmpty(DBMS_TYPE_CD)">
            AND map.dbms_type_cd(+) = #{DBMS_TYPE_CD}
        </if>
        <if test="@Ognl@isNotEmpty(DATA_TYPE_CD)">
            AND map.data_type_cd(+) = #{DATA_TYPE_CD}
        </if>
        <if test="@Ognl@isNotEmpty(LEN_YN)">
            AND map.len_yn(+) = #{LEN_YN}
        </if>
        <if test="@Ognl@isNotEmpty(CHAR_YN)">
            AND map.char_yn(+) = #{CHAR_YN}
        </if>
       ORDER BY map.dbms_type_cd, map.data_type_cd
       <include refid="pagingFooter"/>
    </select>

	<select id="getVerificationDataType" parameterType="hashmap" resultType="encore.meta.mybatis.UpperKeyMap">
     /* mng.getVerificationDataType */
         SELECT r.dbms_type_cd
              , m.cd_nm as dbms_type_nm
              , r.data_type_cd
              , l.cd_nm as logic_data_type_nm
              , r.data_type_nm as physic_data_type_nm
              , r.len_yn
              , r.dflt_precision
              , r.dflt_scale
              , r.dflt_len
              , r.char_yn
           FROM mdb_gap_data_type_rule_base r
              , ms_code m , ms_code l
          WHERE r.dbms_type_cd = m.cd_id
            AND r.data_type_cd = l.cd_id
            AND m.lang_cd = #{langCd}
            AND l.lang_cd = #{langCd}
            AND m.up_cd_id = '0001'
            AND l.up_cd_id = '0101'
        <if test="@Ognl@isNotEmpty(DBMS_TYPE_CD)">
            AND r.dbms_type_cd = #{DBMS_TYPE_CD}
        </if>
        <if test="@Ognl@isNotEmpty(DATA_TYPE_CD)">
            AND r.data_type_cd = #{DATA_TYPE_CD}
        </if>
    </select>

    <insert id="insertGapDataType" parameterType="hashmap">
     /* mng.insertGapPhysicalDataType */
         INSERT INTO mdb_gap_data_type_rule_base
            (DBMS_TYPE_CD, DATA_TYPE_CD, DATA_TYPE_NM, LEN_YN,
             DFLT_PRECISION, DFLT_SCALE, DFLT_LEN, CHAR_YN)
         VALUES
            (#{DBMS_TYPE_CD}, #{DATA_TYPE_CD}, #{PHYSIC_DATA_TYPE_NM}, #{LEN_YN},
             #{DFLT_PRECISION}, #{DFLT_SCALE}, #{DFLT_LEN}, #{CHAR_YN})
    </insert>

    <update id="updateGapDataType" parameterType="hashmap">
     /* mng.deleteGapPhysicalDataType */
         UPDATE mdb_gap_data_type_rule_base
            SET DATA_TYPE_NM = #{PHYSIC_DATA_TYPE_NM}
              , LEN_YN = #{LEN_YN}
              , DFLT_PRECISION = #{DFLT_PRECISION}
              , DFLT_SCALE = #{DFLT_SCALE}
              , DFLT_LEN = #{DFLT_LEN}
              , CHAR_YN = #{CHAR_YN}
         WHERE dbms_type_cd = #{DBMS_TYPE_CD}
           AND data_type_cd = #{DATA_TYPE_CD}
    </update>

    <delete id="deleteGapDataType" parameterType="hashmap">
     /* mng.deleteGapPhysicalDataType */
         DELETE FROM mdb_gap_data_type_rule_base
         WHERE dbms_type_cd = #{DBMS_TYPE_CD}
           AND data_type_cd = #{DATA_TYPE_CD}
    </delete>

    <!-- 모델검사 관리 START -->
	<select id="getModelCheckItemList" parameterType="hashmap" resultType="encore.meta.mybatis.UpperKeyMap" >
        /* mng.getModelCheckItemList */
        SELECT mi.chk_item_id
             , mi.chk_item_nm
             , mi.chk_item_desc
             , mi.chk_obj_gbn_cd
             , mi.prod_gbn
             , mi.dft_val1
             , mi.dft_val2
             , mi.dft_val3
             , mi.dft_val4
             , mi.dft_val5
             , mi.use_yn
             , mi.vrfy_sql
             , CASE WHEN ma.chk_item_id IS NOT NULL THEN 'Y' END AS root_item
          FROM mdl_chk_item mi
          LEFT OUTER JOIN mdl_chk_area ma
            ON ma.chk_item_id = mi.chk_item_id
           AND ma.area_id = 'ROOT'
           AND ma.use_yn = 'Y'
         WHERE mi.prod_gbn = #{repositoryVer}
         ORDER BY mi.chk_item_nm
    </select>

    <delete id="deleteModelCheckAreaForRoot" parameterType="hashmap">
       /* mng.deleteModelCheckAreaForRoot */
       DELETE FROM mdl_chk_area
        WHERE chk_item_id = #{CHK_ITEM_ID}
          AND area_id = #{TGT_AREA_ID}
    </delete>

    <insert id="insertModelCheckArea" parameterType="hashmap">
        /*mng.insertModelCheckArea*/
        INSERT INTO mdl_chk_area (CHK_ITEM_ID, CHK_ITEM_NM, AREA_ID, USE_YN)
        VALUES (#{CHK_ITEM_ID}, #{CHK_ITEM_NM}, #{TGT_AREA_ID}, #{NEW_USE_YN})
    </insert>

    <update id="updateMdlChkArea" parameterType="hashmap">
     /* mng.updateMdlChkArea */
         UPDATE mdl_chk_area
            SET USE_YN = #{NEW_USE_YN}
              , CHK_ITEM_NM = #{CHK_ITEM_NM}
         WHERE chk_item_id = #{CHK_ITEM_ID}
           AND area_id = #{TGT_AREA_ID}
    </update>
<!--
    <insert id="insertModelCheckArea" parameterType="hashmap">
    /* mng.insertModelCheckArea */
        MERGE INTO mdl_chk_area m
        USING ( SELECT #{CHK_ITEM_ID} AS chk_item_id
                     , #{CHK_ITEM_NM} AS chk_item_nm
                     , #{AREA_ID} AS area_id
                     , #{USE_YN} AS use_yn
                  FROM dual ) p
           ON ( m.chk_item_id = p.chk_item_id
            AND m.area_id = p.area_id)
         WHEN MATCHED THEN
            UPDATE
               SET m.use_yn = p.use_yn
         WHEN NOT MATCHED THEN
            INSERT
                (CHK_ITEM_ID, CHK_ITEM_NM, AREA_ID, USE_YN)
            VALUES
                (p.chk_item_id, p.chk_item_nm, p.area_id, p.use_yn)

    </insert> -->

    <insert id="insertModelCheckItem" parameterType="hashmap">
    /* mng.insertModelCheckItem */
        INSERT INTO mdl_chk_item
            (CHK_ITEM_ID, CHK_ITEM_NM, CHK_ITEM_DESC, CHK_OBJ_GBN_CD, VRFY_SQL, USE_YN, PROD_GBN)
           VALUES ((select uuid_generate_v4()::text),
                   #{CHK_ITEM_NM}, #{CHK_ITEM_DESC}, '9999', #{VRFY_SQL, jdbcType=VARCHAR}, #{USE_YN}, #{PROD_GBN})
    </insert>

    <update id="updateModelCheckItem" parameterType="hashmap">
        /*    mng.updateModelCheckItem */
        UPDATE mdl_chk_item
        <set>
            <if test="@Ognl@isNotEmpty(CHK_ITEM_ID)">chk_item_id = #{CHK_ITEM_ID},</if>
            <if test="@Ognl@isNotEmpty(CHK_ITEM_NM)">chk_item_nm = #{CHK_ITEM_NM},</if>
            <if test="@Ognl@isNotEmpty(CHK_ITEM_DESC)">chk_item_desc = #{CHK_ITEM_DESC},</if>
            <if test="@Ognl@isNotEmpty(VRFY_SQL)">vrfy_sql = #{VRFY_SQL},</if>
            <if test="@Ognl@isNotEmpty(USE_YN)">use_yn = #{USE_YN}</if>
        </set>
         WHERE chk_item_id = #{CHK_ITEM_ID}
    </update>

    <delete id="deleteModelCheckItem" parameterType="hashmap">
       /* mng.deleteModelCheckItem */
       DELETE FROM mdl_chk_item
        WHERE chk_item_id = #{CHK_ITEM_ID}
    </delete>

	<select id="getModelCheckAreaList" parameterType="hashmap" resultType="encore.meta.mybatis.UpperKeyMap">
        /* mng.getModelCheckAreaList */       
        <if test="@Ognl@isEmpty(AREA_ID)">
            select * from mdl_chk_area where area_id = #{AREA_ID}
        </if>

        <if test="@Ognl@isNotEmpty(AREA_ID)">
        SELECT r.* FROM
            (SELECT ma.chk_item_id
                     , ma.chk_item_nm
                     , ma.use_yn
                     , ma.area_id
                     <if test="PROD_GBN == &quot;da5&quot;">
                     , COALESCE(nullif(MD_ETC_V5_get_area_path_nm(ma.area_id, ' > '),''), GET_TERM(#{langCd}, 'label.all')) stru_nm_all
                     </if>
                     <if test="PROD_GBN == &quot;da4&quot;">
                     , COALESCE((MD_ETC_get_area_nm(ma.area_id, ' > ')), GET_TERM(#{langCd}, 'label.all')) stru_nm_all
                     </if>
                FROM  mdl_chk_area ma , mdl_chk_item mi
                WHERE
                <if test="PROD_GBN == &quot;da5&quot;">
                exists (
                    select stru_id from (
                    	with recursive cte as (
                    		with t as (
                                   SELECT a.stru_id
                                        , COALESCE(nullif(a.upr_stru_id,''), 'ROOT') upr_stru_id
                                     FROM dam_mdl_container a
                                        LEFT OUTER JOIN dam_stru_ord b
                                          ON b.stru_id = a.stru_id
                                          AND b.aval_end_dt = '99991231235959'
                                        WHERE a.aval_end_dt = '99991231235959')
                            SELECT t.*
                                , stru_id::text stru_id_all
                              from t
                              where stru_id = #{AREA_ID}
                              union all
                              select t.*
                              	  , c.stru_id_all || ', '|| t.stru_id
                               from t join cte c
                                 on c.stru_id = t.upr_stru_id
                        ) select * from cte          
                                ) t2
                             where stru_id_all LIKE '%' || #{AREA_ID} || '%'
                             AND ma.area_id = stru_id                
                )
                </if>
                <if test="PROD_GBN == &quot;da4&quot;">
                exists (
                    select a_uid from (
                            SELECT a_uid
                                , substr(sys_connect_by_path(a_uid, ', '),2) stru_id_all
                              FROM(
                                      SELECT a.a_uid
                                                , COALESCE(a.p_uid, 'ROOT') p_uid
                                             FROM da_modelstru a
                                                LEFT OUTER JOIN da_model b
                                                  ON b.a_uid = a.a_uid
                                                  AND b.expireddate = '99999999999999'
                                                WHERE a.expireddate = '99999999999999')
                                                START WITH a_uid = #{AREA_ID}
                                                CONNECT BY PRIOR p_uid = a_uid
                                )
                             where stru_id_all LIKE '%' || #{AREA_ID} || '%'
                             AND ma.area_id = a_uid
                )
                </if>
                OR ma.area_id ='ROOT'
                AND ma.chk_item_id = mi.chk_item_id
                AND mi.use_yn = 'Y'
                AND mi.prod_gbn = #{PROD_GBN}
                GROUP BY ma.chk_item_nm, ma.chk_item_id, ma.use_yn, ma.area_id
                ORDER BY chk_item_nm) r
            WHERE use_yn = 'Y'
        </if>
    </select>

<!--deprecated
    <delete id="insertDeleteModelCheckArea" parameterType="hashmap">
        /* mng.insertDeleteModelCheckArea */
       <if test="AREA_ID == &quot;ROOT&quot;">
           DELETE FROM mdl_chk_area WHERE chk_item_id = #{CHK_ITEM_ID} AND area_id != #{AREA_ID}
      </if>

      <if test="AREA_ID != &quot;ROOT&quot;">
        DELETE FROM mdl_chk_area
              WHERE area_id IN (
                    <if test="PROD_GBN == &quot;da4&quot;">
                      SELECT ma.area_id
                        FROM (
                            SELECT a_uid
                            , substr(sys_connect_by_path(a_uid, ', '),2) stru_id_all
                          FROM(
                               SELECT a.a_uid
                                       , NVL(a.p_uid, 'ROOT') p_uid
                                      FROM da_modelstru a
                                     LEFT OUTER JOIN da_model b
                                       ON b.a_uid = a.a_uid
                                       AND b.expireddate = '99999999999999'
                                     WHERE a.expireddate = '99999999999999')
                                     START WITH a_uid = #{AREA_ID}
                                     CONNECT BY PRIOR a_uid = p_uid
                                )m , mdl_chk_area ma
                       WHERE ma.area_id = m.a_uid(+)
                       AND stru_id_all LIKE '%' || #{AREA_ID} || '%'
                       AND ma.chk_item_id = #{CHK_ITEM_ID}
                       GROUP BY area_id
                       )
                    </if>
                    <if test="PROD_GBN == &quot;da5&quot;">
                      SELECT ma.area_id
                       FROM (
                           SELECT stru_id
                           , substr(sys_connect_by_path(stru_id, ', '),2) stru_id_all
                         FROM(
                              SELECT a.stru_id
                                       , NVL(a.upr_stru_id, 'ROOT') upr_stru_id
                                     FROM dam_mdl_container a
                                    LEFT OUTER JOIN dam_stru_ord b
                                      ON b.stru_id = a.stru_id
                                      AND b.aval_end_dt = '99991231235959'
                                    WHERE a.aval_end_dt = '99991231235959')
                                    START WITH stru_id = #{AREA_ID}
                                    CONNECT BY PRIOR stru_id = upr_stru_id
                               )m , mdl_chk_area ma
                            WHERE ma.area_id = m.stru_id(+)
                            AND stru_id_all LIKE '%' || #{AREA_ID} || '%'
                            AND ma.chk_item_id = #{CHK_ITEM_ID}
                            GROUP BY area_id
                        )
                    </if>
                AND chk_item_id = #{CHK_ITEM_ID}
                AND area_id != #{AREA_ID}
      </if>

    </delete> -->

    <delete id="deleteModelCheckArea" parameterType="hashmap">
       /* mng.deleteModelCheckArea */
           DELETE FROM mdl_chk_area
            WHERE chk_item_id = #{CHK_ITEM_ID}
              AND area_id = #{TGT_AREA_ID}
           <if test="NEW_USE_YN.equals('Y')">
              AND use_yn = 'N'
           </if>
           <if test="NEW_USE_YN.equals('N')">
              AND use_yn = 'Y'
           </if>
    </delete>

    <!-- 모델검사 관리 END -->

    <!-- 표준분류/코드그룹 권한 관리 START -->

    <select id='getStdAreaAssignItem' parameterType="hashmap" resultType="hashmap">
        /* mng.getStdAreaAssignItem */
        SELECT (SELECT user_nm FROM usr_user usr WHERE us.user_id  = usr.user_id) user_nm
           , (SELECT dept_nm FROM usr_dept udt WHERE us.dept_id  = udt.dept_id) dept_nm
           <if test="ALLOC_GBN_CD.equals('0010')"> <!-- 표준분류ID -->
           , (SELECT std_area_nm FROM std_area std WHERE us.alloc_id = std.std_area_id AND aval_end_dt = '99991231235959') std_area_nm
           , null cd_area_nm
           </if>
           <if test="ALLOC_GBN_CD.equals('0011')"> <!-- 코드그룹ID -->
           , (SELECT std_area_nm
                FROM std_area std
               WHERE std_area_id = (SELECT DISTINCT std_area_id
                                      FROM std_cd_area c
                                     WHERE us.alloc_id = c.cd_area_id
                                       AND aval_end_dt = '99991231235959')
                 AND aval_end_dt = '99991231235959') std_area_nm
           , (SELECT cd_area_nm FROM std_cd_area c WHERE us.alloc_id = c.cd_area_id AND aval_end_dt = '99991231235959') cd_area_nm
           </if>
           , user_id
           , alloc_id
           , dept_id
           FROM usr_alloc us
         WHERE alloc_id = #{ALLOC_ID}
           AND alloc_gbn_cd = #{ALLOC_GBN_CD}
           AND end_dt = '99991231'
           ORDER BY user_nm
    </select>

    <insert id='insertStdAreaAssignItem' parameterType="hashmap">
    MERGE INTO usr_alloc
      USING DUAL
            <if test="@Ognl@isNotEmpty(DEPT_ID)">
              ON (USER_ID = #{USER_ID} AND ALLOC_ID = #{ALLOC_ID} AND DEPT_ID = #{DEPT_ID} AND ALLOC_GBN_CD = #{ALLOC_GBN_CD}
                  <if test="@Ognl@isNotEmpty(BIZ_ID)">
                  AND BIZ_ID = #{BIZ_ID}
                  </if>
              )
            </if>
            <if test="@Ognl@isEmpty(DEPT_ID)">
              ON (USER_ID = #{USER_ID} AND ALLOC_ID = #{ALLOC_ID} AND ALLOC_GBN_CD = #{ALLOC_GBN_CD}
                  <if test="@Ognl@isNotEmpty(BIZ_ID)">
                  AND BIZ_ID = #{BIZ_ID}
                  </if>
              )
            </if>
      WHEN NOT MATCHED THEN
        INSERT
            (USER_ID, ALLOC_ID, ALLOC_GBN_CD, START_DT, END_DT, PRIV_BIZ_GBN_CD, PRV_GBN, DEPT_ID, BIZ_ID)
        VALUES
            (#{USER_ID}, #{ALLOC_ID}, #{ALLOC_GBN_CD}, TO_CHAR(SYSDATE,'yyyymmdd'), '99991231', '', '', #{DEPT_ID, jdbcType=VARCHAR}, NVL(#{BIZ_ID, jdbcType=VARCHAR},'NONE'))

    </insert>

    <select id="getHighDept"  parameterType="hashmap" resultType="int">
     with v as (
	    	with recursive cte as (
	    		select a.*  FROM usr_dept a
	             where dept_id = :DEPT_ID/*#{DEPT_ID}*/
	            union all
	            select a.* from usr_dept a
	              join cte c
	                on a.dept_id = c.up_dept_id
	    	) select distinct dept_id from cte where dept_id != :DEPT_ID/*#{DEPT_ID}*/
    	)
        SELECT COUNT(*) dept_count
          FROM usr_alloc
         WHERE alloc_id = :ALLOC_ID/*#{ALLOC_ID}*/
           AND alloc_gbn_cd = :ALLOC_GBN_CD/*#{ALLOC_GBN_CD}*/
           AND dept_id IN (SELECT dept_id FROM v  )
    </select>

	<select id="getLowDept" parameterType="hashmap" resultType="encore.meta.mybatis.UpperKeyMap">
 	 with recursive cte as (
        	select a.dept_id, a.up_dept_id
        	  from usr_dept a
        	 where dept_id = #{DEPT_ID}
        	union all
        	select a.dept_id, a.up_dept_id
        	  from usr_dept a
        	  join cte c 
        	    on a.up_dept_id = c.dept_id
        )	    
        SELECT DISTINCT dept_id
		 FROM cte
         WHERE dept_id != #{DEPT_ID}
    </select>

    <delete id='deleteStdAreaAssignItem' parameterType="hashmap">
        DELETE FROM usr_alloc
         WHERE alloc_id = #{ALLOC_ID}
            AND USER_ID = #{USER_ID}
            AND ALLOC_GBN_CD = #{ALLOC_GBN_CD}
        <if test="@Ognl@isNotEmpty(DEPT_ID)">
            AND dept_id = #{DEPT_ID}
        </if>
        <if test="@Ognl@isNotEmpty(BIZ_ID)">
            AND biz_id = #{BIZ_ID}
        </if>
    </delete>

    <!-- 표준분류/코드그룹 권한 관리 END -->

    <!-- DA#5 지원 START ################################################ -->
    <sql id="publicSignSteps5">
        SELECT a.sign_line_id, a.sign_line_nm, a.sign_line_desc, a.aval_st_dt
             , b.sign_seq, b.sign_step_gbn_cd, b.signee_gbn_cd
             , b.sign_mthd_gbn AS signer_gbn, b.signer_id, c.user_nm AS signer_nm, c.post
             , (SELECT dept_nm FROM usr_dept WHERE dept_id = c.dept_id) AS dept_nm
             , b.signer_dept_id, b.last_appr_yn, b.doc_mod_prv_yn, b.line_mod_prv_yn
             , b.bypass_yn
             , DECODE(d.sign_tgt_gbn_cd, '7001', (SELECT udp_grp_nm FROM md_udp_grp WHERE udp_grp_id = d.sign_sub_tgt_gbn)
                                               , (SELECT cd_nm FROM ms_code WHERE up_cd_id = '9001' AND cd_id = sign_tgt_gbn_cd AND lang_cd = #{langCd})) as sign_tgt_gbn
             , d.sign_sub_tgt_gbn, d.sign_tgt_gbn_cd || d.sign_sub_tgt_gbn as sign_tgt_gbn_cd, d.tgt_obj_gbn, d.tgt_area_id
             , CASE d.tgt_obj_gbn
                    WHEN 'STD'
                        THEN DECODE(d.tgt_area_id, 'ROOT', GET_TERM(#{langCd}, 'label.all'), (SELECT std_area_nm FROM std_area WHERE std_area_id = d.tgt_area_id AND aval_end_dt = '99991231235959'))
                    WHEN 'MDL'
                        THEN DECODE(d.tgt_area_id, 'ROOT', GET_TERM(#{langCd}, 'label.all'), MD_ETC_V5.GET_AREA_PATH_NM(d.tgt_area_id, ' > '))
                    WHEN 'DB'
                        THEN DECODE(d.tgt_area_id, 'ROOT', GET_TERM(#{langCd}, 'label.all'), (SELECT DB_NM || '>' || SUBSTR(d.tgt_area_id, INSTR(d.tgt_area_id,'.',1,3) + 1) FROM MD_DB WHERE SVR_ID || '.' || INST_ID || '.' || DB_ID = SUBSTR(d.tgt_area_id, 0, INSTR(d.tgt_area_id,'.',1,3)-1)))
                    WHEN 'DQ'
                        THEN DECODE(d.tgt_area_id, 'ROOT', GET_TERM(#{langCd}, 'label.all'), MD_ETC.GET_MDQ_AREA_NM(d.tgt_area_id, ' > '))
        <if test="@encore.meta.data.DatawareConfigData@getProperty(&quot;common.installedDF&quot;).equals(&quot;Y&quot;)">
                    /* DATAFLOW 결재라인으로 인해 추가함. START */
                    WHEN 'DF'
                        THEN DECODE(d.tgt_area_id, 'ROOT', GET_TERM(#{langCd}, 'label.all'), GET_SIGN_AREA_NM(d.tgt_area_id, ' > '))
                    /* DATAFLOW 결재라인으로 인해 추가함. END */
        </if>
                    ELSE ''
                END tgt_area_nm
          FROM msg_line a
             , msg_step b
             , usr_user c
             , msg_target d
         WHERE a.aval_end_dt = '99991231235959'
           AND b.sign_line_id = a.sign_line_id
           AND b.aval_end_dt = '99991231235959'
           AND b.sign_mthd_gbn = 'U'
           AND c.user_id = b.signer_id
           AND d.sign_line_id = a.sign_line_id
           AND d.aval_end_dt = '99991231235959'
        <if test="@Ognl@isNotEmpty(SIGN_TGT_GBN_CD)">
           AND d.sign_tgt_gbn_cd = #{SIGN_TGT_GBN_CD}
        </if>
        <if test="@Ognl@isNotEmpty(SIGN_SUB_TGT_GBN)">
           AND d.sign_sub_tgt_gbn = #{SIGN_SUB_TGT_GBN}
        </if>
        <if test="@Ognl@isNotEmpty(TGT_AREA_ID)">
           AND 'Y' = CASE WHEN d.tgt_area_id = 'ROOT' OR d.tgt_area_id = #{TGT_AREA_ID} THEN 'Y'
                          WHEN d.tgt_obj_gbn = 'MDL' AND INSTR(MD_ETC_V5.GET_AREA_ID(#{TGT_AREA_ID}), d.tgt_area_id) > 0 THEN 'Y'
                          WHEN d.tgt_obj_gbn = 'DQ' AND INSTR(MD_ETC.GET_MDQ_AREA_ID(#{TGT_AREA_ID}), d.tgt_area_id) > 0 THEN 'Y'
                      END
        </if>
           AND a.user_id IS NULL
         UNION ALL
        SELECT a.sign_line_id, a.sign_line_nm, a.sign_line_desc, a.aval_st_dt
             , b.sign_seq, b.sign_step_gbn_cd, b.signee_gbn_cd
             , b.sign_mthd_gbn AS signer_gbn, b.signer_id, c.dept_nm AS signer_nm, '' post
             , c.dept_nm
             , b.signer_dept_id, b.last_appr_yn, b.doc_mod_prv_yn, b.line_mod_prv_yn
             , b.bypass_yn
             , DECODE(d.sign_tgt_gbn_cd, '7001', (SELECT udp_grp_nm FROM md_udp_grp WHERE udp_grp_id = d.sign_sub_tgt_gbn)
                                               , (SELECT cd_nm FROM ms_code WHERE up_cd_id = '9001' AND cd_id = sign_tgt_gbn_cd AND lang_cd = #{langCd})) as sign_tgt_gbn
             , d.sign_sub_tgt_gbn, d.sign_tgt_gbn_cd || d.sign_sub_tgt_gbn as sign_tgt_gbn_cd, d.tgt_obj_gbn, d.tgt_area_id
             , CASE d.tgt_obj_gbn
                    WHEN 'STD'
                        THEN DECODE(d.tgt_area_id, 'ROOT', GET_TERM(#{langCd}, 'label.all'), (SELECT std_area_nm FROM std_area WHERE std_area_id = d.tgt_area_id AND aval_end_dt = '99991231235959'))
                    WHEN 'MDL'
                        THEN DECODE(d.tgt_area_id, 'ROOT', GET_TERM(#{langCd}, 'label.all'), MD_ETC_V5.GET_AREA_PATH_NM(d.tgt_area_id, ' > '))
                    WHEN 'DB'
                        THEN DECODE(d.tgt_area_id, 'ROOT', GET_TERM(#{langCd}, 'label.all'), (SELECT DB_NM || '>' || SUBSTR(d.tgt_area_id, INSTR(d.tgt_area_id,'.',1,3) + 1) FROM MD_DB WHERE SVR_ID || '.' || INST_ID || '.' || DB_ID = SUBSTR(d.tgt_area_id, 0, INSTR(d.tgt_area_id,'.',1,3)-1)))
                    WHEN 'DQ'
                        THEN DECODE(d.tgt_area_id, 'ROOT', GET_TERM(#{langCd}, 'label.all'), (SELECT biz_name FROM mdq_bizarea WHERE biz_id = d.tgt_area_id AND expireddate = '99991231235959'))
        <if test="@encore.meta.data.DatawareConfigData@getProperty(&quot;common.installedDF&quot;).equals(&quot;Y&quot;)">
                    /* DATAFLOW 결재라인으로 인해 추가함. START */
                    WHEN 'DF'
                        THEN DECODE(d.tgt_area_id, 'ROOT', GET_TERM(#{langCd}, 'label.all'), GET_SIGN_AREA_NM(d.tgt_area_id, ' > '))
                    /* DATAFLOW 결재라인으로 인해 추가함. END */
        </if>
                    ELSE ''
                END tgt_area_nm
          FROM msg_line a
             , msg_step b
             , usr_dept c
             , msg_target d
         WHERE a.aval_end_dt = '99991231235959'
           AND b.sign_line_id = a.sign_line_id
           AND b.aval_end_dt = '99991231235959'
           AND b.sign_mthd_gbn = 'G'
           AND c.dept_id = b.signer_id
           AND d.sign_line_id = a.sign_line_id
           AND d.aval_end_dt = '99991231235959'
        <if test="@Ognl@isNotEmpty(SIGN_TGT_GBN_CD)">
           AND d.sign_tgt_gbn_cd = #{SIGN_TGT_GBN_CD}
        </if>
        <if test="@Ognl@isNotEmpty(SIGN_SUB_TGT_GBN)">
           AND d.sign_sub_tgt_gbn = #{SIGN_SUB_TGT_GBN}
        </if>
        <if test="@Ognl@isNotEmpty(TGT_AREA_ID)">
           AND 'Y' = CASE WHEN d.tgt_area_id = 'ROOT' OR d.tgt_area_id = #{TGT_AREA_ID} THEN 'Y'
                          WHEN d.tgt_obj_gbn = 'MDL' AND INSTR(MD_ETC_V5.GET_AREA_ID(#{TGT_AREA_ID}), d.tgt_area_id) > 0 THEN 'Y'
                          WHEN d.tgt_obj_gbn = 'DQ' AND INSTR(MD_ETC.GET_MDQ_AREA_ID(#{TGT_AREA_ID}), d.tgt_area_id) > 0 THEN 'Y'
                      END
        </if>
           AND a.user_id IS NULL
         UNION ALL
        SELECT a.sign_line_id, a.sign_line_nm, a.sign_line_desc, a.aval_st_dt
             , b.sign_seq, b.sign_step_gbn_cd, b.signee_gbn_cd
             , b.sign_mthd_gbn AS signer_gbn, b.signer_id, c.role_nm AS signer_nm, '' post
             , '' dept_nm
             , b.signer_dept_id, b.last_appr_yn, b.doc_mod_prv_yn, b.line_mod_prv_yn
             , b.bypass_yn
             , DECODE(d.sign_tgt_gbn_cd, '7001', (SELECT udp_grp_nm FROM md_udp_grp WHERE udp_grp_id = d.sign_sub_tgt_gbn)
                                               , (SELECT cd_nm FROM ms_code WHERE up_cd_id = '9001' AND cd_id = sign_tgt_gbn_cd AND lang_cd = #{langCd})) as sign_tgt_gbn
             , d.sign_sub_tgt_gbn, d.sign_tgt_gbn_cd || d.sign_sub_tgt_gbn as sign_tgt_gbn_cd, d.tgt_obj_gbn, d.tgt_area_id
             , CASE d.tgt_obj_gbn
                    WHEN 'STD'
                        THEN DECODE(d.tgt_area_id, 'ROOT', GET_TERM(#{langCd}, 'label.all'), (SELECT std_area_nm FROM std_area WHERE std_area_id = d.tgt_area_id AND aval_end_dt = '99991231235959'))
                    WHEN 'MDL'
                        THEN DECODE(d.tgt_area_id, 'ROOT', GET_TERM(#{langCd}, 'label.all'), MD_ETC_V5.GET_AREA_PATH_NM(d.tgt_area_id, ' > '))
                    WHEN 'DB'
                        THEN DECODE(d.tgt_area_id, 'ROOT', GET_TERM(#{langCd}, 'label.all'), (SELECT DB_NM || '>' || SUBSTR(d.tgt_area_id, INSTR(d.tgt_area_id,'.',1,3) + 1) FROM MD_DB WHERE SVR_ID || '.' || INST_ID || '.' || DB_ID = SUBSTR(d.tgt_area_id, 0, INSTR(d.tgt_area_id,'.',1,3)-1)))
                    WHEN 'DQ'
                        THEN DECODE(d.tgt_area_id, 'ROOT', GET_TERM(#{langCd}, 'label.all'), (SELECT biz_name FROM mdq_bizarea WHERE biz_id = d.tgt_area_id AND expireddate = '99991231235959'))
        <if test="@encore.meta.data.DatawareConfigData@getProperty(&quot;common.installedDF&quot;).equals(&quot;Y&quot;)">
                    /* DATAFLOW 결재라인으로 인해 추가함. START */
                    WHEN 'DF'
                        THEN DECODE(d.tgt_area_id, 'ROOT', GET_TERM(#{langCd}, 'label.all'), GET_SIGN_AREA_NM(d.tgt_area_id, ' > '))
                    /* DATAFLOW 결재라인으로 인해 추가함. END */
        </if>
                    ELSE ''
                END tgt_area_nm
          FROM msg_line a
             , msg_step b
             , usr_role c
             , msg_target d
         WHERE a.aval_end_dt = '99991231235959'
           AND b.sign_line_id = a.sign_line_id
           AND b.aval_end_dt = '99991231235959'
           AND b.sign_mthd_gbn = 'R'
           AND c.role_id = b.signer_id
           AND d.sign_line_id = a.sign_line_id
           AND d.aval_end_dt = '99991231235959'
        <if test="@Ognl@isNotEmpty(SIGN_TGT_GBN_CD)">
           AND d.sign_tgt_gbn_cd = #{SIGN_TGT_GBN_CD}
        </if>
        <if test="@Ognl@isNotEmpty(SIGN_SUB_TGT_GBN)">
           AND d.sign_sub_tgt_gbn = #{SIGN_SUB_TGT_GBN}
        </if>
        <if test="@Ognl@isNotEmpty(TGT_AREA_ID)">
           AND 'Y' = CASE WHEN d.tgt_area_id = 'ROOT' OR d.tgt_area_id = #{TGT_AREA_ID} THEN 'Y'
                          WHEN d.tgt_obj_gbn = 'MDL' AND INSTR(MD_ETC_V5.GET_AREA_ID(#{TGT_AREA_ID}), d.tgt_area_id) > 0 THEN 'Y'
                          WHEN d.tgt_obj_gbn = 'DQ' AND INSTR(MD_ETC.GET_MDQ_AREA_ID(#{TGT_AREA_ID}), d.tgt_area_id) > 0 THEN 'Y'
                      END
        </if>
           AND a.user_id IS NULL
    </sql>

	<select id="getPublicSignSteps5" parameterType="hashmap" resultType="encore.meta.mybatis.UpperKeyMap">
        /* mng.getPublicSignSteps5 */
        SELECT x.*, 'PUBLIC' sign_line_type
          FROM (<include refid="publicSignSteps5" />) x
         WHERE 1=1
         <if test="@Ognl@isNotEmpty(SIGN_TGT_GBN)">
           AND SIGN_TGT_GBN_CD = #{SIGN_TGT_GBN}
         </if>
         <if test="@Ognl@isNotEmpty(SIGN_LINE_NM)">
           AND SIGN_LINE_NM LIKE '%' || #{SIGN_LINE_NM} || '%'
         </if>
         <if test="@Ognl@isNotEmpty(SIGNER_NM)">
           AND sign_line_id IN ( SELECT sign_line_id
                                   FROM usr_user u, msg_step s
                                  WHERE (u.user_nm = #{SIGNER_NM} OR u.login_id = #{SIGNER_NM})
                                    AND u.end_dt = '99991231'
                                    AND s.signer_id = u.user_id
                                    and s.sign_mthd_gbn = 'U'
                                    AND s.aval_end_dt = '99991231235959'
                                  UNION ALL
                                 SELECT sign_line_id
                                   FROM usr_dept d, msg_step s
                                  WHERE (dept_id IN ( SELECT dept_id
                                                       FROM usr_user
                                                      WHERE (user_nm = #{SIGNER_NM} OR login_id = #{SIGNER_NM})
                                                        AND end_dt = '99991231')
                                         OR dept_nm = #{SIGNER_NM}
                                        )
                                    AND d.del_yn = 'N'
                                    AND s.signer_id = d.dept_id
                                    and s.sign_mthd_gbn = 'G'
                                    AND s.aval_end_dt = '99991231235959'
                                   UNION ALL
                                  SELECT sign_line_id
                                    FROM usr_user u
                                   INNER JOIN usr_alloc a
                                      ON a.user_id = u.user_id
                                     AND a.alloc_gbn_cd = '0003'
                                     AND a.end_dt = '99991231'
                                   INNER JOIN usr_role r
                                      ON r.role_id = a.alloc_id
                                     AND r.role_type_cd = 'SIGN'
                                   INNER JOIN msg_step s
                                      ON s.signer_id = r.role_id
                                     AND s.sign_mthd_gbn = 'R'
                                     AND s.aval_end_dt = '99991231235959'
                                   WHERE (u.user_nm = #{SIGNER_NM} OR u.login_id = #{SIGNER_NM} OR role_nm = #{SIGNER_NM})
                )
         </if>
         ORDER BY
        <if test="@Ognl@isEmpty(TGT_AREA_ID)">
                  CASE WHEN x.tgt_area_id = 'ROOT' THEN 1 ELSE 0 END,
        </if>
        <if test="@Ognl@isNotEmpty(TGT_AREA_ID)">
                  CASE WHEN x.tgt_area_id = #{TGT_AREA_ID} THEN 10000
                       WHEN x.tgt_obj_gbn = 'MDL' THEN INSTR(MD_ETC_V5.GET_AREA_ID(#{TGT_AREA_ID}), x.tgt_area_id)
                       WHEN x.tgt_obj_gbn = 'DQ' THEN INSTR(MD_ETC.GET_MDQ_AREA_ID(#{TGT_AREA_ID}), x.tgt_area_id)
                       WHEN x.tgt_area_id = 'ROOT' THEN -1
                   END DESC,
        </if>
                  x.sign_line_nm, x.sign_line_id, x.sign_seq, x.signer_nm
    </select>
    <!-- DA#5 지원 END   ################################################ -->

	<select id="getUserJobGrp" parameterType="hashmap" resultType="encore.meta.mybatis.UpperKeyMap">
        /* mng.getUserJobGrp */
       SELECT grp.user_job_id
            , grp.user_job_nm
            , CASE WHEN obj.mng_yn='Y' THEN  'Y'  ELSE '' END  select_yn
         FROM mcs_user_job_grp grp
         LEFT OUTER JOIN md_mng_obj obj
           ON obj.job_id = #{JOB_ID, jdbcType=VARCHAR}
          AND obj.acct_id = grp.user_job_id
          AND obj.mng_yn = 'Y'
         ORDER BY grp.user_job_id
    </select>

	<select id="getUserJobGrpList" parameterType="hashmap" resultType="encore.meta.mybatis.UpperKeyMap">
        /* mnsg.getUserJobGrpList */
        SELECT user_job_id
             , user_job_nm
             , user_job_desc
          FROM mcs_user_job_grp
    </select>

    <insert id="insertUserJobGrp" parameterType="hashmap">
       /* mng.insertUserJobGrp */
        with upsert as (
        	SELECT #{USER_JOB_ID} user_job_id
                    , #{USER_JOB_NM} user_job_nm
                    , #{USER_JOB_DESC, jdbcType=VARCHAR} user_job_desc
        ), update_option as (
        	update mcs_user_job_grp m
        	   SET user_job_nm = s.user_job_nm
                 , user_job_desc = s.user_job_desc
             from upsert s
            where s.user_job_id = m.user_job_id
        )
        INSERT INTO mcs_user_job_grp (user_job_id, user_job_nm, user_job_desc)
        select uuid_generate_v4()::text, #{USER_JOB_NM}, #{USER_JOB_DESC, jdbcType=VARCHAR}
          from upsert s
         where not exists (select 1 from mcs_user_job_grp m where s.user_job_id = m.user_job_id)
    </insert>

    <delete id="deleteUserJobGrp" statementType="CALLABLE" parameterType="hashmap">
        /* mng.insertUserJobGrp */
        DECLARE
        BEGIN

            DELETE FROM mcs_user_job_grp WHERE user_job_id = #{USER_JOB_ID};

            DELETE FROM mcs_user_job_sql WHERE user_job_id = #{USER_JOB_ID};

        END;
    </delete>

	<select id="getUserJobSqlList" parameterType="hashmap" resultType="encore.meta.mybatis.UpperKeyMap">        /* mng.getUserJobSqlList */
        SELECT user_job_id
             , trgt_seq
             , db_type
             , use_yn
             , trgt_table_name
             , dtl_job_desc
             , select_sql
             , insert_sql
          FROM mcs_user_job_sql
         WHERE user_job_id = #{USER_JOB_ID}
    </select>

    <insert id="insertUserJobSql" parameterType="hashmap">
        /* mng.insertUserJobSql */
        MERGE INTO mcs_user_job_sql m
        USING (SELECT #{USER_JOB_ID} user_job_id
                    , #{TRGT_SEQ} trgt_seq
                    , #{DB_TYPE} db_type
                    , #{USE_YN} use_yn
                    , #{TRGT_TABLE_NAME} trgt_table_name
                    , #{DTL_JOB_DESC, jdbcType=VARCHAR} dtl_job_desc
                    , #{SELECT_SQL, jdbcType=VARCHAR} select_sql
                    , #{INSERT_SQL, jdbcType=VARCHAR} insert_sql
                 FROM dual) s
           ON (    s.user_job_id = m.user_job_id
               AND s.trgt_seq = m.trgt_seq)
         WHEN MATCHED THEN
            UPDATE
               SET db_type = s.db_type
                 , use_yn = s.use_yn
                 , trgt_table_name = s.trgt_table_name
                 , dtl_job_desc = s.dtl_job_desc
                 , select_sql = s.select_sql
                 , insert_sql = s.insert_sql
         WHEN NOT MATCHED THEN
            INSERT
                (user_job_id,
                 trgt_seq,
                 db_type, use_yn, trgt_table_name, dtl_job_desc, select_sql, insert_sql)
            VALUES
                (#{USER_JOB_ID},
                 (SELECT NVL(MAX(trgt_seq) + 1, 1) FROM mcs_user_job_sql WHERE user_job_id = #{USER_JOB_ID}),
                 #{DB_TYPE}, #{USE_YN}, #{TRGT_TABLE_NAME}, #{DTL_JOB_DESC, jdbcType=VARCHAR}, #{SELECT_SQL, jdbcType=VARCHAR}, #{INSERT_SQL, jdbcType=VARCHAR})
    </insert>

    <delete id="deleteUserJobSql" parameterType="hashmap">
        /* mng.deleteUserJobSql */
        DELETE FROM mcs_user_job_sql
         WHERE user_job_id = #{USER_JOB_ID}
           AND trgt_seq = #{TRGT_SEQ}
    </delete>

    <select id="getLoginId" parameterType="hashmap" resultType="String">
        SELECT #{requestLoginId} USER_ID
    </select>

    <!-- MetaCollectSvc Agent -->
	<select id="getMCSAgentInfList" parameterType="hashmap" resultType="encore.meta.mybatis.UpperKeyMap">
        /* mng.getMCSAgentInfList */
        SELECT agent_id
             , agent_nm
             , NVL(agent_ip, '127.0.0.1') agent_ip
             , NVL(agent_port, 5001) agent_port
             , agent_dbms_type
             , agent_jdbc_url
        <if test="@Ognl@isNotEmpty(CONNECT_AGENT) and CONNECT_AGENT eq &quot;Y&quot;">
             , agent_driver_class
             , agent_username
             , META_CRYPT.DECRYPT(agent_password, 'encore5868') agent_password
        </if>
          FROM mcs_agent_inf
         WHERE 1 = 1
        <if test="@Ognl@isNotEmpty(AGENT_ID)">
           AND agent_id = #{AGENT_ID}
        </if>
    </select>

    <insert id="insertMCSAgentInf" parameterType="hashmap">
        /* mng.insertMCSAgentInf */
        INSERT INTO mcs_agent_inf
            (agent_id, agent_nm, agent_ip, agent_port, agent_dbms_type, agent_driver_class, agent_jdbc_url, agent_username, agent_password, agent_creat_dt, agent_last_alter_dt)
        VALUES
            (RAWTOHEX(SYS_GUID()), #{AGENT_NM}, #{AGENT_IP}, #{AGENT_PORT}, #{AGENT_DBMS_TYPE}, #{JDBC_DRIVER}, #{CONN_ALIAS_NM}, #{USERNAME}, META_CRYPT.CRYPT(#{PASSWORD}, 'encore5868'), SYSDATE, SYSDATE)
    </insert>

    <delete id="deleteMCSAgentInf" parameterType="hashmap">
        /* mng.deleteMCSAgentInf */
        DELETE FROM mcs_agent_inf WHERE agent_id = #{AGENT_ID}
    </delete>

	<select id="getMdSvr" parameterType="hashmap" resultType="encore.meta.mybatis.UpperKeyMap">
        /* mng.getMdSvr */
        SELECT svr_id, svr_nm, creat_dt, creat_user_id, last_alter_dt
             , last_alter_user_id
          FROM md_svr
         WHERE svr_id = #{SVR_ID}
    </select>

	<select id="getMdSvrIp" parameterType="hashmap" resultType="encore.meta.mybatis.UpperKeyMap">
        /* mng.getMdSvrIp */
        SELECT svr_id, seq, ip, creat_dt, creat_user_id
             , last_alter_dt, last_alter_user_id
          FROM md_svr_ip
         WHERE svr_id = #{SVR_ID}
    </select>

	<select id="getMdInst" parameterType="hashmap" resultType="encore.meta.mybatis.UpperKeyMap">
        /* mng.getMdInst */
        SELECT svr_id, inst_id, inst_nm, sys_id, db_type
             , conn_alias_nm, meta_conn_acct_id
             , meta_conn_acct_pwd
             , mjr_mngr_id, sub_mngr_id
             , creat_dt, creat_user_id, last_alter_dt, last_alter_user_id
          FROM md_inst
         WHERE svr_id = #{SVR_ID}
           AND inst_id = #{INST_ID}
    </select>

	<select id="getMdLsnr" parameterType="hashmap" resultType="encore.meta.mybatis.UpperKeyMap">
        /* mng.getMdLsnr */
        SELECT svr_id, inst_id, lsnr_id, lsnr_nm, lsnr_ip
             , lsnr_prt, meta_conn_yn, mngr_id, creat_dt, creat_user_id
             , last_alter_dt, last_alter_user_id
          FROM md_lsnr
         WHERE svr_id = #{SVR_ID}
           AND inst_id = #{INST_ID}
    </select>

	<select id="getMdDb" parameterType="hashmap" resultType="encore.meta.mybatis.UpperKeyMap">
        /* mng.getMdDb */
        SELECT svr_id, inst_id, db_id, db_nm, creat_dt
             , creat_user_id, last_alter_dt, last_alter_user_id
          FROM md_db
         WHERE svr_id = #{SVR_ID}
           AND inst_id = #{INST_ID}
           AND db_id = #{DB_ID}
    </select>

	<select id="getMdMngObj" parameterType="hashmap" resultType="encore.meta.mybatis.UpperKeyMap">
        /* mng.getMdMngObj */
        SELECT job_id, obj_type, svr_id, inst_id, db_id
             , acct_id, mng_yn, creat_dt, creat_user_id, last_alter_dt
             , last_alter_user_id
          FROM md_mng_obj
         WHERE job_id = #{JOB_ID}
    </select>

	<select id="getMdJob" parameterType="hashmap" resultType="encore.meta.mybatis.UpperKeyMap">
        /* mng.getMdJob */
        SELECT job_id, job_nm, use_yn, job_cat_cd, conn_acct_id
             , conn_acct_pwd, svr_id, inst_id, job_run_dt, elps_tm
             , job_desc, job_char_desc, job_effct, job_obj_desc, job_goal
             , job_mngr_id, job_scpt_dir, sub_mngr_id, mjr_mngr_id, creat_dt
             , creat_user_id, last_alter_dt, last_alter_user_id, conn_alias_nm, acct_nm
             , db_id
          FROM md_job
         WHERE job_id = #{JOB_ID}
    </select>

	<select id="getMdJobSchd" parameterType="hashmap" resultType="encore.meta.mybatis.UpperKeyMap">
        /* mng.getMdJobSchd */
        SELECT schl_id, job_id, schl_nm, use_yn, freq_type
             , freq_rcrr_intrv, freq_intrv, freq_rltv_intrv, next_run_dt, aval_st_dt
             , aval_end_dt, freq_day_type, freq_day_intrv, actv_st_tm, actv_end_tm
             , creat_dt, creat_user_id, last_alter_dt, last_alter_user_id
          FROM md_job_schd
         WHERE job_id = #{JOB_ID}
           AND schl_id = #{SCHL_ID}
    </select>

    <insert id="insertMdJobHist" parameterType="hashmap">
        /* mng.insertMdJobHist */
        INSERT INTO md_job_hist
            (job_id, schl_id, job_st_dt, job_end_dt, elps_tm, run_rslt, run_stat, creat_dt, creat_user_id, last_alter_dt, last_alter_user_id)
        VALUES
            (#{JOB_ID}, #{SCHL_ID}, SYSDATE, SYSDATE, '0', 'SEND AGENT', '0004', SYSDATE, 'APP_SERVER', SYSDATE, 'APP_SERVER');
    </insert>

    <update id="updateMdJobHist" parameterType="hashmap">
        /* mng.updateMdJobHist */
        UPDATE md_job_hist
           SET job_st_dt = #{JOB_ST_DT, jdbcType=VARCHAR}
             , job_end_dt = #{JOB_END_DT, jdbcType=VARCHAR}
             , elps_tm = #{ELPS_TM, jdbcType=VARCHAR}
             , run_rslt = #{RUN_RSLT, jdbcType=VARCHAR}
             , run_stat = #{RUN_STAT, jdbcType=VARCHAR}
         WHERE job_id = #{JOB_ID}
           AND schl_id = #{SCHL_ID}
    </update>
    <!-- //MetaCollectSvc Agent -->

	<select id="getErModelInstList" parameterType="hashmap" resultType="encore.meta.mybatis.UpperKeyMap">
        /* mng.getErModelInstList */
        SELECT s.svr_id || '.' || i.inst_id || '.' || d.db_id svr_inst_db_id
             , s.svr_id
             , i.inst_id
             , d.db_id
             , i.inst_nm
          FROM md_svr s
             , md_inst i
             , md_db d
         WHERE s.mjr_use_cd = '0004'
           AND i.svr_id = s.svr_id
           AND d.svr_id = i.svr_id
           AND d.inst_id = i.inst_id
           AND d.meta_mng_yn = 'Y'
    </select>

	<select id="getErModelTargetList" parameterType="hashmap" resultType="encore.meta.mybatis.UpperKeyMap">
        /* mng.getErModelTargetList */
	   with recursive cte as (
        	select a.* 
        		 , ARRAY[ row_number() OVER (ORDER BY  a.area_nm) ] as hierarchy 
	          FROM md_mng_model a
	         where up_area_id = 'ROOT'
	        union all 
        	select a.*  
        		 , array_append(c.hierarchy, row_number() OVER (ORDER BY  a.area_nm))  as hierarchy
	          FROM md_mng_model a
	          join cte c 
	            on a.up_area_id = c.area_id
	    )     
        SELECT area_id
             , area_nm
             , up_area_id
             , not exists(select 1 from cte p where c.area_id = p.up_area_id) as leaf
             , CASE  WHEN (not exists(select 1 from cte p where c.area_id = p.up_area_id))
					THEN  'icon-logical-model' 
					ELSE  'folder' 
				END  "iconCls"
          FROM cte c
         WHERE job_id = :JOB_ID/*#{JOB_ID}*/::int8
         ORDER BY hierarchy
    </select>

    <insert id="insertManageErModel" parameterType="hashmap">
        /* mng.insertManageErModel */
        INSERT INTO md_mng_model
            (job_id, area_id, area_nm, up_area_id, mng_yn, creat_dt, creat_user_id, last_alter_dt, last_alter_user_id)
        VALUES
            (#{JOB_ID}, #{AREA_ID}, #{AREA_NM}, #{UP_AREA_ID}, 'Y', SYSDATE, #{requestUserId}, SYSDATE, #{requestUserId})
    </insert>

    <delete id="deleteManageErModel" parameterType="hashmap">
        /* mng.deleteManageErModel */
        DELETE FROM md_mng_model
         WHERE job_id = #{JOB_ID}
    </delete>

	<select id="getAllocReciveStep" parameterType="hashmap" resultType="encore.meta.mybatis.UpperKeyMap">
      /* mng.getAllocReciveStep */
        SELECT s.sign_step_gbn_cd AS my_sign_step
             , CASE WHEN s.sign_step_gbn_cd='0003' THEN  'Y'
             		WHEN s.sign_step_gbn_cd='0004' THEN  'Y'  
             		WHEN s.sign_step_gbn_cd='0006' THEN  
         				CASE WHEN s.signer_gbn='G' THEN  'Y'  
         					ELSE 'N'
     					end
					ELSE 'N'
				END  receive_yn
             , signer_id
          FROM msg_sign_rslt s
         WHERE s.req_doc_id = #{REQ_DOC_ID}
           AND s.aval_end_dt = '99991231235959'
           AND s.sign_stat_cd = '0001'
           AND s.signer_id = CASE WHEN s.signer_gbn='U' THEN  #{requestUserId}                                                 WHEN s.signer_gbn='G' THEN (SELECT dept_id FROM usr_user WHERE user_id = #{requestUserId})                                                 WHEN s.signer_gbn='R' THEN (SELECT DISTINCT alloc_id                                                          FROM v_usr_alloc                                                         WHERE alloc_gbn_cd = '0003'                                                           AND user_id = #{requestUserId}                                                           AND alloc_id = s.signer_id) END
    </select>

	<select id="getDatawareLogList" parameterType="hashmap" resultType="encore.meta.mybatis.UpperKeyMap">
        /* mng.getDatawareLogList */
        <include refid="pagingHeader"/>
        SELECT l.*, count(1) OVER() as total_row_count
          FROM (
            SELECT app_gbn
                 , err_dt AS log_dt
                 , err_cause AS title
                 , err_ctnt AS cont
              FROM ms_err_log
             UNION ALL
            SELECT 'pkg' AS app_gbn
                  , log_dt
                  , log_title
                  , log_ctnt
              FROM ms_db_src_log
             UNION ALL
            SELECT 'autoApprove' AS app_gbn
                 , SUBSTR(coalesce(tgt_item_id, req_doc_id),0,8)||'000000' log_dt
                 , coalesce(TGT_ITEM_ID, REQ_DOC_ID) log_title
                 , CHK_RSLT log_ctnt
              FROM ms_aprv_err_log
          ) l
        WHERE 1=1
          AND log_dt BETWEEN #{START_DT} AND #{END_DT}
        <if test="@Ognl@isNotEmpty(APP_GBN)">
          AND upper(app_gbn) like '%'||upper(#{APP_GBN})||'%'
        </if>
        <if test="@Ognl@isNotEmpty(TITLE)">
          AND upper(title) LIKE '%'||upper(#{TITLE})||'%'
        </if>
        <if test="@Ognl@isNotEmpty(CONTENTS)">
          AND upper(cont) LIKE '%'||upper(#{CONTENTS})||'%'
        </if>
        <if test="@Ognl@isNotEmpty(sortParams)">
            <foreach item="item" collection="sortParams" open="ORDER BY" separator=",">
                ${item.property} ${item.direction}
            </foreach>
        </if>
        <if test="@Ognl@isEmpty(sortParams)">
            ORDER BY log_dt DESC
        </if>
        <include refid="pagingFooter"/>
    </select>

    <select id="getApprovalLineInfoForReqInfo" parameterType="hashmap" resultType="hashmap">
        /*mng.getApprovalLineInfoForReqInfo*/
     	SELECT '' sign_line_id
             , '' sign_line_nm
             , '' sign_line_desc
             , aval_st_dt
             , sign_seq
             , sign_step_gbn_cd
             , '' signee_gbn_cd
             , signer_gbn
             , signer_id
             , CASE WHEN r.signer_gbn='U' THEN (SELECT user_nm FROM usr_user WHERE user_id = r.signer_id)                                   WHEN r.signer_gbn='G' THEN (SELECT dept_nm FROM usr_dept WHERE dept_id = r.signer_id)                                   WHEN r.signer_gbn='R' THEN (SELECT role_nm FROM usr_role WHERE role_id = r.signer_id) END  AS signer_nm
             , '' post
             , (SELECT dept_nm FROM usr_dept WHERE dept_id = r.SIGNER_DEPT_ID) AS dept_nm
             , signer_dept_id
             , last_appr_yn
             , doc_mod_prv_yn
             , line_mod_prv_yn
             , bypass_yn
             , '' AS sign_tgt_gbn_cd
             , '' tgt_area_id
             , '' tgt_area_nm
             , '' sign_line_type
          FROM msg_sign_rslt r
         WHERE req_doc_id = #{REQ_DOC_ID}
           AND sign_seq > 0
           AND sign_step_gbn_cd != '0001'
           AND aval_end_dt = '99991231235959'
    </select>

    <select id="getFinishedApprovalLine" parameterType="hashmap" resultType="hashmap">
        /*mng.getAprSignInfo*/
        SELECT sign_seq
             , signer_gbn
             , signer_id
             , sign_step_gbn_cd
             , sign_stat_cd
          FROM msg_sign_rslt
         WHERE req_doc_id = #{REQ_DOC_ID}
           AND sign_seq BETWEEN 1 AND 99
           AND sign_stat_cd != '0001'
           AND (sign_stat_cd IS NOT NULL AND sign_stat_cd::text  <![CDATA[<>]]> '')
           AND aval_end_dt = '99991231235959'
         ORDER BY sign_seq
    </select>

    <update id="updateSignLine" parameterType="hashmap">
        /* mng.deleteJobFromDeleteServer */
        <selectKey keyProperty="CUR_DATE" resultType="string" order="BEFORE">
   	     SELECT TO_CHAR(LOCALTIMESTAMP, 'yyyyMMddHH24miss')
        </selectKey>
        DECLARE
        BEGIN
            <!--결재가 진행중인 결재라인의 aval_end_dt 를 현재 시간으로 update -->
            UPDATE msg_sign_rslt
               SET aval_end_dt = #{CUR_DATE}
             WHERE req_doc_id = #{REQ_DOC_ID}
               AND ( sign_stat_cd = '0001' OR sign_stat_cd IS NULL )
               AND SIGN_SEQ > 0
               AND aval_end_dt = '99991231235959';

             MERGE INTO msg_sign_rslt r
                 USING (
                 <foreach collection="SIGN_STEPS" item="STEP" open="" separator="UNION ALL" close="">
                    SELECT #{REQ_DOC_ID} req_doc_id
                         , #{STEP.SIGN_SEQ} sign_seq
                         , #{STEP.SIGNER_GBN} signer_gbn
                         , #{STEP.SIGNER_ID} signer_id
                         , #{STEP.SIGNER_DEPT_ID, jdbcType=VARCHAR} signer_dept_id
                         , #{CUR_DATE} last_hist_dt
                         , '' sign_cmmt
                         , CASE WHEN #{STEP.SIGN_SEQ} IN (SELECT SIGN_SEQ
                                                           FROM msg_sign_rslt
                                                          WHERE req_doc_id = #{REQ_DOC_ID}
                                                            AND sign_stat_cd = '0001'
                                                            AND aval_end_dt = #{CUR_DATE}) THEN '0001'
                                WHEN #{STEP.SIGN_STEP_GBN_CD} = '0006' THEN '0001'
                                ELSE ''
                            END sign_stat_cd
                        , #{STEP.SIGN_STEP_GBN_CD} sign_step_gbn_cd
                        , '' read_yn
                        , #{STEP.LAST_APPR_YN, jdbcType=VARCHAR} last_appr_yn
                        , #{STEP.DOC_MOD_PRV_YN, jdbcType=VARCHAR} doc_mod_prv_yn
                        , #{STEP.LINE_MOD_PRV_YN, jdbcType=VARCHAR} line_mod_prv_yn
                        , #{STEP.BYPASS_YN, jdbcType=VARCHAR} bypass_yn
                        , #{CUR_DATE} aval_st_dt
                        , '99991231235959' aval_end_dt
                     FROM DUAL
                 </foreach>
                       ) t
                   ON ( r.req_doc_id = t.req_doc_id
                    AND r.SIGN_SEQ = t.SIGN_SEQ
                    AND r.SIGNER_ID = t.SIGNER_ID
                    AND r.SIGN_STEP_GBN_CD = t.SIGN_STEP_GBN_CD
                    AND r.REQ_DOC_ID = #{REQ_DOC_ID}
                    AND r.aval_end_dt = '99991231235959')
                 WHEN NOT MATCHED THEN
                     INSERT ( req_doc_id, sign_seq, signer_gbn, signer_id, signer_dept_id, last_hist_dt, sign_cmmt, sign_stat_cd, sign_step_gbn_cd, read_yn,
                            last_appr_yn, doc_mod_prv_yn, line_mod_prv_yn, bypass_yn, aval_st_dt, aval_end_dt )
                     VALUES( t.req_doc_id, t.sign_seq, t.signer_gbn, t.signer_id, t.signer_dept_id, t.last_hist_dt, t.sign_cmmt, t.sign_stat_cd, t.sign_step_gbn_cd, t.read_yn,
                            t.last_appr_yn, t.doc_mod_prv_yn, t.line_mod_prv_yn, t.bypass_yn, t.aval_st_dt, t.aval_end_dt);
          END;
    </update>

    <!-- 결재대상리스트 -->
    <select id="getSignTgtList" parameterType="hashmap" resultType="hashmap">
        /* mng.getSignTgtList */
          SELECT tgt.*
              , DECODE(up_cd_id , '9001', cd_id, up_cd_id) AS sign_tgt_gbn_cd
              , DECODE(up_cd_id , '9001', '', cd_id) AS sign_sub_tgt_gbn
            FROM (
                    SELECT lang_cd, up_cd_id, cd_id, cd_id as id, cd_nm
                         , CASE WHEN cd_id IN('1001', '8001') THEN 'STD'
                                WHEN cd_id IN('2001', '2101', '2201', '3000') THEN 'MDL'
                                WHEN cd_id IN('3001', '5001') THEN 'DB'
                                WHEN cd_id IN('4001') THEN 'DQ'
                                WHEN cd_id IN('6001') THEN 'DF'
                            END tgt_obj_gbn
                      FROM ms_code
                     WHERE up_Cd_id = '9001'
                       AND lang_cd = #{langCd}
                       <if test="@encore.meta.data.DatawareConfigData@getProperty(&quot;common.installedDq&quot;).equals(&quot;N&quot;)">
                       AND cd_id != '4001'
                       </if>
                       <if test="@encore.meta.data.DatawareConfigData@getProperty(&quot;common.installedDF&quot;).equals(&quot;N&quot;)">
                       AND cd_id != '6001'
                       </if>
                     UNION ALL
                    SELECT #{langCd} lang_cd
                         , '7001' as up_cd_id
                         , g.udp_grp_id as cd_id
                         , '7001'||g.udp_grp_id as id
                         , GET_TERM(#{langCd}, udp_grp_nm) as cd_nm
                         , c.tgt_obj_gbn
                      FROM md_udp_clss c
                     INNER JOIN md_udp_grp g
                        ON g.udp_clss_id = c.udp_clss_id
                     WHERE g.sign_yn = 'Y'
             ) tgt
           START WITH up_cd_id = '9001'
           CONNECT BY up_cd_id = PRIOR cd_id
    </select>

    <!-- 해당 user의 ROLE명으로 권한 체크 -->
    <select id="getCheckAllocWithRoleName" parameterType="hashmap" resultType="int">
    /* mng.getCheckAllocWithRoleName */
        SELECT COUNT(*) cnt
          FROM usr_role r
          JOIN v_usr_alloc a
            ON a.alloc_id = r.role_id
           AND a.user_id = #{requestUserId}
           AND a.alloc_gbn_cd = '0003'
           AND a.end_dt = '99991231'
         WHERE r.role_nm =  #{ROLE_NM}

    </select>

    <select id="getSchemaRoleMapList" parameterType="map" resultType="map">
    /* mng.getSchemaRoleMapList */
        SELECT o.*
             , i.inst_nm
          FROM MDB_ROLE_MAP o
          JOIN md_inst i
            ON i.svr_id = o.svr_id
           AND i.inst_id = o.inst_id
         WHERE 1=1
         <if test="@Ognl@isNotEmpty(INST_NM)">
           AND i.INST_NM = #{INST_NM}
        </if>
        <if test="@Ognl@isNotEmpty(ACCT_ID)">
           AND o.ACCT_ID = #{ACCT_ID}
        </if>
        <if test="@Ognl@isNotEmpty(ROLE_TYPE)">
           AND o.ROLE_TYPE = #{ROLE_TYPE}
        </if>
        <if test="@Ognl@isNotEmpty(TGT_ROLE_NM)">
           AND o.TGT_ROLE_NM LIKE #{TGT_ROLE_NM}
        </if>
    </select>

    <select id="getSchemaRoleMapCnt" parameterType="map" resultType="int">
    /* mng.getSchemaRoleMapCnt */
	SELECT COUNT(*) cnt FROM MDB_ROLE_MAP
     WHERE SVR_ID      = #{SVR_ID}
       AND INST_ID     = #{INST_ID}
       AND DB_ID       = #{DB_ID}
       AND ACCT_ID     = #{ACCT_ID}
       AND ROLE_TYPE   = #{ROLE_TYPE}
       AND TGT_ROLE_NM = #{TGT_ROLE_NM}
    </select>

    <insert id="insertSchemaRoleMap" parameterType="map">
    /* mng.insertSchemaRoleMap */
    INSERT INTO MDB_ROLE_MAP (SVR_ID, INST_ID, DB_ID, ACCT_ID, ROLE_TYPE, TGT_ROLE_NM, SEL_YN, UDP_YN, DEL_YN, INS_YN, USE_YN, BAT_YN)
    VALUES(   #{SVR_ID}
            , #{INST_ID}
            , #{DB_ID}
            , #{ACCT_ID}
            , #{ROLE_TYPE}
            , #{TGT_ROLE_NM}
            , #{SEL_YN, jdbcType=VARCHAR}
            , #{UDP_YN, jdbcType=VARCHAR}
            , #{DEL_YN, jdbcType=VARCHAR}
            , #{INS_YN, jdbcType=VARCHAR}
            , #{USE_YN, jdbcType=VARCHAR}
            , #{BAT_YN, jdbcType=VARCHAR}
     )
    </insert>

    <update id="updateSchemaRoleMap" parameterType="map">
    /* mng.updateSchemaRoleMap */
    UPDATE MDB_ROLE_MAP
       SET SEL_YN = #{SEL_YN, jdbcType=VARCHAR}
         , UDP_YN = #{UDP_YN, jdbcType=VARCHAR}
         , DEL_YN = #{DEL_YN, jdbcType=VARCHAR}
         , INS_YN = #{INS_YN, jdbcType=VARCHAR}
         , USE_YN = #{USE_YN, jdbcType=VARCHAR}
         , BAT_YN = #{BAT_YN, jdbcType=VARCHAR}
     WHERE SVR_ID      = #{SVR_ID}
       AND INST_ID     = #{INST_ID}
       AND DB_ID       = #{DB_ID}
       AND ACCT_ID     = #{ACCT_ID}
       AND ROLE_TYPE   = #{ROLE_TYPE}
       AND TGT_ROLE_NM = #{TGT_ROLE_NM}
    </update>

    <delete id="deleteSchemaRoleMap" parameterType="map">
    /* mng.deleteSchemaRoleMap */
 	 DELETE FROM MDB_ROLE_MAP
         WHERE SVR_ID      = #{SVR_ID}
           AND INST_ID     = #{INST_ID}
           AND DB_ID       = #{DB_ID}
           AND ACCT_ID     = #{ACCT_ID}
           AND ROLE_TYPE   = #{ROLE_TYPE}
           AND TGT_ROLE_NM = #{TGT_ROLE_NM}
    </delete>

    <select id="getCheckPassValid" parameterType="hashmap" resultType="hashmap">
        /* mng.getCheckPassValid */
        SELECT CASE WHEN u.password = ENC_PASSWD_ENCRYPT(#{NEW_PASSWORD, jdbcType=VARCHAR}) THEN 'N'
                    ELSE 'Y'
                END AS valid
             , CASE WHEN u.password = ENC_PASSWD_ENCRYPT(#{PASSWORD, jdbcType=VARCHAR}) THEN 'Y'
                    ELSE 'N'
                END AS permit
          FROM usr_user u
         WHERE u.user_id = #{requestUserId}
    </select>

    <update id="updateMyPassword" parameterType="hashmap">
        /* mng.updateMyPassword */
        UPDATE usr_user
        <set>
            <if test="@Ognl@isNotEmpty(NEW_PASSWORD)">password = ENC_PASSWD_ENCRYPT(#{NEW_PASSWORD})</if>
            <if test="@Ognl@isNotEmpty(NEW_PASSWORD)">last_passwd_mod_dt = TO_CHAR(LOCALTIMESTAMP, 'YYYYMMDDHH24MISS')</if>
        </set>
         WHERE user_id = #{requestUserId}
    </update>

    <insert id="insertMdMdlSystemAttribute" statementType="CALLABLE" keyProperty="USER_ID" parameterType="hashmap">
        /* mng.insertMdMdlSystemAttribute */
        <selectKey keyProperty="SYS_ATTR_ID" resultType="string" order="BEFORE">
              select uuid_generate_v4()::text
        </selectKey>
            INSERT INTO md_mdl_system_attribute
                (sys_attr_id, sys_attr_nm, sys_col_nm, aval_st_dt, aval_end_dt, mandatory_yn, data_type, data_type_cd, data_len, data_scale, null_yn, defval, dfnt)
            VALUES
                (#{SYS_ATTR_ID}, #{SYS_ATTR_NM}, #{SYS_COL_NM}, TO_CHAR(SYSDATE, 'yyyyMMddHH24miss'), '99991231235959',
                 #{MANDATORY_YN, jdbcType=VARCHAR}, #{DATA_TYPE, jdbcType=VARCHAR}, #{DATA_TYPE_CD, jdbcType=VARCHAR},
                 #{DATA_LEN, jdbcType=VARCHAR}, #{DATA_SCALE, jdbcType=VARCHAR}, #{NULL_YN, jdbcType=VARCHAR},
                 #{DEFVAL, jdbcType=VARCHAR}, #{DFNT, jdbcType=VARCHAR})
    </insert>

    <update id="updateMdMdlSystemAttribute" parameterType="hashmap">
        /* mng.updateMdMdlSystemAttribute */
        DECLARE
          BEGIN

            UPDATE md_mdl_system_attribute
               SET aval_end_dt = TO_CHAR(SYSDATE, 'yyyyMMddHH24miss')
             WHERE sys_attr_id = #{SYS_ATTR_ID}
               AND aval_end_dt = '99991231235959';

            INSERT INTO md_mdl_system_attribute
                (sys_attr_id, sys_attr_nm, sys_col_nm, aval_st_dt, aval_end_dt, mandatory_yn, data_type, data_type_cd, data_len, data_scale, null_yn, defval, dfnt)
            VALUES
                (#{SYS_ATTR_ID}, #{SYS_ATTR_NM}, #{SYS_COL_NM}, TO_CHAR(SYSDATE, 'yyyyMMddHH24miss'), '99991231235959',
                 #{MANDATORY_YN, jdbcType=VARCHAR}, #{DATA_TYPE, jdbcType=VARCHAR}, #{DATA_TYPE_CD, jdbcType=VARCHAR},
                 #{DATA_LEN, jdbcType=VARCHAR}, #{DATA_SCALE, jdbcType=VARCHAR}, #{NULL_YN, jdbcType=VARCHAR},
                 #{DEFVAL, jdbcType=VARCHAR}, #{DFNT, jdbcType=VARCHAR});
           END;
    </update>

    <update id="deleteMdMdlSystemAttribute" parameterType="hashmap">
        /* mng.deleteMdMdlSystemAttribute */
        UPDATE md_mdl_system_attribute
           SET aval_end_dt = TO_CHAR(SYSDATE, 'yyyyMMddHH24miss')
         WHERE aval_end_dt = '99991231235959'
           AND sys_attr_id IN
        <foreach item="item" collection="DELETE_RECORDS" open="(" separator="," close=")">
           #{item}
        </foreach>
    </update>

    <select id="getSystemAttributes" parameterType="hashmap" resultType="hashmap">
        /* mng.getSystemAttributes */
        SELECT sys_attr_id
             , sys_attr_nm
             , sys_col_nm
             , aval_st_dt
             , aval_end_dt
             , mandatory_yn
             , data_type
             , data_type_cd
             , data_len
             , data_scale
             , null_yn
             , defval
             , dfnt
             , DECODE(mandatory_yn, 'Y', 'true', 'false') checked
          FROM md_mdl_system_attribute
         WHERE aval_end_dt = '99991231235959'
         <if test="@Ognl@isNotEmpty(searchValue)">
           AND (sys_attr_nm LIKE #{searchValue} OR sys_col_nm LIKE #{searchValue})
        </if>
    </select>

</mapper>
